
LoRa_Gateway_STM32F429_FreeRTOS_Max_SPI_Channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800767c  0800767c  0001767c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800773c  0800773c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007744  08007744  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007744  08007744  00017744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007748  08007748  00017748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800774c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004458  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200044b8  200044b8  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019d3e  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b0e  00000000  00000000  00039e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001640  00000000  00000000  0003d920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001141  00000000  00000000  0003ef60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000268dc  00000000  00000000  000400a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001918d  00000000  00000000  0006697d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4ba7  00000000  00000000  0007fb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005f60  00000000  00000000  001646b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  0016a614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007664 	.word	0x08007664

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08007664 	.word	0x08007664

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004ec:	b4b0      	push	{r4, r5, r7}
 80004ee:	b08f      	sub	sp, #60	; 0x3c
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 915       ;
 80004f4:	f240 3393 	movw	r3, #915	; 0x393
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_12      ;
 80004fa:	230c      	movs	r3, #12
 80004fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000500:	2307      	movs	r3, #7
 8000502:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000506:	2301      	movs	r3, #1
 8000508:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 800050c:	23ff      	movs	r3, #255	; 0xff
 800050e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000512:	2364      	movs	r3, #100	; 0x64
 8000514:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000518:	2308      	movs	r3, #8
 800051a:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	461d      	mov	r5, r3
 8000520:	f107 040c 	add.w	r4, r7, #12
 8000524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800052a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800052c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000530:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	373c      	adds	r7, #60	; 0x3c
 8000538:	46bd      	mov	sp, r7
 800053a:	bcb0      	pop	{r4, r5, r7}
 800053c:	4770      	bx	lr

0800053e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800053e:	b580      	push	{r7, lr}
 8000540:	b084      	sub	sp, #16
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000548:	2101      	movs	r1, #1
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 f99f 	bl	800088e <LoRa_read>
 8000550:	4603      	mov	r3, r0
 8000552:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000554:	7bbb      	ldrb	r3, [r7, #14]
 8000556:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d107      	bne.n	800056e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	f023 0307 	bic.w	r3, r3, #7
 8000564:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2200      	movs	r2, #0
 800056a:	61da      	str	r2, [r3, #28]
 800056c:	e03e      	b.n	80005ec <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d10c      	bne.n	800058e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000578:	f023 0307 	bic.w	r3, r3, #7
 800057c:	b25b      	sxtb	r3, r3
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	b25b      	sxtb	r3, r3
 8000584:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	61da      	str	r2, [r3, #28]
 800058c:	e02e      	b.n	80005ec <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	2b03      	cmp	r3, #3
 8000592:	d10c      	bne.n	80005ae <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000594:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000598:	f023 0307 	bic.w	r3, r3, #7
 800059c:	b25b      	sxtb	r3, r3
 800059e:	f043 0303 	orr.w	r3, r3, #3
 80005a2:	b25b      	sxtb	r3, r3
 80005a4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2203      	movs	r2, #3
 80005aa:	61da      	str	r2, [r3, #28]
 80005ac:	e01e      	b.n	80005ec <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b05      	cmp	r3, #5
 80005b2:	d10c      	bne.n	80005ce <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80005b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005b8:	f023 0307 	bic.w	r3, r3, #7
 80005bc:	b25b      	sxtb	r3, r3
 80005be:	f043 0305 	orr.w	r3, r3, #5
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2205      	movs	r2, #5
 80005ca:	61da      	str	r2, [r3, #28]
 80005cc:	e00e      	b.n	80005ec <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	2b06      	cmp	r3, #6
 80005d2:	d10b      	bne.n	80005ec <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80005d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005d8:	f023 0307 	bic.w	r3, r3, #7
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	f043 0306 	orr.w	r3, r3, #6
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2206      	movs	r2, #6
 80005ea:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	461a      	mov	r2, r3
 80005f0:	2101      	movs	r1, #1
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 f965 	bl	80008c2 <LoRa_write>
	//HAL_Delay(10);
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	4613      	mov	r3, r2
 800060e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	889b      	ldrh	r3, [r3, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	4619      	mov	r1, r3
 800061c:	f002 ff0e 	bl	800343c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	6998      	ldr	r0, [r3, #24]
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	f003 fcc3 	bl	8003fb6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000630:	bf00      	nop
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4618      	mov	r0, r3
 8000638:	f004 f9aa 	bl	8004990 <HAL_SPI_GetState>
 800063c:	4603      	mov	r3, r0
 800063e:	2b01      	cmp	r3, #1
 8000640:	d1f7      	bne.n	8000632 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6998      	ldr	r0, [r3, #24]
 8000646:	8b3a      	ldrh	r2, [r7, #24]
 8000648:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800064c:	6839      	ldr	r1, [r7, #0]
 800064e:	f003 fdee 	bl	800422e <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000652:	bf00      	nop
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4618      	mov	r0, r3
 800065a:	f004 f999 	bl	8004990 <HAL_SPI_GetState>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d1f7      	bne.n	8000654 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	2201      	movs	r2, #1
 800066e:	4619      	mov	r1, r3
 8000670:	f002 fee4 	bl	800343c <HAL_GPIO_WritePin>
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4613      	mov	r3, r2
 800068a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	889b      	ldrh	r3, [r3, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	4619      	mov	r1, r3
 8000698:	f002 fed0 	bl	800343c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	6998      	ldr	r0, [r3, #24]
 80006a0:	88fa      	ldrh	r2, [r7, #6]
 80006a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006a6:	68b9      	ldr	r1, [r7, #8]
 80006a8:	f003 fc85 	bl	8003fb6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006ac:	bf00      	nop
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 f96c 	bl	8004990 <HAL_SPI_GetState>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d1f7      	bne.n	80006ae <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6998      	ldr	r0, [r3, #24]
 80006c2:	8b3a      	ldrh	r2, [r7, #24]
 80006c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006c8:	6839      	ldr	r1, [r7, #0]
 80006ca:	f003 fc74 	bl	8003fb6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006ce:	bf00      	nop
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 f95b 	bl	8004990 <HAL_SPI_GetState>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d1f7      	bne.n	80006d0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	889b      	ldrh	r3, [r3, #4]
 80006e8:	2201      	movs	r2, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	f002 fea6 	bl	800343c <HAL_GPIO_WritePin>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	04db      	lsls	r3, r3, #19
 8000706:	115b      	asrs	r3, r3, #5
 8000708:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	0c1b      	lsrs	r3, r3, #16
 800070e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000710:	7afb      	ldrb	r3, [r7, #11]
 8000712:	461a      	mov	r2, r3
 8000714:	2106      	movs	r1, #6
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 f8d3 	bl	80008c2 <LoRa_write>
	HAL_Delay(5);
 800071c:	2005      	movs	r0, #5
 800071e:	f002 fb49 	bl	8002db4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	0a1b      	lsrs	r3, r3, #8
 8000726:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000728:	7afb      	ldrb	r3, [r7, #11]
 800072a:	461a      	mov	r2, r3
 800072c:	2107      	movs	r1, #7
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 f8c7 	bl	80008c2 <LoRa_write>
	HAL_Delay(5);
 8000734:	2005      	movs	r0, #5
 8000736:	f002 fb3d 	bl	8002db4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800073e:	7afb      	ldrb	r3, [r7, #11]
 8000740:	461a      	mov	r2, r3
 8000742:	2108      	movs	r1, #8
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f8bc 	bl	80008c2 <LoRa_write>
	HAL_Delay(5);
 800074a:	2005      	movs	r0, #5
 800074c:	f002 fb32 	bl	8002db4 <HAL_Delay>
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	2b0c      	cmp	r3, #12
 8000766:	dd01      	ble.n	800076c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000768:	230c      	movs	r3, #12
 800076a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	2b06      	cmp	r3, #6
 8000770:	dc01      	bgt.n	8000776 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000772:	2307      	movs	r3, #7
 8000774:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000776:	211e      	movs	r1, #30
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f888 	bl	800088e <LoRa_read>
 800077e:	4603      	mov	r3, r0
 8000780:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000782:	200a      	movs	r0, #10
 8000784:	f002 fb16 	bl	8002db4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	b2da      	uxtb	r2, r3
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4413      	add	r3, r2
 800079a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 800079c:	7bbb      	ldrb	r3, [r7, #14]
 800079e:	461a      	mov	r2, r3
 80007a0:	211e      	movs	r1, #30
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f88d 	bl	80008c2 <LoRa_write>
	HAL_Delay(10);
 80007a8:	200a      	movs	r0, #10
 80007aa:	f002 fb03 	bl	8002db4 <HAL_Delay>
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	460b      	mov	r3, r1
 80007c0:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	461a      	mov	r2, r3
 80007c6:	2109      	movs	r1, #9
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 f87a 	bl	80008c2 <LoRa_write>
	HAL_Delay(10);
 80007ce:	200a      	movs	r0, #10
 80007d0:	f002 faf0 	bl	8002db4 <HAL_Delay>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80007ec:	78fb      	ldrb	r3, [r7, #3]
 80007ee:	2b2c      	cmp	r3, #44	; 0x2c
 80007f0:	d801      	bhi.n	80007f6 <LoRa_setOCP+0x1a>
		current = 45;
 80007f2:	232d      	movs	r3, #45	; 0x2d
 80007f4:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80007f6:	78fb      	ldrb	r3, [r7, #3]
 80007f8:	2bf0      	cmp	r3, #240	; 0xf0
 80007fa:	d901      	bls.n	8000800 <LoRa_setOCP+0x24>
		current = 240;
 80007fc:	23f0      	movs	r3, #240	; 0xf0
 80007fe:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	2b78      	cmp	r3, #120	; 0x78
 8000804:	d809      	bhi.n	800081a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	3b2d      	subs	r3, #45	; 0x2d
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <LoRa_setOCP+0x78>)
 800080c:	fb82 1203 	smull	r1, r2, r2, r3
 8000810:	1052      	asrs	r2, r2, #1
 8000812:	17db      	asrs	r3, r3, #31
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e00b      	b.n	8000832 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	2bf0      	cmp	r3, #240	; 0xf0
 800081e:	d808      	bhi.n	8000832 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	331e      	adds	r3, #30
 8000824:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <LoRa_setOCP+0x78>)
 8000826:	fb82 1203 	smull	r1, r2, r2, r3
 800082a:	1092      	asrs	r2, r2, #2
 800082c:	17db      	asrs	r3, r3, #31
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3320      	adds	r3, #32
 8000836:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	210b      	movs	r1, #11
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f83f 	bl	80008c2 <LoRa_write>
	HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f002 fab5 	bl	8002db4 <HAL_Delay>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	66666667 	.word	0x66666667

08000858 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000860:	211e      	movs	r1, #30
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f813 	bl	800088e <LoRa_read>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f043 0307 	orr.w	r3, r3, #7
 8000872:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000874:	7bbb      	ldrb	r3, [r7, #14]
 8000876:	461a      	mov	r2, r3
 8000878:	211e      	movs	r1, #30
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 f821 	bl	80008c2 <LoRa_write>
	HAL_Delay(10);
 8000880:	200a      	movs	r0, #10
 8000882:	f002 fa97 	bl	8002db4 <HAL_Delay>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af02      	add	r7, sp, #8
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	460b      	mov	r3, r1
 8000898:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800089a:	78fb      	ldrb	r3, [r7, #3]
 800089c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80008a4:	f107 030f 	add.w	r3, r7, #15
 80008a8:	f107 010e 	add.w	r1, r7, #14
 80008ac:	2201      	movs	r2, #1
 80008ae:	9200      	str	r2, [sp, #0]
 80008b0:	2201      	movs	r2, #1
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff fea4 	bl	8000600 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af02      	add	r7, sp, #8
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	460b      	mov	r3, r1
 80008cc:	70fb      	strb	r3, [r7, #3]
 80008ce:	4613      	mov	r3, r2
 80008d0:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	73bb      	strb	r3, [r7, #14]
	data = value;
 80008dc:	78bb      	ldrb	r3, [r7, #2]
 80008de:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80008e0:	f107 030f 	add.w	r3, r7, #15
 80008e4:	f107 010e 	add.w	r1, r7, #14
 80008e8:	2201      	movs	r2, #1
 80008ea:	9200      	str	r2, [sp, #0]
 80008ec:	2201      	movs	r2, #1
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fec4 	bl	800067c <LoRa_writeReg>
	//HAL_Delay(5);
}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	return 1;
 8000904:	2301      	movs	r3, #1
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800091a:	2105      	movs	r1, #5
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff fe0e 	bl	800053e <LoRa_gotoMode>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800092a:	b590      	push	{r4, r7, lr}
 800092c:	b089      	sub	sp, #36	; 0x24
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	4613      	mov	r3, r2
 8000936:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	e007      	b.n	8000952 <LoRa_receive+0x28>
		data[i]=0;
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	68ba      	ldr	r2, [r7, #8]
 8000946:	4413      	add	r3, r2
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	3301      	adds	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	429a      	cmp	r2, r3
 8000958:	dbf3      	blt.n	8000942 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800095a:	2101      	movs	r1, #1
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f7ff fdee 	bl	800053e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000962:	2112      	movs	r1, #18
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f7ff ff92 	bl	800088e <LoRa_read>
 800096a:	4603      	mov	r3, r0
 800096c:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800096e:	7cfb      	ldrb	r3, [r7, #19]
 8000970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000974:	2b00      	cmp	r3, #0
 8000976:	d02f      	beq.n	80009d8 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000978:	22ff      	movs	r2, #255	; 0xff
 800097a:	2112      	movs	r1, #18
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f7ff ffa0 	bl	80008c2 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000982:	2113      	movs	r1, #19
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff ff82 	bl	800088e <LoRa_read>
 800098a:	4603      	mov	r3, r0
 800098c:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 800098e:	2110      	movs	r1, #16
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f7ff ff7c 	bl	800088e <LoRa_read>
 8000996:	4603      	mov	r3, r0
 8000998:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	461a      	mov	r2, r3
 800099e:	210d      	movs	r1, #13
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff ff8e 	bl	80008c2 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80009a6:	7cba      	ldrb	r2, [r7, #18]
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4293      	cmp	r3, r2
 80009ac:	bf28      	it	cs
 80009ae:	4613      	movcs	r3, r2
 80009b0:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	e00b      	b.n	80009d0 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	18d4      	adds	r4, r2, r3
 80009be:	2100      	movs	r1, #0
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f7ff ff64 	bl	800088e <LoRa_read>
 80009c6:	4603      	mov	r3, r0
 80009c8:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	7ffb      	ldrb	r3, [r7, #31]
 80009d2:	697a      	ldr	r2, [r7, #20]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbef      	blt.n	80009b8 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80009d8:	2105      	movs	r1, #5
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff fdaf 	bl	800053e <LoRa_gotoMode>
    return min;
 80009e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd90      	pop	{r4, r7, pc}

080009ea <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff ff82 	bl	80008fc <LoRa_isvalid>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 8093 	beq.w	8000b26 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000a00:	2100      	movs	r1, #0
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff fd9b 	bl	800053e <LoRa_gotoMode>
			HAL_Delay(10);
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f002 f9d3 	bl	8002db4 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000a0e:	2101      	movs	r1, #1
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff3c 	bl	800088e <LoRa_read>
 8000a16:	4603      	mov	r3, r0
 8000a18:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000a1a:	200a      	movs	r0, #10
 8000a1c:	f002 f9ca 	bl	8002db4 <HAL_Delay>
			data = read | 0x80;
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a26:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000a28:	7bbb      	ldrb	r3, [r7, #14]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ff47 	bl	80008c2 <LoRa_write>
			HAL_Delay(100);
 8000a34:	2064      	movs	r0, #100	; 0x64
 8000a36:	f002 f9bd 	bl	8002db4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6a1b      	ldr	r3, [r3, #32]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff fe59 	bl	80006f8 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff feb1 	bl	80007b6 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff febd 	bl	80007dc <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000a62:	2223      	movs	r2, #35	; 0x23
 8000a64:	210c      	movs	r1, #12
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ff2b 	bl	80008c2 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff fef3 	bl	8000858 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff fe6c 	bl	8000758 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000a80:	22ff      	movs	r2, #255	; 0xff
 8000a82:	211f      	movs	r1, #31
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff1c 	bl	80008c2 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4413      	add	r3, r2
 8000aa4:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000aa6:	7bbb      	ldrb	r3, [r7, #14]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	211d      	movs	r1, #29
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff08 	bl	80008c2 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ab6:	0a1b      	lsrs	r3, r3, #8
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	461a      	mov	r2, r3
 8000abe:	2120      	movs	r1, #32
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fefe 	bl	80008c2 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	461a      	mov	r2, r3
 8000ace:	2121      	movs	r1, #33	; 0x21
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fef6 	bl	80008c2 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000ad6:	2140      	movs	r1, #64	; 0x40
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff fed8 	bl	800088e <LoRa_read>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000ae8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	461a      	mov	r2, r3
 8000aee:	2140      	movs	r1, #64	; 0x40
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fee6 	bl	80008c2 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000af6:	2101      	movs	r1, #1
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff fd20 	bl	800053e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2201      	movs	r2, #1
 8000b02:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000b04:	200a      	movs	r0, #10
 8000b06:	f002 f955 	bl	8002db4 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000b0a:	2142      	movs	r1, #66	; 0x42
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff febe 	bl	800088e <LoRa_read>
 8000b12:	4603      	mov	r3, r0
 8000b14:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	2b12      	cmp	r3, #18
 8000b1a:	d101      	bne.n	8000b20 <LoRa_init+0x136>
				return LORA_OK;
 8000b1c:	23c8      	movs	r3, #200	; 0xc8
 8000b1e:	e004      	b.n	8000b2a <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000b20:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000b24:	e001      	b.n	8000b2a <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000b26:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <newLoRa_i>:
 *
 *  Created on: Nov 1, 2024
 *      Author: subhr
 */
#include "LoRa_i.h"
LoRa_i newLoRa_i(){
 8000b32:	b4b0      	push	{r4, r5, r7}
 8000b34:	b08f      	sub	sp, #60	; 0x3c
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	LoRa_i new_LoRa;

	new_LoRa.frequency             = 915       ;
 8000b3a:	f240 3393 	movw	r3, #915	; 0x393
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_12      ;
 8000b40:	230c      	movs	r3, #12
 8000b42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000b46:	2307      	movs	r3, #7
 8000b48:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000b52:	23ff      	movs	r3, #255	; 0xff
 8000b54:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000b58:	2364      	movs	r3, #100	; 0x64
 8000b5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000b5e:	2308      	movs	r3, #8
 8000b60:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	461d      	mov	r5, r3
 8000b66:	f107 040c 	add.w	r4, r7, #12
 8000b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b72:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b76:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	373c      	adds	r7, #60	; 0x3c
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bcb0      	pop	{r4, r5, r7}
 8000b82:	4770      	bx	lr

08000b84 <LoRa_gotoMode_i>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode_i(LoRa_i* _LoRa, int mode){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read_i(_LoRa, RegOpMode);
 8000b8e:	2101      	movs	r1, #1
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f9a0 	bl	8000ed6 <LoRa_read_i>
 8000b96:	4603      	mov	r3, r0
 8000b98:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000b9a:	7bbb      	ldrb	r3, [r7, #14]
 8000b9c:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d107      	bne.n	8000bb4 <LoRa_gotoMode_i+0x30>
		data = (read & 0xF8) | 0x00;
 8000ba4:	7bbb      	ldrb	r3, [r7, #14]
 8000ba6:	f023 0307 	bic.w	r3, r3, #7
 8000baa:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
 8000bb2:	e03e      	b.n	8000c32 <LoRa_gotoMode_i+0xae>
	}else if (mode == STNBY_MODE){
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d10c      	bne.n	8000bd4 <LoRa_gotoMode_i+0x50>
		data = (read & 0xF8) | 0x01;
 8000bba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bbe:	f023 0307 	bic.w	r3, r3, #7
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	b25b      	sxtb	r3, r3
 8000bca:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	61da      	str	r2, [r3, #28]
 8000bd2:	e02e      	b.n	8000c32 <LoRa_gotoMode_i+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d10c      	bne.n	8000bf4 <LoRa_gotoMode_i+0x70>
		data = (read & 0xF8) | 0x03;
 8000bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bde:	f023 0307 	bic.w	r3, r3, #7
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	f043 0303 	orr.w	r3, r3, #3
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2203      	movs	r2, #3
 8000bf0:	61da      	str	r2, [r3, #28]
 8000bf2:	e01e      	b.n	8000c32 <LoRa_gotoMode_i+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b05      	cmp	r3, #5
 8000bf8:	d10c      	bne.n	8000c14 <LoRa_gotoMode_i+0x90>
		data = (read & 0xF8) | 0x05;
 8000bfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bfe:	f023 0307 	bic.w	r3, r3, #7
 8000c02:	b25b      	sxtb	r3, r3
 8000c04:	f043 0305 	orr.w	r3, r3, #5
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2205      	movs	r2, #5
 8000c10:	61da      	str	r2, [r3, #28]
 8000c12:	e00e      	b.n	8000c32 <LoRa_gotoMode_i+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d10b      	bne.n	8000c32 <LoRa_gotoMode_i+0xae>
		data = (read & 0xF8) | 0x06;
 8000c1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c1e:	f023 0307 	bic.w	r3, r3, #7
 8000c22:	b25b      	sxtb	r3, r3
 8000c24:	f043 0306 	orr.w	r3, r3, #6
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2206      	movs	r2, #6
 8000c30:	61da      	str	r2, [r3, #28]
	}

	LoRa_write_i(_LoRa, RegOpMode, data);
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	461a      	mov	r2, r3
 8000c36:	2101      	movs	r1, #1
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 f966 	bl	8000f0a <LoRa_write_i>
	//HAL_Delay(10);
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <LoRa_read_iReg_i>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_read_iReg_i(LoRa_i* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4613      	mov	r3, r2
 8000c54:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	6818      	ldr	r0, [r3, #0]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	889b      	ldrh	r3, [r3, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4619      	mov	r1, r3
 8000c62:	f002 fbeb 	bl	800343c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6998      	ldr	r0, [r3, #24]
 8000c6a:	88fa      	ldrh	r2, [r7, #6]
 8000c6c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	f003 f9a0 	bl	8003fb6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000c76:	bf00      	nop
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 fe87 	bl	8004990 <HAL_SPI_GetState>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d1f7      	bne.n	8000c78 <LoRa_read_iReg_i+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6998      	ldr	r0, [r3, #24]
 8000c8c:	8b3a      	ldrh	r2, [r7, #24]
 8000c8e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c92:	6839      	ldr	r1, [r7, #0]
 8000c94:	f003 facb 	bl	800422e <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000c98:	bf00      	nop
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 fe76 	bl	8004990 <HAL_SPI_GetState>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d1f7      	bne.n	8000c9a <LoRa_read_iReg_i+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	6818      	ldr	r0, [r3, #0]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	889b      	ldrh	r3, [r3, #4]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f002 fbc1 	bl	800343c <HAL_GPIO_WritePin>
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <LoRa_write_iReg_i>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write_iReg_i(LoRa_i* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	60f8      	str	r0, [r7, #12]
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	889b      	ldrh	r3, [r3, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f002 fbad 	bl	800343c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6998      	ldr	r0, [r3, #24]
 8000ce6:	88fa      	ldrh	r2, [r7, #6]
 8000ce8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	f003 f962 	bl	8003fb6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000cf2:	bf00      	nop
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fe49 	bl	8004990 <HAL_SPI_GetState>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d1f7      	bne.n	8000cf4 <LoRa_write_iReg_i+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	6998      	ldr	r0, [r3, #24]
 8000d08:	8b3a      	ldrh	r2, [r7, #24]
 8000d0a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d0e:	6839      	ldr	r1, [r7, #0]
 8000d10:	f003 f951 	bl	8003fb6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d14:	bf00      	nop
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 fe38 	bl	8004990 <HAL_SPI_GetState>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d1f7      	bne.n	8000d16 <LoRa_write_iReg_i+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	889b      	ldrh	r3, [r3, #4]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4619      	mov	r1, r3
 8000d32:	f002 fb83 	bl	800343c <HAL_GPIO_WritePin>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <LoRa_setFrequency_i>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency_i(LoRa_i* _LoRa, int freq){
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b084      	sub	sp, #16
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	04db      	lsls	r3, r3, #19
 8000d4c:	115b      	asrs	r3, r3, #5
 8000d4e:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	0c1b      	lsrs	r3, r3, #16
 8000d54:	72fb      	strb	r3, [r7, #11]
	LoRa_write_i(_LoRa, RegFrMsb, data);
 8000d56:	7afb      	ldrb	r3, [r7, #11]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2106      	movs	r1, #6
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f8d4 	bl	8000f0a <LoRa_write_i>
	HAL_Delay(5);
 8000d62:	2005      	movs	r0, #5
 8000d64:	f002 f826 	bl	8002db4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	72fb      	strb	r3, [r7, #11]
	LoRa_write_i(_LoRa, RegFrMid, data);
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	461a      	mov	r2, r3
 8000d72:	2107      	movs	r1, #7
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f000 f8c8 	bl	8000f0a <LoRa_write_i>
	HAL_Delay(5);
 8000d7a:	2005      	movs	r0, #5
 8000d7c:	f002 f81a 	bl	8002db4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	72fb      	strb	r3, [r7, #11]
	LoRa_write_i(_LoRa, RegFrLsb, data);
 8000d84:	7afb      	ldrb	r3, [r7, #11]
 8000d86:	461a      	mov	r2, r3
 8000d88:	2108      	movs	r1, #8
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f8bd 	bl	8000f0a <LoRa_write_i>
	HAL_Delay(5);
 8000d90:	2005      	movs	r0, #5
 8000d92:	f002 f80f 	bl	8002db4 <HAL_Delay>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <LoRa_setSpreadingFactor_i>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor_i(LoRa_i* _LoRa, int SF){
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b084      	sub	sp, #16
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2b0c      	cmp	r3, #12
 8000dac:	dd01      	ble.n	8000db2 <LoRa_setSpreadingFactor_i+0x14>
		SF = 12;
 8000dae:	230c      	movs	r3, #12
 8000db0:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	2b06      	cmp	r3, #6
 8000db6:	dc01      	bgt.n	8000dbc <LoRa_setSpreadingFactor_i+0x1e>
		SF = 7;
 8000db8:	2307      	movs	r3, #7
 8000dba:	603b      	str	r3, [r7, #0]

	read = LoRa_read_i(_LoRa, RegModemConfig2);
 8000dbc:	211e      	movs	r1, #30
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 f889 	bl	8000ed6 <LoRa_read_i>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000dc8:	200a      	movs	r0, #10
 8000dca:	f001 fff3 	bl	8002db4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	f003 030f 	and.w	r3, r3, #15
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4413      	add	r3, r2
 8000de0:	73bb      	strb	r3, [r7, #14]
	LoRa_write_i(_LoRa, RegModemConfig2, data);
 8000de2:	7bbb      	ldrb	r3, [r7, #14]
 8000de4:	461a      	mov	r2, r3
 8000de6:	211e      	movs	r1, #30
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 f88e 	bl	8000f0a <LoRa_write_i>
	HAL_Delay(10);
 8000dee:	200a      	movs	r0, #10
 8000df0:	f001 ffe0 	bl	8002db4 <HAL_Delay>
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <LoRa_setPower_i>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower_i(LoRa_i* _LoRa, uint8_t power){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]
	LoRa_write_i(_LoRa, RegPaConfig, power);
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	2109      	movs	r1, #9
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 f87b 	bl	8000f0a <LoRa_write_i>
	HAL_Delay(10);
 8000e14:	200a      	movs	r0, #10
 8000e16:	f001 ffcd 	bl	8002db4 <HAL_Delay>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <LoRa_setOCP_i>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP_i(LoRa_i* _LoRa, uint8_t current){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	2b2c      	cmp	r3, #44	; 0x2c
 8000e38:	d801      	bhi.n	8000e3e <LoRa_setOCP_i+0x1a>
		current = 45;
 8000e3a:	232d      	movs	r3, #45	; 0x2d
 8000e3c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000e3e:	78fb      	ldrb	r3, [r7, #3]
 8000e40:	2bf0      	cmp	r3, #240	; 0xf0
 8000e42:	d901      	bls.n	8000e48 <LoRa_setOCP_i+0x24>
		current = 240;
 8000e44:	23f0      	movs	r3, #240	; 0xf0
 8000e46:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	2b78      	cmp	r3, #120	; 0x78
 8000e4c:	d809      	bhi.n	8000e62 <LoRa_setOCP_i+0x3e>
		OcpTrim = (current - 45)/5;
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	3b2d      	subs	r3, #45	; 0x2d
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <LoRa_setOCP_i+0x78>)
 8000e54:	fb82 1203 	smull	r1, r2, r2, r3
 8000e58:	1052      	asrs	r2, r2, #1
 8000e5a:	17db      	asrs	r3, r3, #31
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e00b      	b.n	8000e7a <LoRa_setOCP_i+0x56>
	else if(current <= 240)
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	2bf0      	cmp	r3, #240	; 0xf0
 8000e66:	d808      	bhi.n	8000e7a <LoRa_setOCP_i+0x56>
		OcpTrim = (current + 30)/10;
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	331e      	adds	r3, #30
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <LoRa_setOCP_i+0x78>)
 8000e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e72:	1092      	asrs	r2, r2, #2
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	3320      	adds	r3, #32
 8000e7e:	73fb      	strb	r3, [r7, #15]
	LoRa_write_i(_LoRa, RegOcp, OcpTrim);
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	461a      	mov	r2, r3
 8000e84:	210b      	movs	r1, #11
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 f83f 	bl	8000f0a <LoRa_write_i>
	HAL_Delay(10);
 8000e8c:	200a      	movs	r0, #10
 8000e8e:	f001 ff91 	bl	8002db4 <HAL_Delay>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	66666667 	.word	0x66666667

08000ea0 <LoRa_setTOMsb_setCRCon_i>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon_i(LoRa_i* _LoRa){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read_i(_LoRa, RegModemConfig2);
 8000ea8:	211e      	movs	r1, #30
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f813 	bl	8000ed6 <LoRa_read_i>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	f043 0307 	orr.w	r3, r3, #7
 8000eba:	73bb      	strb	r3, [r7, #14]
	LoRa_write_i(_LoRa, RegModemConfig2, data);\
 8000ebc:	7bbb      	ldrb	r3, [r7, #14]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	211e      	movs	r1, #30
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 f821 	bl	8000f0a <LoRa_write_i>
	HAL_Delay(10);
 8000ec8:	200a      	movs	r0, #10
 8000eca:	f001 ff73 	bl	8002db4 <HAL_Delay>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <LoRa_read_i>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read_i(LoRa_i* _LoRa, uint8_t address){
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af02      	add	r7, sp, #8
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	73bb      	strb	r3, [r7, #14]
	LoRa_read_iReg_i(_LoRa, &data_addr, 1, &read_data, 1);
 8000eec:	f107 030f 	add.w	r3, r7, #15
 8000ef0:	f107 010e 	add.w	r1, r7, #14
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	9200      	str	r2, [sp, #0]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fea3 	bl	8000c46 <LoRa_read_iReg_i>
	//HAL_Delay(5);

	return read_data;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <LoRa_write_i>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write_i(LoRa_i* _LoRa, uint8_t address, uint8_t value){
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af02      	add	r7, sp, #8
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	70fb      	strb	r3, [r7, #3]
 8000f16:	4613      	mov	r3, r2
 8000f18:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000f24:	78bb      	ldrb	r3, [r7, #2]
 8000f26:	73fb      	strb	r3, [r7, #15]
	LoRa_write_iReg_i(_LoRa, &addr, 1, &data, 1);
 8000f28:	f107 030f 	add.w	r3, r7, #15
 8000f2c:	f107 010e 	add.w	r1, r7, #14
 8000f30:	2201      	movs	r2, #1
 8000f32:	9200      	str	r2, [sp, #0]
 8000f34:	2201      	movs	r2, #1
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fec3 	bl	8000cc2 <LoRa_write_iReg_i>
	//HAL_Delay(5);
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <LoRa_isvalid_i>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid_i(LoRa_i* _LoRa){
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

	return 1;
 8000f4c:	2301      	movs	r3, #1
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <LoRa_startReceiving_i>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving_i(LoRa_i* _LoRa){
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode_i(_LoRa, RXCONTIN_MODE);
 8000f62:	2105      	movs	r1, #5
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fe0d 	bl	8000b84 <LoRa_gotoMode_i>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <LoRa_receive_i>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive_i(LoRa_i* _LoRa, uint8_t* data, uint8_t length){
 8000f72:	b590      	push	{r4, r7, lr}
 8000f74:	b089      	sub	sp, #36	; 0x24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	e007      	b.n	8000f9a <LoRa_receive_i+0x28>
		data[i]=0;
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	4413      	add	r3, r2
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	3301      	adds	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dbf3      	blt.n	8000f8a <LoRa_receive_i+0x18>

	LoRa_gotoMode_i(_LoRa, STNBY_MODE);
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff fded 	bl	8000b84 <LoRa_gotoMode_i>
	read = LoRa_read_i(_LoRa, RegIrqFlags);
 8000faa:	2112      	movs	r1, #18
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f7ff ff92 	bl	8000ed6 <LoRa_read_i>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000fb6:	7cfb      	ldrb	r3, [r7, #19]
 8000fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d02f      	beq.n	8001020 <LoRa_receive_i+0xae>
		LoRa_write_i(_LoRa, RegIrqFlags, 0xFF);
 8000fc0:	22ff      	movs	r2, #255	; 0xff
 8000fc2:	2112      	movs	r1, #18
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f7ff ffa0 	bl	8000f0a <LoRa_write_i>
		number_of_bytes = LoRa_read_i(_LoRa, RegRxNbBytes);
 8000fca:	2113      	movs	r1, #19
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff ff82 	bl	8000ed6 <LoRa_read_i>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read_i(_LoRa, RegFiFoRxCurrentAddr);
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff ff7c 	bl	8000ed6 <LoRa_read_i>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	74fb      	strb	r3, [r7, #19]
		LoRa_write_i(_LoRa, RegFiFoAddPtr, read);
 8000fe2:	7cfb      	ldrb	r3, [r7, #19]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	210d      	movs	r1, #13
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f7ff ff8e 	bl	8000f0a <LoRa_write_i>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000fee:	7cba      	ldrb	r2, [r7, #18]
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	bf28      	it	cs
 8000ff6:	4613      	movcs	r3, r2
 8000ff8:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	e00b      	b.n	8001018 <LoRa_receive_i+0xa6>
			data[i] = LoRa_read_i(_LoRa, RegFiFo);
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	18d4      	adds	r4, r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f7ff ff64 	bl	8000ed6 <LoRa_read_i>
 800100e:	4603      	mov	r3, r0
 8001010:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	7ffb      	ldrb	r3, [r7, #31]
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbef      	blt.n	8001000 <LoRa_receive_i+0x8e>
	}
	LoRa_gotoMode_i(_LoRa, RXCONTIN_MODE);
 8001020:	2105      	movs	r1, #5
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff fdae 	bl	8000b84 <LoRa_gotoMode_i>
    return min;
 8001028:	7ffb      	ldrb	r3, [r7, #31]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}

08001032 <LoRa_init_i>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init_i(LoRa_i* _LoRa){
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid_i(_LoRa)){
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff82 	bl	8000f44 <LoRa_isvalid_i>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8093 	beq.w	800116e <LoRa_init_i+0x13c>
		// goto sleep mode:
			LoRa_gotoMode_i(_LoRa, SLEEP_MODE);
 8001048:	2100      	movs	r1, #0
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fd9a 	bl	8000b84 <LoRa_gotoMode_i>
			HAL_Delay(10);
 8001050:	200a      	movs	r0, #10
 8001052:	f001 feaf 	bl	8002db4 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read_i(_LoRa, RegOpMode);
 8001056:	2101      	movs	r1, #1
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff3c 	bl	8000ed6 <LoRa_read_i>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001062:	200a      	movs	r0, #10
 8001064:	f001 fea6 	bl	8002db4 <HAL_Delay>
			data = read | 0x80;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800106e:	73bb      	strb	r3, [r7, #14]
			LoRa_write_i(_LoRa, RegOpMode, data);
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	461a      	mov	r2, r3
 8001074:	2101      	movs	r1, #1
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ff47 	bl	8000f0a <LoRa_write_i>
			HAL_Delay(100);
 800107c:	2064      	movs	r0, #100	; 0x64
 800107e:	f001 fe99 	bl	8002db4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency_i(_LoRa, _LoRa->frequency);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4619      	mov	r1, r3
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff fe58 	bl	8000d3e <LoRa_setFrequency_i>

		// set output power gain:
			LoRa_setPower_i(_LoRa, _LoRa->power);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001094:	4619      	mov	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff feb0 	bl	8000dfc <LoRa_setPower_i>

		// set over current protection:
			LoRa_setOCP_i(_LoRa, _LoRa->overCurrentProtection);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80010a2:	4619      	mov	r1, r3
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff febd 	bl	8000e24 <LoRa_setOCP_i>

		// set LNA gain:
			LoRa_write_i(_LoRa, RegLna, 0x23);
 80010aa:	2223      	movs	r2, #35	; 0x23
 80010ac:	210c      	movs	r1, #12
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff2b 	bl	8000f0a <LoRa_write_i>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon_i(_LoRa);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fef3 	bl	8000ea0 <LoRa_setTOMsb_setCRCon_i>
			LoRa_setSpreadingFactor_i(_LoRa, _LoRa->spredingFactor);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fe6b 	bl	8000d9e <LoRa_setSpreadingFactor_i>

		// set Timeout Lsb:
			LoRa_write_i(_LoRa, RegSymbTimeoutL, 0xFF);
 80010c8:	22ff      	movs	r2, #255	; 0xff
 80010ca:	211f      	movs	r1, #31
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff1c 	bl	8000f0a <LoRa_write_i>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4413      	add	r3, r2
 80010ec:	73bb      	strb	r3, [r7, #14]
			LoRa_write_i(_LoRa, RegModemConfig1, data);
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	461a      	mov	r2, r3
 80010f2:	211d      	movs	r1, #29
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff08 	bl	8000f0a <LoRa_write_i>

		// set preamble:
			LoRa_write_i(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	b29b      	uxth	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	2120      	movs	r1, #32
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff fefe 	bl	8000f0a <LoRa_write_i>
			LoRa_write_i(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001112:	b2db      	uxtb	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	2121      	movs	r1, #33	; 0x21
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff fef6 	bl	8000f0a <LoRa_write_i>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read_i(_LoRa, RegDioMapping1);
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff fed8 	bl	8000ed6 <LoRa_read_i>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001130:	73bb      	strb	r3, [r7, #14]
			LoRa_write_i(_LoRa, RegDioMapping1, data);
 8001132:	7bbb      	ldrb	r3, [r7, #14]
 8001134:	461a      	mov	r2, r3
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff fee6 	bl	8000f0a <LoRa_write_i>

		// goto standby mode:
			LoRa_gotoMode_i(_LoRa, STNBY_MODE);
 800113e:	2101      	movs	r1, #1
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fd1f 	bl	8000b84 <LoRa_gotoMode_i>
			_LoRa->current_mode = STNBY_MODE;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800114c:	200a      	movs	r0, #10
 800114e:	f001 fe31 	bl	8002db4 <HAL_Delay>

			read = LoRa_read_i(_LoRa, RegVersion);
 8001152:	2142      	movs	r1, #66	; 0x42
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff febe 	bl	8000ed6 <LoRa_read_i>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b12      	cmp	r3, #18
 8001162:	d101      	bne.n	8001168 <LoRa_init_i+0x136>
				return LORA_OK;
 8001164:	23c8      	movs	r3, #200	; 0xc8
 8001166:	e004      	b.n	8001172 <LoRa_init_i+0x140>
			else
				return LORA_NOT_FOUND;
 8001168:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800116c:	e001      	b.n	8001172 <LoRa_init_i+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 800116e:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <newLoRa_ii>:
 *      Author: subhr
 */


#include "LoRa_ii.h"
LoRa_ii newLoRa_ii(){
 800117a:	b4b0      	push	{r4, r5, r7}
 800117c:	b08f      	sub	sp, #60	; 0x3c
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
	LoRa_ii new_LoRa;

	new_LoRa.frequency             = 915       ;
 8001182:	f240 3393 	movw	r3, #915	; 0x393
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_12      ;
 8001188:	230c      	movs	r3, #12
 800118a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 800118e:	2307      	movs	r3, #7
 8001190:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8001194:	2301      	movs	r3, #1
 8001196:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 800119a:	23ff      	movs	r3, #255	; 0xff
 800119c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80011a0:	2364      	movs	r3, #100	; 0x64
 80011a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80011a6:	2308      	movs	r3, #8
 80011a8:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	461d      	mov	r5, r3
 80011ae:	f107 040c 	add.w	r4, r7, #12
 80011b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	373c      	adds	r7, #60	; 0x3c
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bcb0      	pop	{r4, r5, r7}
 80011ca:	4770      	bx	lr

080011cc <LoRa_gotoMode_ii>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode_ii(LoRa_ii* _LoRa, int mode){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read_ii(_LoRa, RegOpMode);
 80011d6:	2101      	movs	r1, #1
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f9a0 	bl	800151e <LoRa_read_ii>
 80011de:	4603      	mov	r3, r0
 80011e0:	73bb      	strb	r3, [r7, #14]
	data = read;
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d107      	bne.n	80011fc <LoRa_gotoMode_ii+0x30>
		data = (read & 0xF8) | 0x00;
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	f023 0307 	bic.w	r3, r3, #7
 80011f2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
 80011fa:	e03e      	b.n	800127a <LoRa_gotoMode_ii+0xae>
	}else if (mode == STNBY_MODE){
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d10c      	bne.n	800121c <LoRa_gotoMode_ii+0x50>
		data = (read & 0xF8) | 0x01;
 8001202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001206:	f023 0307 	bic.w	r3, r3, #7
 800120a:	b25b      	sxtb	r3, r3
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	b25b      	sxtb	r3, r3
 8001212:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	61da      	str	r2, [r3, #28]
 800121a:	e02e      	b.n	800127a <LoRa_gotoMode_ii+0xae>
	}else if (mode == TRANSMIT_MODE){
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b03      	cmp	r3, #3
 8001220:	d10c      	bne.n	800123c <LoRa_gotoMode_ii+0x70>
		data = (read & 0xF8) | 0x03;
 8001222:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001226:	f023 0307 	bic.w	r3, r3, #7
 800122a:	b25b      	sxtb	r3, r3
 800122c:	f043 0303 	orr.w	r3, r3, #3
 8001230:	b25b      	sxtb	r3, r3
 8001232:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2203      	movs	r2, #3
 8001238:	61da      	str	r2, [r3, #28]
 800123a:	e01e      	b.n	800127a <LoRa_gotoMode_ii+0xae>
	}else if (mode == RXCONTIN_MODE){
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2b05      	cmp	r3, #5
 8001240:	d10c      	bne.n	800125c <LoRa_gotoMode_ii+0x90>
		data = (read & 0xF8) | 0x05;
 8001242:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001246:	f023 0307 	bic.w	r3, r3, #7
 800124a:	b25b      	sxtb	r3, r3
 800124c:	f043 0305 	orr.w	r3, r3, #5
 8001250:	b25b      	sxtb	r3, r3
 8001252:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2205      	movs	r2, #5
 8001258:	61da      	str	r2, [r3, #28]
 800125a:	e00e      	b.n	800127a <LoRa_gotoMode_ii+0xae>
	}else if (mode == RXSINGLE_MODE){
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b06      	cmp	r3, #6
 8001260:	d10b      	bne.n	800127a <LoRa_gotoMode_ii+0xae>
		data = (read & 0xF8) | 0x06;
 8001262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001266:	f023 0307 	bic.w	r3, r3, #7
 800126a:	b25b      	sxtb	r3, r3
 800126c:	f043 0306 	orr.w	r3, r3, #6
 8001270:	b25b      	sxtb	r3, r3
 8001272:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2206      	movs	r2, #6
 8001278:	61da      	str	r2, [r3, #28]
	}

	LoRa_write_ii(_LoRa, RegOpMode, data);
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	461a      	mov	r2, r3
 800127e:	2101      	movs	r1, #1
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f966 	bl	8001552 <LoRa_write_ii>
	//HAL_Delay(10);
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <LoRa_read_iiReg_ii>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_read_iiReg_ii(LoRa_ii* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	4613      	mov	r3, r2
 800129c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	889b      	ldrh	r3, [r3, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	f002 f8c7 	bl	800343c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6998      	ldr	r0, [r3, #24]
 80012b2:	88fa      	ldrh	r2, [r7, #6]
 80012b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	f002 fe7c 	bl	8003fb6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012be:	bf00      	nop
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 fb63 	bl	8004990 <HAL_SPI_GetState>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d1f7      	bne.n	80012c0 <LoRa_read_iiReg_ii+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6998      	ldr	r0, [r3, #24]
 80012d4:	8b3a      	ldrh	r2, [r7, #24]
 80012d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	f002 ffa7 	bl	800422e <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012e0:	bf00      	nop
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 fb52 	bl	8004990 <HAL_SPI_GetState>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d1f7      	bne.n	80012e2 <LoRa_read_iiReg_ii+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	889b      	ldrh	r3, [r3, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	4619      	mov	r1, r3
 80012fe:	f002 f89d 	bl	800343c <HAL_GPIO_WritePin>
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <LoRa_write_iiReg_ii>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write_iiReg_ii(LoRa_ii* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800130a:	b580      	push	{r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4613      	mov	r3, r2
 8001318:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	889b      	ldrh	r3, [r3, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	f002 f889 	bl	800343c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6998      	ldr	r0, [r3, #24]
 800132e:	88fa      	ldrh	r2, [r7, #6]
 8001330:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	f002 fe3e 	bl	8003fb6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800133a:	bf00      	nop
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4618      	mov	r0, r3
 8001342:	f003 fb25 	bl	8004990 <HAL_SPI_GetState>
 8001346:	4603      	mov	r3, r0
 8001348:	2b01      	cmp	r3, #1
 800134a:	d1f7      	bne.n	800133c <LoRa_write_iiReg_ii+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6998      	ldr	r0, [r3, #24]
 8001350:	8b3a      	ldrh	r2, [r7, #24]
 8001352:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001356:	6839      	ldr	r1, [r7, #0]
 8001358:	f002 fe2d 	bl	8003fb6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800135c:	bf00      	nop
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4618      	mov	r0, r3
 8001364:	f003 fb14 	bl	8004990 <HAL_SPI_GetState>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d1f7      	bne.n	800135e <LoRa_write_iiReg_ii+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	889b      	ldrh	r3, [r3, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	4619      	mov	r1, r3
 800137a:	f002 f85f 	bl	800343c <HAL_GPIO_WritePin>
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <LoRa_setFrequency_ii>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency_ii(LoRa_ii* _LoRa, int freq){
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	04db      	lsls	r3, r3, #19
 8001394:	115b      	asrs	r3, r3, #5
 8001396:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	0c1b      	lsrs	r3, r3, #16
 800139c:	72fb      	strb	r3, [r7, #11]
	LoRa_write_ii(_LoRa, RegFrMsb, data);
 800139e:	7afb      	ldrb	r3, [r7, #11]
 80013a0:	461a      	mov	r2, r3
 80013a2:	2106      	movs	r1, #6
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f8d4 	bl	8001552 <LoRa_write_ii>
	HAL_Delay(5);
 80013aa:	2005      	movs	r0, #5
 80013ac:	f001 fd02 	bl	8002db4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	0a1b      	lsrs	r3, r3, #8
 80013b4:	72fb      	strb	r3, [r7, #11]
	LoRa_write_ii(_LoRa, RegFrMid, data);
 80013b6:	7afb      	ldrb	r3, [r7, #11]
 80013b8:	461a      	mov	r2, r3
 80013ba:	2107      	movs	r1, #7
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f8c8 	bl	8001552 <LoRa_write_ii>
	HAL_Delay(5);
 80013c2:	2005      	movs	r0, #5
 80013c4:	f001 fcf6 	bl	8002db4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	72fb      	strb	r3, [r7, #11]
	LoRa_write_ii(_LoRa, RegFrLsb, data);
 80013cc:	7afb      	ldrb	r3, [r7, #11]
 80013ce:	461a      	mov	r2, r3
 80013d0:	2108      	movs	r1, #8
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f8bd 	bl	8001552 <LoRa_write_ii>
	HAL_Delay(5);
 80013d8:	2005      	movs	r0, #5
 80013da:	f001 fceb 	bl	8002db4 <HAL_Delay>
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <LoRa_setSpreadingFactor_ii>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor_ii(LoRa_ii* _LoRa, int SF){
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	dd01      	ble.n	80013fa <LoRa_setSpreadingFactor_ii+0x14>
		SF = 12;
 80013f6:	230c      	movs	r3, #12
 80013f8:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2b06      	cmp	r3, #6
 80013fe:	dc01      	bgt.n	8001404 <LoRa_setSpreadingFactor_ii+0x1e>
		SF = 7;
 8001400:	2307      	movs	r3, #7
 8001402:	603b      	str	r3, [r7, #0]

	read = LoRa_read_ii(_LoRa, RegModemConfig2);
 8001404:	211e      	movs	r1, #30
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f889 	bl	800151e <LoRa_read_ii>
 800140c:	4603      	mov	r3, r0
 800140e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001410:	200a      	movs	r0, #10
 8001412:	f001 fccf 	bl	8002db4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	b2da      	uxtb	r2, r3
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	73bb      	strb	r3, [r7, #14]
	LoRa_write_ii(_LoRa, RegModemConfig2, data);
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	461a      	mov	r2, r3
 800142e:	211e      	movs	r1, #30
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f88e 	bl	8001552 <LoRa_write_ii>
	HAL_Delay(10);
 8001436:	200a      	movs	r0, #10
 8001438:	f001 fcbc 	bl	8002db4 <HAL_Delay>
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <LoRa_setPower_ii>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower_ii(LoRa_ii* _LoRa, uint8_t power){
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
	LoRa_write_ii(_LoRa, RegPaConfig, power);
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	461a      	mov	r2, r3
 8001454:	2109      	movs	r1, #9
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f87b 	bl	8001552 <LoRa_write_ii>
	HAL_Delay(10);
 800145c:	200a      	movs	r0, #10
 800145e:	f001 fca9 	bl	8002db4 <HAL_Delay>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <LoRa_setOCP_ii>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP_ii(LoRa_ii* _LoRa, uint8_t current){
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	2b2c      	cmp	r3, #44	; 0x2c
 8001480:	d801      	bhi.n	8001486 <LoRa_setOCP_ii+0x1a>
		current = 45;
 8001482:	232d      	movs	r3, #45	; 0x2d
 8001484:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	2bf0      	cmp	r3, #240	; 0xf0
 800148a:	d901      	bls.n	8001490 <LoRa_setOCP_ii+0x24>
		current = 240;
 800148c:	23f0      	movs	r3, #240	; 0xf0
 800148e:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	2b78      	cmp	r3, #120	; 0x78
 8001494:	d809      	bhi.n	80014aa <LoRa_setOCP_ii+0x3e>
		OcpTrim = (current - 45)/5;
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	3b2d      	subs	r3, #45	; 0x2d
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <LoRa_setOCP_ii+0x78>)
 800149c:	fb82 1203 	smull	r1, r2, r2, r3
 80014a0:	1052      	asrs	r2, r2, #1
 80014a2:	17db      	asrs	r3, r3, #31
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e00b      	b.n	80014c2 <LoRa_setOCP_ii+0x56>
	else if(current <= 240)
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	2bf0      	cmp	r3, #240	; 0xf0
 80014ae:	d808      	bhi.n	80014c2 <LoRa_setOCP_ii+0x56>
		OcpTrim = (current + 30)/10;
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	331e      	adds	r3, #30
 80014b4:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <LoRa_setOCP_ii+0x78>)
 80014b6:	fb82 1203 	smull	r1, r2, r2, r3
 80014ba:	1092      	asrs	r2, r2, #2
 80014bc:	17db      	asrs	r3, r3, #31
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	3320      	adds	r3, #32
 80014c6:	73fb      	strb	r3, [r7, #15]
	LoRa_write_ii(_LoRa, RegOcp, OcpTrim);
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	461a      	mov	r2, r3
 80014cc:	210b      	movs	r1, #11
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f83f 	bl	8001552 <LoRa_write_ii>
	HAL_Delay(10);
 80014d4:	200a      	movs	r0, #10
 80014d6:	f001 fc6d 	bl	8002db4 <HAL_Delay>
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	66666667 	.word	0x66666667

080014e8 <LoRa_setTOMsb_setCRCon_ii>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon_ii(LoRa_ii* _LoRa){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read_ii(_LoRa, RegModemConfig2);
 80014f0:	211e      	movs	r1, #30
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f813 	bl	800151e <LoRa_read_ii>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	f043 0307 	orr.w	r3, r3, #7
 8001502:	73bb      	strb	r3, [r7, #14]
	LoRa_write_ii(_LoRa, RegModemConfig2, data);
 8001504:	7bbb      	ldrb	r3, [r7, #14]
 8001506:	461a      	mov	r2, r3
 8001508:	211e      	movs	r1, #30
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f821 	bl	8001552 <LoRa_write_ii>
	HAL_Delay(10);
 8001510:	200a      	movs	r0, #10
 8001512:	f001 fc4f 	bl	8002db4 <HAL_Delay>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <LoRa_read_ii>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read_ii(LoRa_ii* _LoRa, uint8_t address){
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af02      	add	r7, sp, #8
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001530:	b2db      	uxtb	r3, r3
 8001532:	73bb      	strb	r3, [r7, #14]
	LoRa_read_iiReg_ii(_LoRa, &data_addr, 1, &read_data, 1);
 8001534:	f107 030f 	add.w	r3, r7, #15
 8001538:	f107 010e 	add.w	r1, r7, #14
 800153c:	2201      	movs	r2, #1
 800153e:	9200      	str	r2, [sp, #0]
 8001540:	2201      	movs	r2, #1
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fea3 	bl	800128e <LoRa_read_iiReg_ii>
	//HAL_Delay(5);

	return read_data;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <LoRa_write_ii>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write_ii(LoRa_ii* _LoRa, uint8_t address, uint8_t value){
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af02      	add	r7, sp, #8
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	460b      	mov	r3, r1
 800155c:	70fb      	strb	r3, [r7, #3]
 800155e:	4613      	mov	r3, r2
 8001560:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001568:	b2db      	uxtb	r3, r3
 800156a:	73bb      	strb	r3, [r7, #14]
	data = value;
 800156c:	78bb      	ldrb	r3, [r7, #2]
 800156e:	73fb      	strb	r3, [r7, #15]
	LoRa_write_iiReg_ii(_LoRa, &addr, 1, &data, 1);
 8001570:	f107 030f 	add.w	r3, r7, #15
 8001574:	f107 010e 	add.w	r1, r7, #14
 8001578:	2201      	movs	r2, #1
 800157a:	9200      	str	r2, [sp, #0]
 800157c:	2201      	movs	r2, #1
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fec3 	bl	800130a <LoRa_write_iiReg_ii>
	//HAL_Delay(5);
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <LoRa_isvalid_ii>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid_ii(LoRa_ii* _LoRa){
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

	return 1;
 8001594:	2301      	movs	r3, #1
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LoRa_startReceiving_ii>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving_ii(LoRa_ii* _LoRa){
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode_ii(_LoRa, RXCONTIN_MODE);
 80015aa:	2105      	movs	r1, #5
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fe0d 	bl	80011cc <LoRa_gotoMode_ii>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <LoRa_receive_ii>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive_ii(LoRa_ii* _LoRa, uint8_t* data, uint8_t length){
 80015ba:	b590      	push	{r4, r7, lr}
 80015bc:	b089      	sub	sp, #36	; 0x24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	4613      	mov	r3, r2
 80015c6:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	e007      	b.n	80015e2 <LoRa_receive_ii+0x28>
		data[i]=0;
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	4413      	add	r3, r2
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	3301      	adds	r3, #1
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dbf3      	blt.n	80015d2 <LoRa_receive_ii+0x18>

	LoRa_gotoMode_ii(_LoRa, STNBY_MODE);
 80015ea:	2101      	movs	r1, #1
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f7ff fded 	bl	80011cc <LoRa_gotoMode_ii>
	read = LoRa_read_ii(_LoRa, RegIrqFlags);
 80015f2:	2112      	movs	r1, #18
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f7ff ff92 	bl	800151e <LoRa_read_ii>
 80015fa:	4603      	mov	r3, r0
 80015fc:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80015fe:	7cfb      	ldrb	r3, [r7, #19]
 8001600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001604:	2b00      	cmp	r3, #0
 8001606:	d02f      	beq.n	8001668 <LoRa_receive_ii+0xae>
		LoRa_write_ii(_LoRa, RegIrqFlags, 0xFF);
 8001608:	22ff      	movs	r2, #255	; 0xff
 800160a:	2112      	movs	r1, #18
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff ffa0 	bl	8001552 <LoRa_write_ii>
		number_of_bytes = LoRa_read_ii(_LoRa, RegRxNbBytes);
 8001612:	2113      	movs	r1, #19
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff ff82 	bl	800151e <LoRa_read_ii>
 800161a:	4603      	mov	r3, r0
 800161c:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read_ii(_LoRa, RegFiFoRxCurrentAddr);
 800161e:	2110      	movs	r1, #16
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f7ff ff7c 	bl	800151e <LoRa_read_ii>
 8001626:	4603      	mov	r3, r0
 8001628:	74fb      	strb	r3, [r7, #19]
		LoRa_write_ii(_LoRa, RegFiFoAddPtr, read);
 800162a:	7cfb      	ldrb	r3, [r7, #19]
 800162c:	461a      	mov	r2, r3
 800162e:	210d      	movs	r1, #13
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f7ff ff8e 	bl	8001552 <LoRa_write_ii>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001636:	7cba      	ldrb	r2, [r7, #18]
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4293      	cmp	r3, r2
 800163c:	bf28      	it	cs
 800163e:	4613      	movcs	r3, r2
 8001640:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e00b      	b.n	8001660 <LoRa_receive_ii+0xa6>
			data[i] = LoRa_read_ii(_LoRa, RegFiFo);
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	18d4      	adds	r4, r2, r3
 800164e:	2100      	movs	r1, #0
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff ff64 	bl	800151e <LoRa_read_ii>
 8001656:	4603      	mov	r3, r0
 8001658:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	7ffb      	ldrb	r3, [r7, #31]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbef      	blt.n	8001648 <LoRa_receive_ii+0x8e>
	}
	LoRa_gotoMode_ii(_LoRa, RXCONTIN_MODE);
 8001668:	2105      	movs	r1, #5
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff fdae 	bl	80011cc <LoRa_gotoMode_ii>
    return min;
 8001670:	7ffb      	ldrb	r3, [r7, #31]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd90      	pop	{r4, r7, pc}

0800167a <LoRa_init_ii>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init_ii(LoRa_ii* _LoRa){
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid_ii(_LoRa)){
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ff82 	bl	800158c <LoRa_isvalid_ii>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 8093 	beq.w	80017b6 <LoRa_init_ii+0x13c>
		// goto sleep mode:
			LoRa_gotoMode_ii(_LoRa, SLEEP_MODE);
 8001690:	2100      	movs	r1, #0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fd9a 	bl	80011cc <LoRa_gotoMode_ii>
			HAL_Delay(10);
 8001698:	200a      	movs	r0, #10
 800169a:	f001 fb8b 	bl	8002db4 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read_ii(_LoRa, RegOpMode);
 800169e:	2101      	movs	r1, #1
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff3c 	bl	800151e <LoRa_read_ii>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80016aa:	200a      	movs	r0, #10
 80016ac:	f001 fb82 	bl	8002db4 <HAL_Delay>
			data = read | 0x80;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016b6:	73bb      	strb	r3, [r7, #14]
			LoRa_write_ii(_LoRa, RegOpMode, data);
 80016b8:	7bbb      	ldrb	r3, [r7, #14]
 80016ba:	461a      	mov	r2, r3
 80016bc:	2101      	movs	r1, #1
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff47 	bl	8001552 <LoRa_write_ii>
			HAL_Delay(100);
 80016c4:	2064      	movs	r0, #100	; 0x64
 80016c6:	f001 fb75 	bl	8002db4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency_ii(_LoRa, _LoRa->frequency);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4619      	mov	r1, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fe58 	bl	8001386 <LoRa_setFrequency_ii>

		// set output power gain:
			LoRa_setPower_ii(_LoRa, _LoRa->power);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80016dc:	4619      	mov	r1, r3
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff feb0 	bl	8001444 <LoRa_setPower_ii>

		// set over current protection:
			LoRa_setOCP_ii(_LoRa, _LoRa->overCurrentProtection);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80016ea:	4619      	mov	r1, r3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff febd 	bl	800146c <LoRa_setOCP_ii>

		// set LNA gain:
			LoRa_write_ii(_LoRa, RegLna, 0x23);
 80016f2:	2223      	movs	r2, #35	; 0x23
 80016f4:	210c      	movs	r1, #12
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ff2b 	bl	8001552 <LoRa_write_ii>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon_ii(_LoRa);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fef3 	bl	80014e8 <LoRa_setTOMsb_setCRCon_ii>
			LoRa_setSpreadingFactor_ii(_LoRa, _LoRa->spredingFactor);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001708:	4619      	mov	r1, r3
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fe6b 	bl	80013e6 <LoRa_setSpreadingFactor_ii>

		// set Timeout Lsb:
			LoRa_write_ii(_LoRa, RegSymbTimeoutL, 0xFF);
 8001710:	22ff      	movs	r2, #255	; 0xff
 8001712:	211f      	movs	r1, #31
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff1c 	bl	8001552 <LoRa_write_ii>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	b2da      	uxtb	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4413      	add	r3, r2
 8001734:	73bb      	strb	r3, [r7, #14]
			LoRa_write_ii(_LoRa, RegModemConfig1, data);
 8001736:	7bbb      	ldrb	r3, [r7, #14]
 8001738:	461a      	mov	r2, r3
 800173a:	211d      	movs	r1, #29
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff08 	bl	8001552 <LoRa_write_ii>

		// set preamble:
			LoRa_write_ii(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	b29b      	uxth	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	2120      	movs	r1, #32
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fefe 	bl	8001552 <LoRa_write_ii>
			LoRa_write_ii(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175a:	b2db      	uxtb	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	2121      	movs	r1, #33	; 0x21
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fef6 	bl	8001552 <LoRa_write_ii>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read_ii(_LoRa, RegDioMapping1);
 8001766:	2140      	movs	r1, #64	; 0x40
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fed8 	bl	800151e <LoRa_read_ii>
 800176e:	4603      	mov	r3, r0
 8001770:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001778:	73bb      	strb	r3, [r7, #14]
			LoRa_write_ii(_LoRa, RegDioMapping1, data);
 800177a:	7bbb      	ldrb	r3, [r7, #14]
 800177c:	461a      	mov	r2, r3
 800177e:	2140      	movs	r1, #64	; 0x40
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fee6 	bl	8001552 <LoRa_write_ii>

		// goto standby mode:
			LoRa_gotoMode_ii(_LoRa, STNBY_MODE);
 8001786:	2101      	movs	r1, #1
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fd1f 	bl	80011cc <LoRa_gotoMode_ii>
			_LoRa->current_mode = STNBY_MODE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001794:	200a      	movs	r0, #10
 8001796:	f001 fb0d 	bl	8002db4 <HAL_Delay>

			read = LoRa_read_ii(_LoRa, RegVersion);
 800179a:	2142      	movs	r1, #66	; 0x42
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff febe 	bl	800151e <LoRa_read_ii>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	2b12      	cmp	r3, #18
 80017aa:	d101      	bne.n	80017b0 <LoRa_init_ii+0x136>
				return LORA_OK;
 80017ac:	23c8      	movs	r3, #200	; 0xc8
 80017ae:	e004      	b.n	80017ba <LoRa_init_ii+0x140>
			else
				return LORA_NOT_FOUND;
 80017b0:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80017b4:	e001      	b.n	80017ba <LoRa_init_ii+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80017b6:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <newLoRa_iii>:
 *  Created on: Mar 2, 2025
 *      Author: subhr
 */

#include "LoRa_iii.h"
LoRa_iii newLoRa_iii(){
 80017c2:	b4b0      	push	{r4, r5, r7}
 80017c4:	b08f      	sub	sp, #60	; 0x3c
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	LoRa_iii new_LoRa;

	new_LoRa.frequency             = 915       ;
 80017ca:	f240 3393 	movw	r3, #915	; 0x393
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_12      ;
 80017d0:	230c      	movs	r3, #12
 80017d2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80017d6:	2307      	movs	r3, #7
 80017d8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80017dc:	2301      	movs	r3, #1
 80017de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80017e2:	23ff      	movs	r3, #255	; 0xff
 80017e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80017e8:	2364      	movs	r3, #100	; 0x64
 80017ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80017ee:	2308      	movs	r3, #8
 80017f0:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	461d      	mov	r5, r3
 80017f6:	f107 040c 	add.w	r4, r7, #12
 80017fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001802:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001806:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	373c      	adds	r7, #60	; 0x3c
 800180e:	46bd      	mov	sp, r7
 8001810:	bcb0      	pop	{r4, r5, r7}
 8001812:	4770      	bx	lr

08001814 <LoRa_gotoMode_iii>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode_iii(LoRa_iii* _LoRa, int mode){
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read_iii(_LoRa, RegOpMode);
 800181e:	2101      	movs	r1, #1
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f9a0 	bl	8001b66 <LoRa_read_iii>
 8001826:	4603      	mov	r3, r0
 8001828:	73bb      	strb	r3, [r7, #14]
	data = read;
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d107      	bne.n	8001844 <LoRa_gotoMode_iii+0x30>
		data = (read & 0xF8) | 0x00;
 8001834:	7bbb      	ldrb	r3, [r7, #14]
 8001836:	f023 0307 	bic.w	r3, r3, #7
 800183a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
 8001842:	e03e      	b.n	80018c2 <LoRa_gotoMode_iii+0xae>
	}else if (mode == STNBY_MODE){
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d10c      	bne.n	8001864 <LoRa_gotoMode_iii+0x50>
		data = (read & 0xF8) | 0x01;
 800184a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800184e:	f023 0307 	bic.w	r3, r3, #7
 8001852:	b25b      	sxtb	r3, r3
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	b25b      	sxtb	r3, r3
 800185a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	61da      	str	r2, [r3, #28]
 8001862:	e02e      	b.n	80018c2 <LoRa_gotoMode_iii+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d10c      	bne.n	8001884 <LoRa_gotoMode_iii+0x70>
		data = (read & 0xF8) | 0x03;
 800186a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800186e:	f023 0307 	bic.w	r3, r3, #7
 8001872:	b25b      	sxtb	r3, r3
 8001874:	f043 0303 	orr.w	r3, r3, #3
 8001878:	b25b      	sxtb	r3, r3
 800187a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2203      	movs	r2, #3
 8001880:	61da      	str	r2, [r3, #28]
 8001882:	e01e      	b.n	80018c2 <LoRa_gotoMode_iii+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2b05      	cmp	r3, #5
 8001888:	d10c      	bne.n	80018a4 <LoRa_gotoMode_iii+0x90>
		data = (read & 0xF8) | 0x05;
 800188a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800188e:	f023 0307 	bic.w	r3, r3, #7
 8001892:	b25b      	sxtb	r3, r3
 8001894:	f043 0305 	orr.w	r3, r3, #5
 8001898:	b25b      	sxtb	r3, r3
 800189a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2205      	movs	r2, #5
 80018a0:	61da      	str	r2, [r3, #28]
 80018a2:	e00e      	b.n	80018c2 <LoRa_gotoMode_iii+0xae>
	}else if (mode == RXSINGLE_MODE){
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d10b      	bne.n	80018c2 <LoRa_gotoMode_iii+0xae>
		data = (read & 0xF8) | 0x06;
 80018aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018ae:	f023 0307 	bic.w	r3, r3, #7
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	f043 0306 	orr.w	r3, r3, #6
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2206      	movs	r2, #6
 80018c0:	61da      	str	r2, [r3, #28]
	}

	LoRa_write_iii(_LoRa, RegOpMode, data);
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	461a      	mov	r2, r3
 80018c6:	2101      	movs	r1, #1
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f966 	bl	8001b9a <LoRa_write_iii>
	//HAL_Delay(10);
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <LoRa_read_iiiReg_iii>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_read_iiiReg_iii(LoRa_iii* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	889b      	ldrh	r3, [r3, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	f001 fda3 	bl	800343c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6998      	ldr	r0, [r3, #24]
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	f002 fb58 	bl	8003fb6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001906:	bf00      	nop
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4618      	mov	r0, r3
 800190e:	f003 f83f 	bl	8004990 <HAL_SPI_GetState>
 8001912:	4603      	mov	r3, r0
 8001914:	2b01      	cmp	r3, #1
 8001916:	d1f7      	bne.n	8001908 <LoRa_read_iiiReg_iii+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6998      	ldr	r0, [r3, #24]
 800191c:	8b3a      	ldrh	r2, [r7, #24]
 800191e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001922:	6839      	ldr	r1, [r7, #0]
 8001924:	f002 fc83 	bl	800422e <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001928:	bf00      	nop
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 f82e 	bl	8004990 <HAL_SPI_GetState>
 8001934:	4603      	mov	r3, r0
 8001936:	2b01      	cmp	r3, #1
 8001938:	d1f7      	bne.n	800192a <LoRa_read_iiiReg_iii+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	889b      	ldrh	r3, [r3, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	4619      	mov	r1, r3
 8001946:	f001 fd79 	bl	800343c <HAL_GPIO_WritePin>
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <LoRa_write_iiiReg_iii>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write_iiiReg_iii(LoRa_iii* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	4613      	mov	r3, r2
 8001960:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	889b      	ldrh	r3, [r3, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	4619      	mov	r1, r3
 800196e:	f001 fd65 	bl	800343c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6998      	ldr	r0, [r3, #24]
 8001976:	88fa      	ldrh	r2, [r7, #6]
 8001978:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	f002 fb1a 	bl	8003fb6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001982:	bf00      	nop
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 f801 	bl	8004990 <HAL_SPI_GetState>
 800198e:	4603      	mov	r3, r0
 8001990:	2b01      	cmp	r3, #1
 8001992:	d1f7      	bne.n	8001984 <LoRa_write_iiiReg_iii+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6998      	ldr	r0, [r3, #24]
 8001998:	8b3a      	ldrh	r2, [r7, #24]
 800199a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	f002 fb09 	bl	8003fb6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80019a4:	bf00      	nop
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 fff0 	bl	8004990 <HAL_SPI_GetState>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d1f7      	bne.n	80019a6 <LoRa_write_iiiReg_iii+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	889b      	ldrh	r3, [r3, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	4619      	mov	r1, r3
 80019c2:	f001 fd3b 	bl	800343c <HAL_GPIO_WritePin>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <LoRa_setFrequency_iii>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency_iii(LoRa_iii* _LoRa, int freq){
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	04db      	lsls	r3, r3, #19
 80019dc:	115b      	asrs	r3, r3, #5
 80019de:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	0c1b      	lsrs	r3, r3, #16
 80019e4:	72fb      	strb	r3, [r7, #11]
	LoRa_write_iii(_LoRa, RegFrMsb, data);
 80019e6:	7afb      	ldrb	r3, [r7, #11]
 80019e8:	461a      	mov	r2, r3
 80019ea:	2106      	movs	r1, #6
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f8d4 	bl	8001b9a <LoRa_write_iii>
	HAL_Delay(5);
 80019f2:	2005      	movs	r0, #5
 80019f4:	f001 f9de 	bl	8002db4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	0a1b      	lsrs	r3, r3, #8
 80019fc:	72fb      	strb	r3, [r7, #11]
	LoRa_write_iii(_LoRa, RegFrMid, data);
 80019fe:	7afb      	ldrb	r3, [r7, #11]
 8001a00:	461a      	mov	r2, r3
 8001a02:	2107      	movs	r1, #7
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f8c8 	bl	8001b9a <LoRa_write_iii>
	HAL_Delay(5);
 8001a0a:	2005      	movs	r0, #5
 8001a0c:	f001 f9d2 	bl	8002db4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	72fb      	strb	r3, [r7, #11]
	LoRa_write_iii(_LoRa, RegFrLsb, data);
 8001a14:	7afb      	ldrb	r3, [r7, #11]
 8001a16:	461a      	mov	r2, r3
 8001a18:	2108      	movs	r1, #8
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f8bd 	bl	8001b9a <LoRa_write_iii>
	HAL_Delay(5);
 8001a20:	2005      	movs	r0, #5
 8001a22:	f001 f9c7 	bl	8002db4 <HAL_Delay>
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <LoRa_setSpreadingFactor_iii>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor_iii(LoRa_iii* _LoRa, int SF){
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	dd01      	ble.n	8001a42 <LoRa_setSpreadingFactor_iii+0x14>
		SF = 12;
 8001a3e:	230c      	movs	r3, #12
 8001a40:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2b06      	cmp	r3, #6
 8001a46:	dc01      	bgt.n	8001a4c <LoRa_setSpreadingFactor_iii+0x1e>
		SF = 7;
 8001a48:	2307      	movs	r3, #7
 8001a4a:	603b      	str	r3, [r7, #0]

	read = LoRa_read_iii(_LoRa, RegModemConfig2);
 8001a4c:	211e      	movs	r1, #30
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f889 	bl	8001b66 <LoRa_read_iii>
 8001a54:	4603      	mov	r3, r0
 8001a56:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001a58:	200a      	movs	r0, #10
 8001a5a:	f001 f9ab 	bl	8002db4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	73bb      	strb	r3, [r7, #14]
	LoRa_write_iii(_LoRa, RegModemConfig2, data);
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
 8001a74:	461a      	mov	r2, r3
 8001a76:	211e      	movs	r1, #30
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f88e 	bl	8001b9a <LoRa_write_iii>
	HAL_Delay(10);
 8001a7e:	200a      	movs	r0, #10
 8001a80:	f001 f998 	bl	8002db4 <HAL_Delay>
}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <LoRa_setPower_iii>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower_iii(LoRa_iii* _LoRa, uint8_t power){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
	LoRa_write_iii(_LoRa, RegPaConfig, power);
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2109      	movs	r1, #9
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f87b 	bl	8001b9a <LoRa_write_iii>
	HAL_Delay(10);
 8001aa4:	200a      	movs	r0, #10
 8001aa6:	f001 f985 	bl	8002db4 <HAL_Delay>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <LoRa_setOCP_iii>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP_iii(LoRa_iii* _LoRa, uint8_t current){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	2b2c      	cmp	r3, #44	; 0x2c
 8001ac8:	d801      	bhi.n	8001ace <LoRa_setOCP_iii+0x1a>
		current = 45;
 8001aca:	232d      	movs	r3, #45	; 0x2d
 8001acc:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	2bf0      	cmp	r3, #240	; 0xf0
 8001ad2:	d901      	bls.n	8001ad8 <LoRa_setOCP_iii+0x24>
		current = 240;
 8001ad4:	23f0      	movs	r3, #240	; 0xf0
 8001ad6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	2b78      	cmp	r3, #120	; 0x78
 8001adc:	d809      	bhi.n	8001af2 <LoRa_setOCP_iii+0x3e>
		OcpTrim = (current - 45)/5;
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	3b2d      	subs	r3, #45	; 0x2d
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <LoRa_setOCP_iii+0x78>)
 8001ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae8:	1052      	asrs	r2, r2, #1
 8001aea:	17db      	asrs	r3, r3, #31
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e00b      	b.n	8001b0a <LoRa_setOCP_iii+0x56>
	else if(current <= 240)
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	2bf0      	cmp	r3, #240	; 0xf0
 8001af6:	d808      	bhi.n	8001b0a <LoRa_setOCP_iii+0x56>
		OcpTrim = (current + 30)/10;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	331e      	adds	r3, #30
 8001afc:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <LoRa_setOCP_iii+0x78>)
 8001afe:	fb82 1203 	smull	r1, r2, r2, r3
 8001b02:	1092      	asrs	r2, r2, #2
 8001b04:	17db      	asrs	r3, r3, #31
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	3320      	adds	r3, #32
 8001b0e:	73fb      	strb	r3, [r7, #15]
	LoRa_write_iii(_LoRa, RegOcp, OcpTrim);
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	461a      	mov	r2, r3
 8001b14:	210b      	movs	r1, #11
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f83f 	bl	8001b9a <LoRa_write_iii>
	HAL_Delay(10);
 8001b1c:	200a      	movs	r0, #10
 8001b1e:	f001 f949 	bl	8002db4 <HAL_Delay>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	66666667 	.word	0x66666667

08001b30 <LoRa_setTOMsb_setCRCon_iii>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon_iii(LoRa_iii* _LoRa){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read_iii(_LoRa, RegModemConfig2);
 8001b38:	211e      	movs	r1, #30
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f813 	bl	8001b66 <LoRa_read_iii>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	f043 0307 	orr.w	r3, r3, #7
 8001b4a:	73bb      	strb	r3, [r7, #14]
	LoRa_write_iii(_LoRa, RegModemConfig2, data);\
 8001b4c:	7bbb      	ldrb	r3, [r7, #14]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	211e      	movs	r1, #30
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f821 	bl	8001b9a <LoRa_write_iii>
	HAL_Delay(10);
 8001b58:	200a      	movs	r0, #10
 8001b5a:	f001 f92b 	bl	8002db4 <HAL_Delay>
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <LoRa_read_iii>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read_iii(LoRa_iii* _LoRa, uint8_t address){
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af02      	add	r7, sp, #8
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	73bb      	strb	r3, [r7, #14]
	LoRa_read_iiiReg_iii(_LoRa, &data_addr, 1, &read_data, 1);
 8001b7c:	f107 030f 	add.w	r3, r7, #15
 8001b80:	f107 010e 	add.w	r1, r7, #14
 8001b84:	2201      	movs	r2, #1
 8001b86:	9200      	str	r2, [sp, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fea3 	bl	80018d6 <LoRa_read_iiiReg_iii>
	//HAL_Delay(5);

	return read_data;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <LoRa_write_iii>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write_iii(LoRa_iii* _LoRa, uint8_t address, uint8_t value){
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af02      	add	r7, sp, #8
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	70fb      	strb	r3, [r7, #3]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001bb4:	78bb      	ldrb	r3, [r7, #2]
 8001bb6:	73fb      	strb	r3, [r7, #15]
	LoRa_write_iiiReg_iii(_LoRa, &addr, 1, &data, 1);
 8001bb8:	f107 030f 	add.w	r3, r7, #15
 8001bbc:	f107 010e 	add.w	r1, r7, #14
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	9200      	str	r2, [sp, #0]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fec3 	bl	8001952 <LoRa_write_iiiReg_iii>
	//HAL_Delay(5);
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <LoRa_isvalid_iii>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid_iii(LoRa_iii* _LoRa){
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

	return 1;
 8001bdc:	2301      	movs	r3, #1
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LoRa_startReceiving_iii>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving_iii(LoRa_iii* _LoRa){
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode_iii(_LoRa, RXCONTIN_MODE);
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff fe0d 	bl	8001814 <LoRa_gotoMode_iii>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <LoRa_receive_iii>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive_iii(LoRa_iii* _LoRa, uint8_t* data, uint8_t length){
 8001c02:	b590      	push	{r4, r7, lr}
 8001c04:	b089      	sub	sp, #36	; 0x24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	e007      	b.n	8001c2a <LoRa_receive_iii+0x28>
		data[i]=0;
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	4413      	add	r3, r2
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	3301      	adds	r3, #1
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	dbf3      	blt.n	8001c1a <LoRa_receive_iii+0x18>

	LoRa_gotoMode_iii(_LoRa, STNBY_MODE);
 8001c32:	2101      	movs	r1, #1
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f7ff fded 	bl	8001814 <LoRa_gotoMode_iii>
	read = LoRa_read_iii(_LoRa, RegIrqFlags);
 8001c3a:	2112      	movs	r1, #18
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f7ff ff92 	bl	8001b66 <LoRa_read_iii>
 8001c42:	4603      	mov	r3, r0
 8001c44:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001c46:	7cfb      	ldrb	r3, [r7, #19]
 8001c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d02f      	beq.n	8001cb0 <LoRa_receive_iii+0xae>
		LoRa_write_iii(_LoRa, RegIrqFlags, 0xFF);
 8001c50:	22ff      	movs	r2, #255	; 0xff
 8001c52:	2112      	movs	r1, #18
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7ff ffa0 	bl	8001b9a <LoRa_write_iii>
		number_of_bytes = LoRa_read_iii(_LoRa, RegRxNbBytes);
 8001c5a:	2113      	movs	r1, #19
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f7ff ff82 	bl	8001b66 <LoRa_read_iii>
 8001c62:	4603      	mov	r3, r0
 8001c64:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read_iii(_LoRa, RegFiFoRxCurrentAddr);
 8001c66:	2110      	movs	r1, #16
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f7ff ff7c 	bl	8001b66 <LoRa_read_iii>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	74fb      	strb	r3, [r7, #19]
		LoRa_write_iii(_LoRa, RegFiFoAddPtr, read);
 8001c72:	7cfb      	ldrb	r3, [r7, #19]
 8001c74:	461a      	mov	r2, r3
 8001c76:	210d      	movs	r1, #13
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f7ff ff8e 	bl	8001b9a <LoRa_write_iii>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001c7e:	7cba      	ldrb	r2, [r7, #18]
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	4293      	cmp	r3, r2
 8001c84:	bf28      	it	cs
 8001c86:	4613      	movcs	r3, r2
 8001c88:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e00b      	b.n	8001ca8 <LoRa_receive_iii+0xa6>
			data[i] = LoRa_read_iii(_LoRa, RegFiFo);
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	18d4      	adds	r4, r2, r3
 8001c96:	2100      	movs	r1, #0
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f7ff ff64 	bl	8001b66 <LoRa_read_iii>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	7ffb      	ldrb	r3, [r7, #31]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbef      	blt.n	8001c90 <LoRa_receive_iii+0x8e>
	}
	LoRa_gotoMode_iii(_LoRa, RXCONTIN_MODE);
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7ff fdae 	bl	8001814 <LoRa_gotoMode_iii>
    return min;
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}

08001cc2 <LoRa_init_iii>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init_iii(LoRa_iii* _LoRa){
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid_iii(_LoRa)){
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ff82 	bl	8001bd4 <LoRa_isvalid_iii>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8093 	beq.w	8001dfe <LoRa_init_iii+0x13c>
		// goto sleep mode:
			LoRa_gotoMode_iii(_LoRa, SLEEP_MODE);
 8001cd8:	2100      	movs	r1, #0
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fd9a 	bl	8001814 <LoRa_gotoMode_iii>
			HAL_Delay(10);
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	f001 f867 	bl	8002db4 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read_iii(_LoRa, RegOpMode);
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff3c 	bl	8001b66 <LoRa_read_iii>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001cf2:	200a      	movs	r0, #10
 8001cf4:	f001 f85e 	bl	8002db4 <HAL_Delay>
			data = read | 0x80;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cfe:	73bb      	strb	r3, [r7, #14]
			LoRa_write_iii(_LoRa, RegOpMode, data);
 8001d00:	7bbb      	ldrb	r3, [r7, #14]
 8001d02:	461a      	mov	r2, r3
 8001d04:	2101      	movs	r1, #1
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ff47 	bl	8001b9a <LoRa_write_iii>
			HAL_Delay(100);
 8001d0c:	2064      	movs	r0, #100	; 0x64
 8001d0e:	f001 f851 	bl	8002db4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency_iii(_LoRa, _LoRa->frequency);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4619      	mov	r1, r3
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff fe58 	bl	80019ce <LoRa_setFrequency_iii>

		// set output power gain:
			LoRa_setPower_iii(_LoRa, _LoRa->power);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff feb0 	bl	8001a8c <LoRa_setPower_iii>

		// set over current protection:
			LoRa_setOCP_iii(_LoRa, _LoRa->overCurrentProtection);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001d32:	4619      	mov	r1, r3
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff febd 	bl	8001ab4 <LoRa_setOCP_iii>

		// set LNA gain:
			LoRa_write_iii(_LoRa, RegLna, 0x23);
 8001d3a:	2223      	movs	r2, #35	; 0x23
 8001d3c:	210c      	movs	r1, #12
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ff2b 	bl	8001b9a <LoRa_write_iii>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon_iii(_LoRa);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff fef3 	bl	8001b30 <LoRa_setTOMsb_setCRCon_iii>
			LoRa_setSpreadingFactor_iii(_LoRa, _LoRa->spredingFactor);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fe6b 	bl	8001a2e <LoRa_setSpreadingFactor_iii>

		// set Timeout Lsb:
			LoRa_write_iii(_LoRa, RegSymbTimeoutL, 0xFF);
 8001d58:	22ff      	movs	r2, #255	; 0xff
 8001d5a:	211f      	movs	r1, #31
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff1c 	bl	8001b9a <LoRa_write_iii>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	73bb      	strb	r3, [r7, #14]
			LoRa_write_iii(_LoRa, RegModemConfig1, data);
 8001d7e:	7bbb      	ldrb	r3, [r7, #14]
 8001d80:	461a      	mov	r2, r3
 8001d82:	211d      	movs	r1, #29
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff08 	bl	8001b9a <LoRa_write_iii>

		// set preamble:
			LoRa_write_iii(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	2120      	movs	r1, #32
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fefe 	bl	8001b9a <LoRa_write_iii>
			LoRa_write_iii(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	2121      	movs	r1, #33	; 0x21
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff fef6 	bl	8001b9a <LoRa_write_iii>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read_iii(_LoRa, RegDioMapping1);
 8001dae:	2140      	movs	r1, #64	; 0x40
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fed8 	bl	8001b66 <LoRa_read_iii>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001dc0:	73bb      	strb	r3, [r7, #14]
			LoRa_write_iii(_LoRa, RegDioMapping1, data);
 8001dc2:	7bbb      	ldrb	r3, [r7, #14]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2140      	movs	r1, #64	; 0x40
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff fee6 	bl	8001b9a <LoRa_write_iii>

		// goto standby mode:
			LoRa_gotoMode_iii(_LoRa, STNBY_MODE);
 8001dce:	2101      	movs	r1, #1
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fd1f 	bl	8001814 <LoRa_gotoMode_iii>
			_LoRa->current_mode = STNBY_MODE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001ddc:	200a      	movs	r0, #10
 8001dde:	f000 ffe9 	bl	8002db4 <HAL_Delay>

			read = LoRa_read_iii(_LoRa, RegVersion);
 8001de2:	2142      	movs	r1, #66	; 0x42
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff febe 	bl	8001b66 <LoRa_read_iii>
 8001dea:	4603      	mov	r3, r0
 8001dec:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2b12      	cmp	r3, #18
 8001df2:	d101      	bne.n	8001df8 <LoRa_init_iii+0x136>
				return LORA_OK;
 8001df4:	23c8      	movs	r3, #200	; 0xc8
 8001df6:	e004      	b.n	8001e02 <LoRa_init_iii+0x140>
			else
				return LORA_NOT_FOUND;
 8001df8:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001dfc:	e001      	b.n	8001e02 <LoRa_init_iii+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8001dfe:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <vApplicationGetIdleTaskMemory+0x30>)
 8001e22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	2000007c 	.word	0x2000007c
 8001e3c:	2000011c 	.word	0x2000011c

08001e40 <main>:
void Task2_init(void const * argument);
void Task3_init(void const * argument);
void Task4_init(void const * argument);

int main(void)
{
 8001e40:	b5b0      	push	{r4, r5, r7, lr}
 8001e42:	b0a8      	sub	sp, #160	; 0xa0
 8001e44:	af00      	add	r7, sp, #0
  HAL_Init();
 8001e46:	f000 ff73 	bl	8002d30 <HAL_Init>
  SystemClock_Config();
 8001e4a:	f000 fa29 	bl	80022a0 <SystemClock_Config>
  MX_GPIO_Init();
 8001e4e:	f000 fb99 	bl	8002584 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001e52:	f000 fa95 	bl	8002380 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001e56:	f000 fac9 	bl	80023ec <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8001e5a:	f000 fb69 	bl	8002530 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8001e5e:	f000 fafb 	bl	8002458 <MX_SPI4_Init>
  MX_SPI6_Init();
 8001e62:	f000 fb2f 	bl	80024c4 <MX_SPI6_Init>

  myLoRa = newLoRa();
 8001e66:	4caf      	ldr	r4, [pc, #700]	; (8002124 <main+0x2e4>)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb3e 	bl	80004ec <newLoRa>
 8001e70:	4625      	mov	r5, r4
 8001e72:	463c      	mov	r4, r7
 8001e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e80:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 8001e84:	4ba7      	ldr	r3, [pc, #668]	; (8002124 <main+0x2e4>)
 8001e86:	4aa8      	ldr	r2, [pc, #672]	; (8002128 <main+0x2e8>)
 8001e88:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8001e8a:	4ba6      	ldr	r3, [pc, #664]	; (8002124 <main+0x2e4>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8001e90:	4ba4      	ldr	r3, [pc, #656]	; (8002124 <main+0x2e4>)
 8001e92:	4aa5      	ldr	r2, [pc, #660]	; (8002128 <main+0x2e8>)
 8001e94:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8001e96:	4ba3      	ldr	r3, [pc, #652]	; (8002124 <main+0x2e4>)
 8001e98:	2202      	movs	r2, #2
 8001e9a:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_0_GPIO_Port;
 8001e9c:	4ba1      	ldr	r3, [pc, #644]	; (8002124 <main+0x2e4>)
 8001e9e:	4aa2      	ldr	r2, [pc, #648]	; (8002128 <main+0x2e8>)
 8001ea0:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_0_Pin;
 8001ea2:	4ba0      	ldr	r3, [pc, #640]	; (8002124 <main+0x2e4>)
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001ea8:	4b9e      	ldr	r3, [pc, #632]	; (8002124 <main+0x2e4>)
 8001eaa:	4aa0      	ldr	r2, [pc, #640]	; (800212c <main+0x2ec>)
 8001eac:	619a      	str	r2, [r3, #24]
  myLoRa.frequency             = 868;             // default = 433 MHz
 8001eae:	4b9d      	ldr	r3, [pc, #628]	; (8002124 <main+0x2e4>)
 8001eb0:	f44f 7259 	mov.w	r2, #868	; 0x364
 8001eb4:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_9;            // default = SF_7
 8001eb6:	4b9b      	ldr	r3, [pc, #620]	; (8002124 <main+0x2e4>)
 8001eb8:	2209      	movs	r2, #9
 8001eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth             = BW_250KHz;       // default = BW_125KHz
 8001ebe:	4b99      	ldr	r3, [pc, #612]	; (8002124 <main+0x2e4>)
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate               = CR_4_8;          // default = CR_4_5
 8001ec6:	4b97      	ldr	r3, [pc, #604]	; (8002124 <main+0x2e4>)
 8001ec8:	2204      	movs	r2, #4
 8001eca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power                 = POWER_17db;      // default = 20db
 8001ece:	4b95      	ldr	r3, [pc, #596]	; (8002124 <main+0x2e4>)
 8001ed0:	22fc      	movs	r2, #252	; 0xfc
 8001ed2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8001ed6:	4b93      	ldr	r3, [pc, #588]	; (8002124 <main+0x2e4>)
 8001ed8:	2282      	movs	r2, #130	; 0x82
 8001eda:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble              = 10;              // default = 8;
 8001ede:	4b91      	ldr	r3, [pc, #580]	; (8002124 <main+0x2e4>)
 8001ee0:	220a      	movs	r2, #10
 8001ee2:	851a      	strh	r2, [r3, #40]	; 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 8001ee4:	488f      	ldr	r0, [pc, #572]	; (8002124 <main+0x2e4>)
 8001ee6:	f7fe fd80 	bl	80009ea <LoRa_init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2bc8      	cmp	r3, #200	; 0xc8
 8001eee:	d102      	bne.n	8001ef6 <main+0xb6>
  	  LoRa_stat = 1;
 8001ef0:	4b8f      	ldr	r3, [pc, #572]	; (8002130 <main+0x2f0>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
  }

  myLoRa_i = newLoRa_i();
 8001ef6:	4c8f      	ldr	r4, [pc, #572]	; (8002134 <main+0x2f4>)
 8001ef8:	463b      	mov	r3, r7
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fe19 	bl	8000b32 <newLoRa_i>
 8001f00:	4625      	mov	r5, r4
 8001f02:	463c      	mov	r4, r7
 8001f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f10:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa_i.CS_port         = NSS_1_GPIO_Port;
 8001f14:	4b87      	ldr	r3, [pc, #540]	; (8002134 <main+0x2f4>)
 8001f16:	4a88      	ldr	r2, [pc, #544]	; (8002138 <main+0x2f8>)
 8001f18:	601a      	str	r2, [r3, #0]
  myLoRa_i.CS_pin          = NSS_1_Pin;
 8001f1a:	4b86      	ldr	r3, [pc, #536]	; (8002134 <main+0x2f4>)
 8001f1c:	2240      	movs	r2, #64	; 0x40
 8001f1e:	809a      	strh	r2, [r3, #4]
  myLoRa_i.reset_port      = RST_1_GPIO_Port;
 8001f20:	4b84      	ldr	r3, [pc, #528]	; (8002134 <main+0x2f4>)
 8001f22:	4a85      	ldr	r2, [pc, #532]	; (8002138 <main+0x2f8>)
 8001f24:	609a      	str	r2, [r3, #8]
  myLoRa_i.reset_pin       = RST_1_Pin;
 8001f26:	4b83      	ldr	r3, [pc, #524]	; (8002134 <main+0x2f4>)
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	819a      	strh	r2, [r3, #12]
  myLoRa_i.DIO0_port       = DIO0_1_GPIO_Port;
 8001f2c:	4b81      	ldr	r3, [pc, #516]	; (8002134 <main+0x2f4>)
 8001f2e:	4a83      	ldr	r2, [pc, #524]	; (800213c <main+0x2fc>)
 8001f30:	611a      	str	r2, [r3, #16]
  myLoRa_i.DIO0_pin        = DIO0_1_Pin;
 8001f32:	4b80      	ldr	r3, [pc, #512]	; (8002134 <main+0x2f4>)
 8001f34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f38:	829a      	strh	r2, [r3, #20]
  myLoRa_i.hSPIx           = &hspi3;
 8001f3a:	4b7e      	ldr	r3, [pc, #504]	; (8002134 <main+0x2f4>)
 8001f3c:	4a80      	ldr	r2, [pc, #512]	; (8002140 <main+0x300>)
 8001f3e:	619a      	str	r2, [r3, #24]
  myLoRa_i.frequency             = 915;             // default = 433 MHz
 8001f40:	4b7c      	ldr	r3, [pc, #496]	; (8002134 <main+0x2f4>)
 8001f42:	f240 3293 	movw	r2, #915	; 0x393
 8001f46:	621a      	str	r2, [r3, #32]
  myLoRa_i.spredingFactor        = SF_9;            // default = SF_7
 8001f48:	4b7a      	ldr	r3, [pc, #488]	; (8002134 <main+0x2f4>)
 8001f4a:	2209      	movs	r2, #9
 8001f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa_i.bandWidth             = BW_250KHz;       // default = BW_125KHz
 8001f50:	4b78      	ldr	r3, [pc, #480]	; (8002134 <main+0x2f4>)
 8001f52:	2208      	movs	r2, #8
 8001f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa_i.crcRate               = CR_4_8;          // default = CR_4_5
 8001f58:	4b76      	ldr	r3, [pc, #472]	; (8002134 <main+0x2f4>)
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa_i.power                 = POWER_17db;      // default = 20db
 8001f60:	4b74      	ldr	r3, [pc, #464]	; (8002134 <main+0x2f4>)
 8001f62:	22fc      	movs	r2, #252	; 0xfc
 8001f64:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa_i.overCurrentProtection = 130;             // default = 100 mA
 8001f68:	4b72      	ldr	r3, [pc, #456]	; (8002134 <main+0x2f4>)
 8001f6a:	2282      	movs	r2, #130	; 0x82
 8001f6c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa_i.preamble              = 10;              // default = 8;
 8001f70:	4b70      	ldr	r3, [pc, #448]	; (8002134 <main+0x2f4>)
 8001f72:	220a      	movs	r2, #10
 8001f74:	851a      	strh	r2, [r3, #40]	; 0x28

  if(LoRa_init_i(&myLoRa_i) == LORA_OK){
 8001f76:	486f      	ldr	r0, [pc, #444]	; (8002134 <main+0x2f4>)
 8001f78:	f7ff f85b 	bl	8001032 <LoRa_init_i>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2bc8      	cmp	r3, #200	; 0xc8
 8001f80:	d102      	bne.n	8001f88 <main+0x148>
	  LoRa_stat_i = 1;
 8001f82:	4b70      	ldr	r3, [pc, #448]	; (8002144 <main+0x304>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
  }

  myLoRa_ii = newLoRa_ii();
 8001f88:	4c6f      	ldr	r4, [pc, #444]	; (8002148 <main+0x308>)
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff f8f4 	bl	800117a <newLoRa_ii>
 8001f92:	4625      	mov	r5, r4
 8001f94:	463c      	mov	r4, r7
 8001f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001fa2:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa_ii.CS_port         = NSS_2_GPIO_Port;
 8001fa6:	4b68      	ldr	r3, [pc, #416]	; (8002148 <main+0x308>)
 8001fa8:	4a68      	ldr	r2, [pc, #416]	; (800214c <main+0x30c>)
 8001faa:	601a      	str	r2, [r3, #0]
  myLoRa_ii.CS_pin          = NSS_2_Pin;
 8001fac:	4b66      	ldr	r3, [pc, #408]	; (8002148 <main+0x308>)
 8001fae:	2208      	movs	r2, #8
 8001fb0:	809a      	strh	r2, [r3, #4]
  myLoRa_ii.reset_port      = RST_2_GPIO_Port;
 8001fb2:	4b65      	ldr	r3, [pc, #404]	; (8002148 <main+0x308>)
 8001fb4:	4a65      	ldr	r2, [pc, #404]	; (800214c <main+0x30c>)
 8001fb6:	609a      	str	r2, [r3, #8]
  myLoRa_ii.reset_pin       = RST_2_Pin;
 8001fb8:	4b63      	ldr	r3, [pc, #396]	; (8002148 <main+0x308>)
 8001fba:	2210      	movs	r2, #16
 8001fbc:	819a      	strh	r2, [r3, #12]
  myLoRa_ii.DIO0_port       = DIO0_2_GPIO_Port;
 8001fbe:	4b62      	ldr	r3, [pc, #392]	; (8002148 <main+0x308>)
 8001fc0:	4a5d      	ldr	r2, [pc, #372]	; (8002138 <main+0x2f8>)
 8001fc2:	611a      	str	r2, [r3, #16]
  myLoRa_ii.DIO0_pin        = DIO0_2_Pin;
 8001fc4:	4b60      	ldr	r3, [pc, #384]	; (8002148 <main+0x308>)
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	829a      	strh	r2, [r3, #20]
  myLoRa_ii.hSPIx           = &hspi4;
 8001fca:	4b5f      	ldr	r3, [pc, #380]	; (8002148 <main+0x308>)
 8001fcc:	4a60      	ldr	r2, [pc, #384]	; (8002150 <main+0x310>)
 8001fce:	619a      	str	r2, [r3, #24]
  myLoRa_ii.frequency             = 433;             // default = 433 MHz
 8001fd0:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <main+0x308>)
 8001fd2:	f240 12b1 	movw	r2, #433	; 0x1b1
 8001fd6:	621a      	str	r2, [r3, #32]
  myLoRa_ii.spredingFactor        = SF_9;            // default = SF_7
 8001fd8:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <main+0x308>)
 8001fda:	2209      	movs	r2, #9
 8001fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa_ii.bandWidth             = BW_250KHz;       // default = BW_125KHz
 8001fe0:	4b59      	ldr	r3, [pc, #356]	; (8002148 <main+0x308>)
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa_ii.crcRate               = CR_4_8;          // default = CR_4_5
 8001fe8:	4b57      	ldr	r3, [pc, #348]	; (8002148 <main+0x308>)
 8001fea:	2204      	movs	r2, #4
 8001fec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa_ii.power                 = POWER_17db;      // default = 20db
 8001ff0:	4b55      	ldr	r3, [pc, #340]	; (8002148 <main+0x308>)
 8001ff2:	22fc      	movs	r2, #252	; 0xfc
 8001ff4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa_ii.overCurrentProtection = 130;             // default = 100 mA
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <main+0x308>)
 8001ffa:	2282      	movs	r2, #130	; 0x82
 8001ffc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa_ii.preamble              = 10;              // default = 8;
 8002000:	4b51      	ldr	r3, [pc, #324]	; (8002148 <main+0x308>)
 8002002:	220a      	movs	r2, #10
 8002004:	851a      	strh	r2, [r3, #40]	; 0x28

  if(LoRa_init_ii(&myLoRa_ii) == LORA_OK){
 8002006:	4850      	ldr	r0, [pc, #320]	; (8002148 <main+0x308>)
 8002008:	f7ff fb37 	bl	800167a <LoRa_init_ii>
 800200c:	4603      	mov	r3, r0
 800200e:	2bc8      	cmp	r3, #200	; 0xc8
 8002010:	d102      	bne.n	8002018 <main+0x1d8>
  	  LoRa_stat_ii = 1;
 8002012:	4b50      	ldr	r3, [pc, #320]	; (8002154 <main+0x314>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
  }

  myLoRa_iii = newLoRa_iii();
 8002018:	4c4f      	ldr	r4, [pc, #316]	; (8002158 <main+0x318>)
 800201a:	463b      	mov	r3, r7
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fbd0 	bl	80017c2 <newLoRa_iii>
 8002022:	4625      	mov	r5, r4
 8002024:	463c      	mov	r4, r7
 8002026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002032:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa_iii.CS_port         = NSS_3_GPIO_Port;
 8002036:	4b48      	ldr	r3, [pc, #288]	; (8002158 <main+0x318>)
 8002038:	4a48      	ldr	r2, [pc, #288]	; (800215c <main+0x31c>)
 800203a:	601a      	str	r2, [r3, #0]
  myLoRa_iii.CS_pin          = NSS_3_Pin;
 800203c:	4b46      	ldr	r3, [pc, #280]	; (8002158 <main+0x318>)
 800203e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002042:	809a      	strh	r2, [r3, #4]
  myLoRa_iii.reset_port      = RST_3_GPIO_Port;
 8002044:	4b44      	ldr	r3, [pc, #272]	; (8002158 <main+0x318>)
 8002046:	4a45      	ldr	r2, [pc, #276]	; (800215c <main+0x31c>)
 8002048:	609a      	str	r2, [r3, #8]
  myLoRa_iii.reset_pin       = RST_3_Pin;
 800204a:	4b43      	ldr	r3, [pc, #268]	; (8002158 <main+0x318>)
 800204c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002050:	819a      	strh	r2, [r3, #12]
  myLoRa_iii.DIO0_port       = DIO0_3_GPIO_Port;
 8002052:	4b41      	ldr	r3, [pc, #260]	; (8002158 <main+0x318>)
 8002054:	4a41      	ldr	r2, [pc, #260]	; (800215c <main+0x31c>)
 8002056:	611a      	str	r2, [r3, #16]
  myLoRa_iii.DIO0_pin        = DIO0_3_Pin;
 8002058:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <main+0x318>)
 800205a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800205e:	829a      	strh	r2, [r3, #20]
  myLoRa_iii.hSPIx           = &hspi6;
 8002060:	4b3d      	ldr	r3, [pc, #244]	; (8002158 <main+0x318>)
 8002062:	4a3f      	ldr	r2, [pc, #252]	; (8002160 <main+0x320>)
 8002064:	619a      	str	r2, [r3, #24]
  myLoRa_iii.frequency             = 902;             // default = 433 MHz
 8002066:	4b3c      	ldr	r3, [pc, #240]	; (8002158 <main+0x318>)
 8002068:	f240 3286 	movw	r2, #902	; 0x386
 800206c:	621a      	str	r2, [r3, #32]
  myLoRa_iii.spredingFactor        = SF_9;            // default = SF_7
 800206e:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <main+0x318>)
 8002070:	2209      	movs	r2, #9
 8002072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa_iii.bandWidth             = BW_250KHz;       // default = BW_125KHz
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <main+0x318>)
 8002078:	2208      	movs	r2, #8
 800207a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa_iii.crcRate               = CR_4_8;          // default = CR_4_5
 800207e:	4b36      	ldr	r3, [pc, #216]	; (8002158 <main+0x318>)
 8002080:	2204      	movs	r2, #4
 8002082:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa_iii.power                 = POWER_17db;      // default = 20db
 8002086:	4b34      	ldr	r3, [pc, #208]	; (8002158 <main+0x318>)
 8002088:	22fc      	movs	r2, #252	; 0xfc
 800208a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa_iii.overCurrentProtection = 130;             // default = 100 mA
 800208e:	4b32      	ldr	r3, [pc, #200]	; (8002158 <main+0x318>)
 8002090:	2282      	movs	r2, #130	; 0x82
 8002092:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa_iii.preamble              = 10;              // default = 8;
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <main+0x318>)
 8002098:	220a      	movs	r2, #10
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28

  if(LoRa_init_iii(&myLoRa_iii) == LORA_OK){
 800209c:	482e      	ldr	r0, [pc, #184]	; (8002158 <main+0x318>)
 800209e:	f7ff fe10 	bl	8001cc2 <LoRa_init_iii>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2bc8      	cmp	r3, #200	; 0xc8
 80020a6:	d102      	bne.n	80020ae <main+0x26e>
	  LoRa_stat_iii = 1;
 80020a8:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <main+0x324>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 80020ae:	481d      	ldr	r0, [pc, #116]	; (8002124 <main+0x2e4>)
 80020b0:	f7fe fc2f 	bl	8000912 <LoRa_startReceiving>
  HAL_Delay(50);
 80020b4:	2032      	movs	r0, #50	; 0x32
 80020b6:	f000 fe7d 	bl	8002db4 <HAL_Delay>
  LoRa_startReceiving_i(&myLoRa_i);
 80020ba:	481e      	ldr	r0, [pc, #120]	; (8002134 <main+0x2f4>)
 80020bc:	f7fe ff4d 	bl	8000f5a <LoRa_startReceiving_i>
  HAL_Delay(50);
 80020c0:	2032      	movs	r0, #50	; 0x32
 80020c2:	f000 fe77 	bl	8002db4 <HAL_Delay>
  LoRa_startReceiving_ii(&myLoRa_ii);
 80020c6:	4820      	ldr	r0, [pc, #128]	; (8002148 <main+0x308>)
 80020c8:	f7ff fa6b 	bl	80015a2 <LoRa_startReceiving_ii>
  HAL_Delay(50);
 80020cc:	2032      	movs	r0, #50	; 0x32
 80020ce:	f000 fe71 	bl	8002db4 <HAL_Delay>
  LoRa_startReceiving_iii(&myLoRa_iii);
 80020d2:	4821      	ldr	r0, [pc, #132]	; (8002158 <main+0x318>)
 80020d4:	f7ff fd89 	bl	8001bea <LoRa_startReceiving_iii>


  osThreadDef(Task1, Task1_init, osPriorityNormal, 0, 128);
 80020d8:	4b23      	ldr	r3, [pc, #140]	; (8002168 <main+0x328>)
 80020da:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80020de:	461d      	mov	r5, r3
 80020e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80020ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 ff7f 	bl	8005ff6 <osThreadCreate>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4a1c      	ldr	r2, [pc, #112]	; (800216c <main+0x32c>)
 80020fc:	6013      	str	r3, [r2, #0]


  osThreadDef(Task2, Task2_init, osPriorityNormal, 0, 128);
 80020fe:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <main+0x330>)
 8002100:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002104:	461d      	mov	r5, r3
 8002106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800210a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800210e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8002112:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f003 ff6c 	bl	8005ff6 <osThreadCreate>
 800211e:	4603      	mov	r3, r0
 8002120:	e028      	b.n	8002174 <main+0x334>
 8002122:	bf00      	nop
 8002124:	2000031c 	.word	0x2000031c
 8002128:	40020800 	.word	0x40020800
 800212c:	20000424 	.word	0x20000424
 8002130:	200003cc 	.word	0x200003cc
 8002134:	20000348 	.word	0x20000348
 8002138:	40021400 	.word	0x40021400
 800213c:	40020000 	.word	0x40020000
 8002140:	2000047c 	.word	0x2000047c
 8002144:	200003cd 	.word	0x200003cd
 8002148:	20000374 	.word	0x20000374
 800214c:	40021000 	.word	0x40021000
 8002150:	200004d4 	.word	0x200004d4
 8002154:	200003ce 	.word	0x200003ce
 8002158:	200003a0 	.word	0x200003a0
 800215c:	40021800 	.word	0x40021800
 8002160:	2000052c 	.word	0x2000052c
 8002164:	200003cf 	.word	0x200003cf
 8002168:	08007694 	.word	0x08007694
 800216c:	200005c8 	.word	0x200005c8
 8002170:	080076b8 	.word	0x080076b8
 8002174:	4a15      	ldr	r2, [pc, #84]	; (80021cc <main+0x38c>)
 8002176:	6013      	str	r3, [r2, #0]


  osThreadDef(Task3, Task3_init, osPriorityNormal, 0, 128);
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <main+0x390>)
 800217a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800217e:	461d      	mov	r5, r3
 8002180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002184:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002188:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 800218c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f003 ff2f 	bl	8005ff6 <osThreadCreate>
 8002198:	4603      	mov	r3, r0
 800219a:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <main+0x394>)
 800219c:	6013      	str	r3, [r2, #0]


  osThreadDef(Task4, Task4_init, osPriorityNormal, 0, 128);
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <main+0x398>)
 80021a0:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80021a4:	461d      	mov	r5, r3
 80021a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task4Handle = osThreadCreate(osThread(Task4), NULL);
 80021b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 ff1c 	bl	8005ff6 <osThreadCreate>
 80021be:	4603      	mov	r3, r0
 80021c0:	4a06      	ldr	r2, [pc, #24]	; (80021dc <main+0x39c>)
 80021c2:	6013      	str	r3, [r2, #0]


  osKernelStart();
 80021c4:	f003 ff10 	bl	8005fe8 <osKernelStart>


  while (1)
 80021c8:	e7fe      	b.n	80021c8 <main+0x388>
 80021ca:	bf00      	nop
 80021cc:	200005cc 	.word	0x200005cc
 80021d0:	080076dc 	.word	0x080076dc
 80021d4:	200005d0 	.word	0x200005d0
 80021d8:	08007700 	.word	0x08007700
 80021dc:	200005d4 	.word	0x200005d4

080021e0 <Task1_init>:

}


void Task1_init(void const * argument)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  Packet_size = LoRa_receive(&myLoRa, RxBuffer, 20);
 80021e8:	2214      	movs	r2, #20
 80021ea:	4906      	ldr	r1, [pc, #24]	; (8002204 <Task1_init+0x24>)
 80021ec:	4806      	ldr	r0, [pc, #24]	; (8002208 <Task1_init+0x28>)
 80021ee:	f7fe fb9c 	bl	800092a <LoRa_receive>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <Task1_init+0x2c>)
 80021f8:	701a      	strb	r2, [r3, #0]
	  osDelay(400);
 80021fa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80021fe:	f003 ff46 	bl	800608e <osDelay>
	  Packet_size = LoRa_receive(&myLoRa, RxBuffer, 20);
 8002202:	e7f1      	b.n	80021e8 <Task1_init+0x8>
 8002204:	200003d4 	.word	0x200003d4
 8002208:	2000031c 	.word	0x2000031c
 800220c:	200003d0 	.word	0x200003d0

08002210 <Task2_init>:
  }
}


void Task2_init(void const * argument)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  Packet_size_i = LoRa_receive_i(&myLoRa_i, RxBuffer_i, 20);
 8002218:	2214      	movs	r2, #20
 800221a:	4906      	ldr	r1, [pc, #24]	; (8002234 <Task2_init+0x24>)
 800221c:	4806      	ldr	r0, [pc, #24]	; (8002238 <Task2_init+0x28>)
 800221e:	f7fe fea8 	bl	8000f72 <LoRa_receive_i>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <Task2_init+0x2c>)
 8002228:	701a      	strb	r2, [r3, #0]
	  osDelay(400);
 800222a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800222e:	f003 ff2e 	bl	800608e <osDelay>
	  Packet_size_i = LoRa_receive_i(&myLoRa_i, RxBuffer_i, 20);
 8002232:	e7f1      	b.n	8002218 <Task2_init+0x8>
 8002234:	200003e8 	.word	0x200003e8
 8002238:	20000348 	.word	0x20000348
 800223c:	200003d1 	.word	0x200003d1

08002240 <Task3_init>:
  }
}


void Task3_init(void const * argument)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  Packet_size_ii = LoRa_receive_ii(&myLoRa_ii, RxBuffer_ii, 20);
 8002248:	2214      	movs	r2, #20
 800224a:	4906      	ldr	r1, [pc, #24]	; (8002264 <Task3_init+0x24>)
 800224c:	4806      	ldr	r0, [pc, #24]	; (8002268 <Task3_init+0x28>)
 800224e:	f7ff f9b4 	bl	80015ba <LoRa_receive_ii>
 8002252:	4603      	mov	r3, r0
 8002254:	461a      	mov	r2, r3
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <Task3_init+0x2c>)
 8002258:	701a      	strb	r2, [r3, #0]
	  osDelay(400);
 800225a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800225e:	f003 ff16 	bl	800608e <osDelay>
	  Packet_size_ii = LoRa_receive_ii(&myLoRa_ii, RxBuffer_ii, 20);
 8002262:	e7f1      	b.n	8002248 <Task3_init+0x8>
 8002264:	200003fc 	.word	0x200003fc
 8002268:	20000374 	.word	0x20000374
 800226c:	200003d2 	.word	0x200003d2

08002270 <Task4_init>:
  }
}


void Task4_init(void const * argument)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  Packet_size_iii = LoRa_receive_iii(&myLoRa_iii, RxBuffer_iii, 20);
 8002278:	2214      	movs	r2, #20
 800227a:	4906      	ldr	r1, [pc, #24]	; (8002294 <Task4_init+0x24>)
 800227c:	4806      	ldr	r0, [pc, #24]	; (8002298 <Task4_init+0x28>)
 800227e:	f7ff fcc0 	bl	8001c02 <LoRa_receive_iii>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	4b05      	ldr	r3, [pc, #20]	; (800229c <Task4_init+0x2c>)
 8002288:	701a      	strb	r2, [r3, #0]
	  osDelay(400);
 800228a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800228e:	f003 fefe 	bl	800608e <osDelay>
	  Packet_size_iii = LoRa_receive_iii(&myLoRa_iii, RxBuffer_iii, 20);
 8002292:	e7f1      	b.n	8002278 <Task4_init+0x8>
 8002294:	20000410 	.word	0x20000410
 8002298:	200003a0 	.word	0x200003a0
 800229c:	200003d3 	.word	0x200003d3

080022a0 <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b094      	sub	sp, #80	; 0x50
 80022a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022a6:	f107 0320 	add.w	r3, r7, #32
 80022aa:	2230      	movs	r2, #48	; 0x30
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f005 f8fc 	bl	80074ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b4:	f107 030c 	add.w	r3, r7, #12
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <SystemClock_Config+0xd8>)
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	4a2a      	ldr	r2, [pc, #168]	; (8002378 <SystemClock_Config+0xd8>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d2:	6413      	str	r3, [r2, #64]	; 0x40
 80022d4:	4b28      	ldr	r3, [pc, #160]	; (8002378 <SystemClock_Config+0xd8>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e0:	2300      	movs	r3, #0
 80022e2:	607b      	str	r3, [r7, #4]
 80022e4:	4b25      	ldr	r3, [pc, #148]	; (800237c <SystemClock_Config+0xdc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a24      	ldr	r2, [pc, #144]	; (800237c <SystemClock_Config+0xdc>)
 80022ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <SystemClock_Config+0xdc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022fc:	2301      	movs	r3, #1
 80022fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002306:	2302      	movs	r3, #2
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800230a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800230e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002310:	2304      	movs	r3, #4
 8002312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002314:	23b4      	movs	r3, #180	; 0xb4
 8002316:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002318:	2302      	movs	r3, #2
 800231a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800231c:	2307      	movs	r3, #7
 800231e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002320:	f107 0320 	add.w	r3, r7, #32
 8002324:	4618      	mov	r0, r3
 8002326:	f001 f8f3 	bl	8003510 <HAL_RCC_OscConfig>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002330:	f000 fa6e 	bl	8002810 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002334:	f001 f89c 	bl	8003470 <HAL_PWREx_EnableOverDrive>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800233e:	f000 fa67 	bl	8002810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002342:	230f      	movs	r3, #15
 8002344:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002346:	2302      	movs	r3, #2
 8002348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800234e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002352:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002358:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	2105      	movs	r1, #5
 8002360:	4618      	mov	r0, r3
 8002362:	f001 fb4d 	bl	8003a00 <HAL_RCC_ClockConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800236c:	f000 fa50 	bl	8002810 <Error_Handler>
  }
}
 8002370:	bf00      	nop
 8002372:	3750      	adds	r7, #80	; 0x50
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40023800 	.word	0x40023800
 800237c:	40007000 	.word	0x40007000

08002380 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002384:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <MX_SPI1_Init+0x64>)
 8002386:	4a18      	ldr	r2, [pc, #96]	; (80023e8 <MX_SPI1_Init+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800238a:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <MX_SPI1_Init+0x64>)
 800238c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002390:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <MX_SPI1_Init+0x64>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <MX_SPI1_Init+0x64>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <MX_SPI1_Init+0x64>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <MX_SPI1_Init+0x64>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <MX_SPI1_Init+0x64>)
 80023ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <MX_SPI1_Init+0x64>)
 80023b4:	2210      	movs	r2, #16
 80023b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <MX_SPI1_Init+0x64>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <MX_SPI1_Init+0x64>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c4:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <MX_SPI1_Init+0x64>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <MX_SPI1_Init+0x64>)
 80023cc:	220a      	movs	r2, #10
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023d0:	4804      	ldr	r0, [pc, #16]	; (80023e4 <MX_SPI1_Init+0x64>)
 80023d2:	f001 fd67 	bl	8003ea4 <HAL_SPI_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023dc:	f000 fa18 	bl	8002810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000424 	.word	0x20000424
 80023e8:	40013000 	.word	0x40013000

080023ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <MX_SPI3_Init+0x64>)
 80023f2:	4a18      	ldr	r2, [pc, #96]	; (8002454 <MX_SPI3_Init+0x68>)
 80023f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <MX_SPI3_Init+0x64>)
 80023f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <MX_SPI3_Init+0x64>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <MX_SPI3_Init+0x64>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <MX_SPI3_Init+0x64>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <MX_SPI3_Init+0x64>)
 8002412:	2200      	movs	r2, #0
 8002414:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <MX_SPI3_Init+0x64>)
 8002418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800241c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <MX_SPI3_Init+0x64>)
 8002420:	2208      	movs	r2, #8
 8002422:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002424:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <MX_SPI3_Init+0x64>)
 8002426:	2200      	movs	r2, #0
 8002428:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <MX_SPI3_Init+0x64>)
 800242c:	2200      	movs	r2, #0
 800242e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <MX_SPI3_Init+0x64>)
 8002432:	2200      	movs	r2, #0
 8002434:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <MX_SPI3_Init+0x64>)
 8002438:	220a      	movs	r2, #10
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800243c:	4804      	ldr	r0, [pc, #16]	; (8002450 <MX_SPI3_Init+0x64>)
 800243e:	f001 fd31 	bl	8003ea4 <HAL_SPI_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002448:	f000 f9e2 	bl	8002810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	2000047c 	.word	0x2000047c
 8002454:	40003c00 	.word	0x40003c00

08002458 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <MX_SPI4_Init+0x64>)
 800245e:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <MX_SPI4_Init+0x68>)
 8002460:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <MX_SPI4_Init+0x64>)
 8002464:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002468:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <MX_SPI4_Init+0x64>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <MX_SPI4_Init+0x64>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <MX_SPI4_Init+0x64>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <MX_SPI4_Init+0x64>)
 800247e:	2200      	movs	r2, #0
 8002480:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <MX_SPI4_Init+0x64>)
 8002484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002488:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <MX_SPI4_Init+0x64>)
 800248c:	2210      	movs	r2, #16
 800248e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <MX_SPI4_Init+0x64>)
 8002492:	2200      	movs	r2, #0
 8002494:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <MX_SPI4_Init+0x64>)
 8002498:	2200      	movs	r2, #0
 800249a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <MX_SPI4_Init+0x64>)
 800249e:	2200      	movs	r2, #0
 80024a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <MX_SPI4_Init+0x64>)
 80024a4:	220a      	movs	r2, #10
 80024a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80024a8:	4804      	ldr	r0, [pc, #16]	; (80024bc <MX_SPI4_Init+0x64>)
 80024aa:	f001 fcfb 	bl	8003ea4 <HAL_SPI_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80024b4:	f000 f9ac 	bl	8002810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200004d4 	.word	0x200004d4
 80024c0:	40013400 	.word	0x40013400

080024c4 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 80024c8:	4b17      	ldr	r3, [pc, #92]	; (8002528 <MX_SPI6_Init+0x64>)
 80024ca:	4a18      	ldr	r2, [pc, #96]	; (800252c <MX_SPI6_Init+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80024ce:	4b16      	ldr	r3, [pc, #88]	; (8002528 <MX_SPI6_Init+0x64>)
 80024d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024d4:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <MX_SPI6_Init+0x64>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <MX_SPI6_Init+0x64>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <MX_SPI6_Init+0x64>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024e8:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <MX_SPI6_Init+0x64>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80024ee:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <MX_SPI6_Init+0x64>)
 80024f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f4:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <MX_SPI6_Init+0x64>)
 80024f8:	2210      	movs	r2, #16
 80024fa:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <MX_SPI6_Init+0x64>)
 80024fe:	2200      	movs	r2, #0
 8002500:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <MX_SPI6_Init+0x64>)
 8002504:	2200      	movs	r2, #0
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <MX_SPI6_Init+0x64>)
 800250a:	2200      	movs	r2, #0
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 10;
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <MX_SPI6_Init+0x64>)
 8002510:	220a      	movs	r2, #10
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8002514:	4804      	ldr	r0, [pc, #16]	; (8002528 <MX_SPI6_Init+0x64>)
 8002516:	f001 fcc5 	bl	8003ea4 <HAL_SPI_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_SPI6_Init+0x60>
  {
    Error_Handler();
 8002520:	f000 f976 	bl	8002810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000052c 	.word	0x2000052c
 800252c:	40015400 	.word	0x40015400

08002530 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <MX_USART3_UART_Init+0x4c>)
 8002536:	4a12      	ldr	r2, [pc, #72]	; (8002580 <MX_USART3_UART_Init+0x50>)
 8002538:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <MX_USART3_UART_Init+0x4c>)
 800253c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002540:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_USART3_UART_Init+0x4c>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_USART3_UART_Init+0x4c>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_USART3_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_USART3_UART_Init+0x4c>)
 8002556:	220c      	movs	r2, #12
 8002558:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <MX_USART3_UART_Init+0x4c>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_USART3_UART_Init+0x4c>)
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_USART3_UART_Init+0x4c>)
 8002568:	f002 fe12 	bl	8005190 <HAL_UART_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002572:	f000 f94d 	bl	8002810 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000584 	.word	0x20000584
 8002580:	40004800 	.word	0x40004800

08002584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08e      	sub	sp, #56	; 0x38
 8002588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
 8002598:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
 800259e:	4b8c      	ldr	r3, [pc, #560]	; (80027d0 <MX_GPIO_Init+0x24c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a8b      	ldr	r2, [pc, #556]	; (80027d0 <MX_GPIO_Init+0x24c>)
 80025a4:	f043 0310 	orr.w	r3, r3, #16
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b89      	ldr	r3, [pc, #548]	; (80027d0 <MX_GPIO_Init+0x24c>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	623b      	str	r3, [r7, #32]
 80025b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	4b85      	ldr	r3, [pc, #532]	; (80027d0 <MX_GPIO_Init+0x24c>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a84      	ldr	r2, [pc, #528]	; (80027d0 <MX_GPIO_Init+0x24c>)
 80025c0:	f043 0304 	orr.w	r3, r3, #4
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <MX_GPIO_Init+0x24c>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	4b7e      	ldr	r3, [pc, #504]	; (80027d0 <MX_GPIO_Init+0x24c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a7d      	ldr	r2, [pc, #500]	; (80027d0 <MX_GPIO_Init+0x24c>)
 80025dc:	f043 0320 	orr.w	r3, r3, #32
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b7b      	ldr	r3, [pc, #492]	; (80027d0 <MX_GPIO_Init+0x24c>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	4b77      	ldr	r3, [pc, #476]	; (80027d0 <MX_GPIO_Init+0x24c>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a76      	ldr	r2, [pc, #472]	; (80027d0 <MX_GPIO_Init+0x24c>)
 80025f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b74      	ldr	r3, [pc, #464]	; (80027d0 <MX_GPIO_Init+0x24c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	4b70      	ldr	r3, [pc, #448]	; (80027d0 <MX_GPIO_Init+0x24c>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4a6f      	ldr	r2, [pc, #444]	; (80027d0 <MX_GPIO_Init+0x24c>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <MX_GPIO_Init+0x24c>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b69      	ldr	r3, [pc, #420]	; (80027d0 <MX_GPIO_Init+0x24c>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a68      	ldr	r2, [pc, #416]	; (80027d0 <MX_GPIO_Init+0x24c>)
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b66      	ldr	r3, [pc, #408]	; (80027d0 <MX_GPIO_Init+0x24c>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	4b62      	ldr	r3, [pc, #392]	; (80027d0 <MX_GPIO_Init+0x24c>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a61      	ldr	r2, [pc, #388]	; (80027d0 <MX_GPIO_Init+0x24c>)
 800264c:	f043 0308 	orr.w	r3, r3, #8
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b5f      	ldr	r3, [pc, #380]	; (80027d0 <MX_GPIO_Init+0x24c>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	4b5b      	ldr	r3, [pc, #364]	; (80027d0 <MX_GPIO_Init+0x24c>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a5a      	ldr	r2, [pc, #360]	; (80027d0 <MX_GPIO_Init+0x24c>)
 8002668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b58      	ldr	r3, [pc, #352]	; (80027d0 <MX_GPIO_Init+0x24c>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NSS_2_Pin|RST_2_Pin, GPIO_PIN_SET);
 800267a:	2201      	movs	r2, #1
 800267c:	2118      	movs	r1, #24
 800267e:	4855      	ldr	r0, [pc, #340]	; (80027d4 <MX_GPIO_Init+0x250>)
 8002680:	f000 fedc 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, NSS_1_Pin|RST_1_Pin, GPIO_PIN_SET);
 8002684:	2201      	movs	r2, #1
 8002686:	21c0      	movs	r1, #192	; 0xc0
 8002688:	4853      	ldr	r0, [pc, #332]	; (80027d8 <MX_GPIO_Init+0x254>)
 800268a:	f000 fed7 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 800268e:	2201      	movs	r2, #1
 8002690:	2103      	movs	r1, #3
 8002692:	4852      	ldr	r0, [pc, #328]	; (80027dc <MX_GPIO_Init+0x258>)
 8002694:	f000 fed2 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002698:	2200      	movs	r2, #0
 800269a:	f244 0181 	movw	r1, #16513	; 0x4081
 800269e:	4850      	ldr	r0, [pc, #320]	; (80027e0 <MX_GPIO_Init+0x25c>)
 80026a0:	f000 fecc 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RST_3_Pin|NSS_3_Pin, GPIO_PIN_SET);
 80026a4:	2201      	movs	r2, #1
 80026a6:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 80026aa:	484e      	ldr	r0, [pc, #312]	; (80027e4 <MX_GPIO_Init+0x260>)
 80026ac:	f000 fec6 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NSS_2_Pin RST_2_Pin */
  GPIO_InitStruct.Pin = NSS_2_Pin|RST_2_Pin;
 80026b0:	2318      	movs	r3, #24
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b4:	2301      	movs	r3, #1
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026bc:	2300      	movs	r3, #0
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c4:	4619      	mov	r1, r3
 80026c6:	4843      	ldr	r0, [pc, #268]	; (80027d4 <MX_GPIO_Init+0x250>)
 80026c8:	f000 fd0c 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Btn_Pin */
  GPIO_InitStruct.Pin = User_Btn_Pin;
 80026cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d2:	2300      	movs	r3, #0
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Btn_GPIO_Port, &GPIO_InitStruct);
 80026da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026de:	4619      	mov	r1, r3
 80026e0:	483e      	ldr	r0, [pc, #248]	; (80027dc <MX_GPIO_Init+0x258>)
 80026e2:	f000 fcff 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_2_Pin */
  GPIO_InitStruct.Pin = DIO0_2_Pin;
 80026e6:	2302      	movs	r3, #2
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DIO0_2_GPIO_Port, &GPIO_InitStruct);
 80026f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f8:	4619      	mov	r1, r3
 80026fa:	4837      	ldr	r0, [pc, #220]	; (80027d8 <MX_GPIO_Init+0x254>)
 80026fc:	f000 fcf2 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_1_Pin RST_1_Pin */
  GPIO_InitStruct.Pin = NSS_1_Pin|RST_1_Pin;
 8002700:	23c0      	movs	r3, #192	; 0xc0
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002704:	2301      	movs	r3, #1
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	2300      	movs	r3, #0
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002714:	4619      	mov	r1, r3
 8002716:	4830      	ldr	r0, [pc, #192]	; (80027d8 <MX_GPIO_Init+0x254>)
 8002718:	f000 fce4 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 800271c:	2303      	movs	r3, #3
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002720:	2301      	movs	r3, #1
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002730:	4619      	mov	r1, r3
 8002732:	482a      	ldr	r0, [pc, #168]	; (80027dc <MX_GPIO_Init+0x258>)
 8002734:	f000 fcd6 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_0_Pin */
  GPIO_InitStruct.Pin = DIO0_0_Pin;
 8002738:	2304      	movs	r3, #4
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800273c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DIO0_0_GPIO_Port, &GPIO_InitStruct);
 8002746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274a:	4619      	mov	r1, r3
 800274c:	4823      	ldr	r0, [pc, #140]	; (80027dc <MX_GPIO_Init+0x258>)
 800274e:	f000 fcc9 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 8002752:	f244 0381 	movw	r3, #16513	; 0x4081
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002758:	2301      	movs	r3, #1
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002768:	4619      	mov	r1, r3
 800276a:	481d      	ldr	r0, [pc, #116]	; (80027e0 <MX_GPIO_Init+0x25c>)
 800276c:	f000 fcba 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_1_Pin */
  GPIO_InitStruct.Pin = DIO0_1_Pin;
 8002770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002776:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DIO0_1_GPIO_Port, &GPIO_InitStruct);
 8002780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002784:	4619      	mov	r1, r3
 8002786:	4818      	ldr	r0, [pc, #96]	; (80027e8 <MX_GPIO_Init+0x264>)
 8002788:	f000 fcac 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_3_Pin NSS_3_Pin */
  GPIO_InitStruct.Pin = RST_3_Pin|NSS_3_Pin;
 800278c:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002792:	2301      	movs	r3, #1
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	2300      	movs	r3, #0
 800279c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800279e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a2:	4619      	mov	r1, r3
 80027a4:	480f      	ldr	r0, [pc, #60]	; (80027e4 <MX_GPIO_Init+0x260>)
 80027a6:	f000 fc9d 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_3_Pin */
  GPIO_InitStruct.Pin = DIO0_3_Pin;
 80027aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DIO0_3_GPIO_Port, &GPIO_InitStruct);
 80027ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027be:	4619      	mov	r1, r3
 80027c0:	4808      	ldr	r0, [pc, #32]	; (80027e4 <MX_GPIO_Init+0x260>)
 80027c2:	f000 fc8f 	bl	80030e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027c6:	bf00      	nop
 80027c8:	3738      	adds	r7, #56	; 0x38
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40021400 	.word	0x40021400
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40020400 	.word	0x40020400
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40020000 	.word	0x40020000

080027ec <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027fe:	f000 fab9 	bl	8002d74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40010000 	.word	0x40010000

08002810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002814:	b672      	cpsid	i
}
 8002816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002818:	e7fe      	b.n	8002818 <Error_Handler+0x8>
	...

0800281c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_MspInit+0x54>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a11      	ldr	r2, [pc, #68]	; (8002870 <HAL_MspInit+0x54>)
 800282c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_MspInit+0x54>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_MspInit+0x54>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_MspInit+0x54>)
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_MspInit+0x54>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	210f      	movs	r1, #15
 800285e:	f06f 0001 	mvn.w	r0, #1
 8002862:	f000 fb83 	bl	8002f6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800

08002874 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b090      	sub	sp, #64	; 0x40
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a75      	ldr	r2, [pc, #468]	; (8002a68 <HAL_SPI_MspInit+0x1f4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d134      	bne.n	8002900 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
 800289a:	4b74      	ldr	r3, [pc, #464]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	4a73      	ldr	r2, [pc, #460]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 80028a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028a4:	6453      	str	r3, [r2, #68]	; 0x44
 80028a6:	4b71      	ldr	r3, [pc, #452]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	4b6d      	ldr	r3, [pc, #436]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a6c      	ldr	r2, [pc, #432]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028ce:	23e0      	movs	r3, #224	; 0xe0
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028da:	2303      	movs	r3, #3
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028de:	2305      	movs	r3, #5
 80028e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028e6:	4619      	mov	r1, r3
 80028e8:	4861      	ldr	r0, [pc, #388]	; (8002a70 <HAL_SPI_MspInit+0x1fc>)
 80028ea:	f000 fbfb 	bl	80030e4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2105      	movs	r1, #5
 80028f2:	2023      	movs	r0, #35	; 0x23
 80028f4:	f000 fb3a 	bl	8002f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80028f8:	2023      	movs	r0, #35	; 0x23
 80028fa:	f000 fb53 	bl	8002fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 80028fe:	e0ae      	b.n	8002a5e <HAL_SPI_MspInit+0x1ea>
  else if(hspi->Instance==SPI3)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a5b      	ldr	r2, [pc, #364]	; (8002a74 <HAL_SPI_MspInit+0x200>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d135      	bne.n	8002976 <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
 800290e:	4b57      	ldr	r3, [pc, #348]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a56      	ldr	r2, [pc, #344]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 8002914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b54      	ldr	r3, [pc, #336]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002922:	623b      	str	r3, [r7, #32]
 8002924:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	4b50      	ldr	r3, [pc, #320]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a4f      	ldr	r2, [pc, #316]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b4d      	ldr	r3, [pc, #308]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002942:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002954:	2306      	movs	r3, #6
 8002956:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800295c:	4619      	mov	r1, r3
 800295e:	4846      	ldr	r0, [pc, #280]	; (8002a78 <HAL_SPI_MspInit+0x204>)
 8002960:	f000 fbc0 	bl	80030e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	2105      	movs	r1, #5
 8002968:	2033      	movs	r0, #51	; 0x33
 800296a:	f000 faff 	bl	8002f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800296e:	2033      	movs	r0, #51	; 0x33
 8002970:	f000 fb18 	bl	8002fa4 <HAL_NVIC_EnableIRQ>
}
 8002974:	e073      	b.n	8002a5e <HAL_SPI_MspInit+0x1ea>
  else if(hspi->Instance==SPI4)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a40      	ldr	r2, [pc, #256]	; (8002a7c <HAL_SPI_MspInit+0x208>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d134      	bne.n	80029ea <HAL_SPI_MspInit+0x176>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002980:	2300      	movs	r3, #0
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	4b39      	ldr	r3, [pc, #228]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	4a38      	ldr	r2, [pc, #224]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 800298a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800298e:	6453      	str	r3, [r2, #68]	; 0x44
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4a31      	ldr	r2, [pc, #196]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 80029a6:	f043 0310 	orr.w	r3, r3, #16
 80029aa:	6313      	str	r3, [r2, #48]	; 0x30
 80029ac:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80029b8:	2364      	movs	r3, #100	; 0x64
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80029c8:	2305      	movs	r3, #5
 80029ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d0:	4619      	mov	r1, r3
 80029d2:	482b      	ldr	r0, [pc, #172]	; (8002a80 <HAL_SPI_MspInit+0x20c>)
 80029d4:	f000 fb86 	bl	80030e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80029d8:	2200      	movs	r2, #0
 80029da:	2105      	movs	r1, #5
 80029dc:	2054      	movs	r0, #84	; 0x54
 80029de:	f000 fac5 	bl	8002f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80029e2:	2054      	movs	r0, #84	; 0x54
 80029e4:	f000 fade 	bl	8002fa4 <HAL_NVIC_EnableIRQ>
}
 80029e8:	e039      	b.n	8002a5e <HAL_SPI_MspInit+0x1ea>
  else if(hspi->Instance==SPI6)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a25      	ldr	r2, [pc, #148]	; (8002a84 <HAL_SPI_MspInit+0x210>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d134      	bne.n	8002a5e <HAL_SPI_MspInit+0x1ea>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 80029fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a02:	6453      	str	r3, [r2, #68]	; 0x44
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 8002a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_SPI_MspInit+0x1f8>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002a2c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8002a3e:	2305      	movs	r3, #5
 8002a40:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a46:	4619      	mov	r1, r3
 8002a48:	480f      	ldr	r0, [pc, #60]	; (8002a88 <HAL_SPI_MspInit+0x214>)
 8002a4a:	f000 fb4b 	bl	80030e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2105      	movs	r1, #5
 8002a52:	2056      	movs	r0, #86	; 0x56
 8002a54:	f000 fa8a 	bl	8002f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 8002a58:	2056      	movs	r0, #86	; 0x56
 8002a5a:	f000 faa3 	bl	8002fa4 <HAL_NVIC_EnableIRQ>
}
 8002a5e:	bf00      	nop
 8002a60:	3740      	adds	r7, #64	; 0x40
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40013000 	.word	0x40013000
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020000 	.word	0x40020000
 8002a74:	40003c00 	.word	0x40003c00
 8002a78:	40020800 	.word	0x40020800
 8002a7c:	40013400 	.word	0x40013400
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40015400 	.word	0x40015400
 8002a88:	40021800 	.word	0x40021800

08002a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_UART_MspInit+0x94>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d134      	bne.n	8002b18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abc:	6413      	str	r3, [r2, #64]	; 0x40
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ad4:	f043 0308 	orr.w	r3, r3, #8
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ae6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002af8:	2307      	movs	r3, #7
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4809      	ldr	r0, [pc, #36]	; (8002b28 <HAL_UART_MspInit+0x9c>)
 8002b04:	f000 faee 	bl	80030e4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2105      	movs	r1, #5
 8002b0c:	2027      	movs	r0, #39	; 0x27
 8002b0e:	f000 fa2d 	bl	8002f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b12:	2027      	movs	r0, #39	; 0x27
 8002b14:	f000 fa46 	bl	8002fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b18:	bf00      	nop
 8002b1a:	3728      	adds	r7, #40	; 0x28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40004800 	.word	0x40004800
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40020c00 	.word	0x40020c00

08002b2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08c      	sub	sp, #48	; 0x30
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <HAL_InitTick+0xd4>)
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	4a2e      	ldr	r2, [pc, #184]	; (8002c00 <HAL_InitTick+0xd4>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4c:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <HAL_InitTick+0xd4>)
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b58:	f107 020c 	add.w	r2, r7, #12
 8002b5c:	f107 0310 	add.w	r3, r7, #16
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 f96c 	bl	8003e40 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002b68:	f001 f956 	bl	8003e18 <HAL_RCC_GetPCLK2Freq>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	4a23      	ldr	r2, [pc, #140]	; (8002c04 <HAL_InitTick+0xd8>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	0c9b      	lsrs	r3, r3, #18
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b80:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <HAL_InitTick+0xdc>)
 8002b82:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <HAL_InitTick+0xe0>)
 8002b84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_InitTick+0xdc>)
 8002b88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b8c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b8e:	4a1e      	ldr	r2, [pc, #120]	; (8002c08 <HAL_InitTick+0xdc>)
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <HAL_InitTick+0xdc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_InitTick+0xdc>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_InitTick+0xdc>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002ba6:	4818      	ldr	r0, [pc, #96]	; (8002c08 <HAL_InitTick+0xdc>)
 8002ba8:	f002 f844 	bl	8004c34 <HAL_TIM_Base_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11b      	bne.n	8002bf2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002bba:	4813      	ldr	r0, [pc, #76]	; (8002c08 <HAL_InitTick+0xdc>)
 8002bbc:	f002 f894 	bl	8004ce8 <HAL_TIM_Base_Start_IT>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d111      	bne.n	8002bf2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002bce:	2019      	movs	r0, #25
 8002bd0:	f000 f9e8 	bl	8002fa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b0f      	cmp	r3, #15
 8002bd8:	d808      	bhi.n	8002bec <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	2019      	movs	r0, #25
 8002be0:	f000 f9c4 	bl	8002f6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002be4:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <HAL_InitTick+0xe4>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e002      	b.n	8002bf2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3730      	adds	r7, #48	; 0x30
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	431bde83 	.word	0x431bde83
 8002c08:	200005d8 	.word	0x200005d8
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	20000004 	.word	0x20000004

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <NMI_Handler+0x4>

08002c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1e:	e7fe      	b.n	8002c1e <HardFault_Handler+0x4>

08002c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <MemManage_Handler+0x4>

08002c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c2a:	e7fe      	b.n	8002c2a <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c46:	f002 f8bf 	bl	8004dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200005d8 	.word	0x200005d8

08002c54 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <SPI1_IRQHandler+0x10>)
 8002c5a:	f001 fd9b 	bl	8004794 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000424 	.word	0x20000424

08002c68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <USART3_IRQHandler+0x10>)
 8002c6e:	f002 fadd 	bl	800522c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000584 	.word	0x20000584

08002c7c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <SPI3_IRQHandler+0x10>)
 8002c82:	f001 fd87 	bl	8004794 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000047c 	.word	0x2000047c

08002c90 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002c94:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <SPI4_IRQHandler+0x10>)
 8002c96:	f001 fd7d 	bl	8004794 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200004d4 	.word	0x200004d4

08002ca4 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <SPI6_IRQHandler+0x10>)
 8002caa:	f001 fd73 	bl	8004794 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	2000052c 	.word	0x2000052c

08002cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <SystemInit+0x20>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <SystemInit+0x20>)
 8002cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d14 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ce0:	480d      	ldr	r0, [pc, #52]	; (8002d18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ce2:	490e      	ldr	r1, [pc, #56]	; (8002d1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ce4:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce8:	e002      	b.n	8002cf0 <LoopCopyDataInit>

08002cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cee:	3304      	adds	r3, #4

08002cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf4:	d3f9      	bcc.n	8002cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cf6:	4a0b      	ldr	r2, [pc, #44]	; (8002d24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cf8:	4c0b      	ldr	r4, [pc, #44]	; (8002d28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cfc:	e001      	b.n	8002d02 <LoopFillZerobss>

08002cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d00:	3204      	adds	r2, #4

08002d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d04:	d3fb      	bcc.n	8002cfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d06:	f7ff ffd7 	bl	8002cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d0a:	f004 fc2d 	bl	8007568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d0e:	f7ff f897 	bl	8001e40 <main>
  bx  lr    
 8002d12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002d14:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d1c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002d20:	0800774c 	.word	0x0800774c
  ldr r2, =_sbss
 8002d24:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002d28:	200044b8 	.word	0x200044b8

08002d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d2c:	e7fe      	b.n	8002d2c <ADC_IRQHandler>
	...

08002d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d34:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <HAL_Init+0x40>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <HAL_Init+0x40>)
 8002d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_Init+0x40>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <HAL_Init+0x40>)
 8002d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <HAL_Init+0x40>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <HAL_Init+0x40>)
 8002d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d58:	2003      	movs	r0, #3
 8002d5a:	f000 f8fc 	bl	8002f56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d5e:	200f      	movs	r0, #15
 8002d60:	f7ff fee4 	bl	8002b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d64:	f7ff fd5a 	bl	800281c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023c00 	.word	0x40023c00

08002d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_IncTick+0x20>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_IncTick+0x24>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <HAL_IncTick+0x24>)
 8002d86:	6013      	str	r3, [r2, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000008 	.word	0x20000008
 8002d98:	20000620 	.word	0x20000620

08002d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_GetTick+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000620 	.word	0x20000620

08002db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dbc:	f7ff ffee 	bl	8002d9c <HAL_GetTick>
 8002dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d005      	beq.n	8002dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_Delay+0x44>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dda:	bf00      	nop
 8002ddc:	f7ff ffde 	bl	8002d9c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d8f7      	bhi.n	8002ddc <HAL_Delay+0x28>
  {
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000008 	.word	0x20000008

08002dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <__NVIC_SetPriorityGrouping+0x44>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e2e:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <__NVIC_SetPriorityGrouping+0x44>)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	60d3      	str	r3, [r2, #12]
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e48:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <__NVIC_GetPriorityGrouping+0x18>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	0a1b      	lsrs	r3, r3, #8
 8002e4e:	f003 0307 	and.w	r3, r3, #7
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	db0b      	blt.n	8002e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	f003 021f 	and.w	r2, r3, #31
 8002e78:	4907      	ldr	r1, [pc, #28]	; (8002e98 <__NVIC_EnableIRQ+0x38>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	2001      	movs	r0, #1
 8002e82:	fa00 f202 	lsl.w	r2, r0, r2
 8002e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000e100 	.word	0xe000e100

08002e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	6039      	str	r1, [r7, #0]
 8002ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	db0a      	blt.n	8002ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	490c      	ldr	r1, [pc, #48]	; (8002ee8 <__NVIC_SetPriority+0x4c>)
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	0112      	lsls	r2, r2, #4
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ec4:	e00a      	b.n	8002edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	4908      	ldr	r1, [pc, #32]	; (8002eec <__NVIC_SetPriority+0x50>)
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	3b04      	subs	r3, #4
 8002ed4:	0112      	lsls	r2, r2, #4
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	440b      	add	r3, r1
 8002eda:	761a      	strb	r2, [r3, #24]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000e100 	.word	0xe000e100
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f1c3 0307 	rsb	r3, r3, #7
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	bf28      	it	cs
 8002f0e:	2304      	movcs	r3, #4
 8002f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3304      	adds	r3, #4
 8002f16:	2b06      	cmp	r3, #6
 8002f18:	d902      	bls.n	8002f20 <NVIC_EncodePriority+0x30>
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3b03      	subs	r3, #3
 8002f1e:	e000      	b.n	8002f22 <NVIC_EncodePriority+0x32>
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f24:	f04f 32ff 	mov.w	r2, #4294967295
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	401a      	ands	r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f38:	f04f 31ff 	mov.w	r1, #4294967295
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	43d9      	mvns	r1, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f48:	4313      	orrs	r3, r2
         );
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3724      	adds	r7, #36	; 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff ff4c 	bl	8002dfc <__NVIC_SetPriorityGrouping>
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f7e:	f7ff ff61 	bl	8002e44 <__NVIC_GetPriorityGrouping>
 8002f82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	6978      	ldr	r0, [r7, #20]
 8002f8a:	f7ff ffb1 	bl	8002ef0 <NVIC_EncodePriority>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff ff80 	bl	8002e9c <__NVIC_SetPriority>
}
 8002f9c:	bf00      	nop
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff ff54 	bl	8002e60 <__NVIC_EnableIRQ>
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fce:	f7ff fee5 	bl	8002d9c <HAL_GetTick>
 8002fd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d008      	beq.n	8002ff2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e052      	b.n	8003098 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0216 	bic.w	r2, r2, #22
 8003000:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003010:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <HAL_DMA_Abort+0x62>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0208 	bic.w	r2, r2, #8
 8003030:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003042:	e013      	b.n	800306c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003044:	f7ff feaa 	bl	8002d9c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b05      	cmp	r3, #5
 8003050:	d90c      	bls.n	800306c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2203      	movs	r2, #3
 800305c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e015      	b.n	8003098 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e4      	bne.n	8003044 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307e:	223f      	movs	r2, #63	; 0x3f
 8003080:	409a      	lsls	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d004      	beq.n	80030be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00c      	b.n	80030d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2205      	movs	r2, #5
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e177      	b.n	80033f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003100:	2201      	movs	r2, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	429a      	cmp	r2, r3
 800311a:	f040 8166 	bne.w	80033ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d005      	beq.n	8003136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003132:	2b02      	cmp	r3, #2
 8003134:	d130      	bne.n	8003198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316c:	2201      	movs	r2, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 0201 	and.w	r2, r3, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d017      	beq.n	80031d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d123      	bne.n	8003228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	08da      	lsrs	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3208      	adds	r2, #8
 80031e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	220f      	movs	r2, #15
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	08da      	lsrs	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3208      	adds	r2, #8
 8003222:	69b9      	ldr	r1, [r7, #24]
 8003224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0203 	and.w	r2, r3, #3
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80c0 	beq.w	80033ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	4b66      	ldr	r3, [pc, #408]	; (8003408 <HAL_GPIO_Init+0x324>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a65      	ldr	r2, [pc, #404]	; (8003408 <HAL_GPIO_Init+0x324>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b63      	ldr	r3, [pc, #396]	; (8003408 <HAL_GPIO_Init+0x324>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003286:	4a61      	ldr	r2, [pc, #388]	; (800340c <HAL_GPIO_Init+0x328>)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_GPIO_Init+0x32c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d037      	beq.n	8003322 <HAL_GPIO_Init+0x23e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a57      	ldr	r2, [pc, #348]	; (8003414 <HAL_GPIO_Init+0x330>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d031      	beq.n	800331e <HAL_GPIO_Init+0x23a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a56      	ldr	r2, [pc, #344]	; (8003418 <HAL_GPIO_Init+0x334>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d02b      	beq.n	800331a <HAL_GPIO_Init+0x236>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a55      	ldr	r2, [pc, #340]	; (800341c <HAL_GPIO_Init+0x338>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d025      	beq.n	8003316 <HAL_GPIO_Init+0x232>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a54      	ldr	r2, [pc, #336]	; (8003420 <HAL_GPIO_Init+0x33c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01f      	beq.n	8003312 <HAL_GPIO_Init+0x22e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a53      	ldr	r2, [pc, #332]	; (8003424 <HAL_GPIO_Init+0x340>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d019      	beq.n	800330e <HAL_GPIO_Init+0x22a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a52      	ldr	r2, [pc, #328]	; (8003428 <HAL_GPIO_Init+0x344>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_GPIO_Init+0x226>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a51      	ldr	r2, [pc, #324]	; (800342c <HAL_GPIO_Init+0x348>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00d      	beq.n	8003306 <HAL_GPIO_Init+0x222>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a50      	ldr	r2, [pc, #320]	; (8003430 <HAL_GPIO_Init+0x34c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <HAL_GPIO_Init+0x21e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4f      	ldr	r2, [pc, #316]	; (8003434 <HAL_GPIO_Init+0x350>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_GPIO_Init+0x21a>
 80032fa:	2309      	movs	r3, #9
 80032fc:	e012      	b.n	8003324 <HAL_GPIO_Init+0x240>
 80032fe:	230a      	movs	r3, #10
 8003300:	e010      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003302:	2308      	movs	r3, #8
 8003304:	e00e      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003306:	2307      	movs	r3, #7
 8003308:	e00c      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800330a:	2306      	movs	r3, #6
 800330c:	e00a      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800330e:	2305      	movs	r3, #5
 8003310:	e008      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003312:	2304      	movs	r3, #4
 8003314:	e006      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003316:	2303      	movs	r3, #3
 8003318:	e004      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800331a:	2302      	movs	r3, #2
 800331c:	e002      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003322:	2300      	movs	r3, #0
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	f002 0203 	and.w	r2, r2, #3
 800332a:	0092      	lsls	r2, r2, #2
 800332c:	4093      	lsls	r3, r2
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003334:	4935      	ldr	r1, [pc, #212]	; (800340c <HAL_GPIO_Init+0x328>)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	3302      	adds	r3, #2
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <HAL_GPIO_Init+0x354>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003366:	4a34      	ldr	r2, [pc, #208]	; (8003438 <HAL_GPIO_Init+0x354>)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800336c:	4b32      	ldr	r3, [pc, #200]	; (8003438 <HAL_GPIO_Init+0x354>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003390:	4a29      	ldr	r2, [pc, #164]	; (8003438 <HAL_GPIO_Init+0x354>)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003396:	4b28      	ldr	r3, [pc, #160]	; (8003438 <HAL_GPIO_Init+0x354>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_GPIO_Init+0x354>)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_GPIO_Init+0x354>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e4:	4a14      	ldr	r2, [pc, #80]	; (8003438 <HAL_GPIO_Init+0x354>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3301      	adds	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	f67f ae84 	bls.w	8003100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3724      	adds	r7, #36	; 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	40013800 	.word	0x40013800
 8003410:	40020000 	.word	0x40020000
 8003414:	40020400 	.word	0x40020400
 8003418:	40020800 	.word	0x40020800
 800341c:	40020c00 	.word	0x40020c00
 8003420:	40021000 	.word	0x40021000
 8003424:	40021400 	.word	0x40021400
 8003428:	40021800 	.word	0x40021800
 800342c:	40021c00 	.word	0x40021c00
 8003430:	40022000 	.word	0x40022000
 8003434:	40022400 	.word	0x40022400
 8003438:	40013c00 	.word	0x40013c00

0800343c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
 8003448:	4613      	mov	r3, r2
 800344a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800344c:	787b      	ldrb	r3, [r7, #1]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003458:	e003      	b.n	8003462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800345a:	887b      	ldrh	r3, [r7, #2]
 800345c:	041a      	lsls	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	619a      	str	r2, [r3, #24]
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <HAL_PWREx_EnableOverDrive+0x90>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a1f      	ldr	r2, [pc, #124]	; (8003500 <HAL_PWREx_EnableOverDrive+0x90>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_PWREx_EnableOverDrive+0x90>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003496:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_PWREx_EnableOverDrive+0x94>)
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800349c:	f7ff fc7e 	bl	8002d9c <HAL_GetTick>
 80034a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034a2:	e009      	b.n	80034b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034a4:	f7ff fc7a 	bl	8002d9c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034b2:	d901      	bls.n	80034b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e01f      	b.n	80034f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034b8:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_PWREx_EnableOverDrive+0x98>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c4:	d1ee      	bne.n	80034a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_PWREx_EnableOverDrive+0x9c>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034cc:	f7ff fc66 	bl	8002d9c <HAL_GetTick>
 80034d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034d2:	e009      	b.n	80034e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034d4:	f7ff fc62 	bl	8002d9c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034e2:	d901      	bls.n	80034e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e007      	b.n	80034f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034e8:	4b07      	ldr	r3, [pc, #28]	; (8003508 <HAL_PWREx_EnableOverDrive+0x98>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034f4:	d1ee      	bne.n	80034d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	420e0040 	.word	0x420e0040
 8003508:	40007000 	.word	0x40007000
 800350c:	420e0044 	.word	0x420e0044

08003510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e267      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d075      	beq.n	800361a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800352e:	4b88      	ldr	r3, [pc, #544]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b04      	cmp	r3, #4
 8003538:	d00c      	beq.n	8003554 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353a:	4b85      	ldr	r3, [pc, #532]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003542:	2b08      	cmp	r3, #8
 8003544:	d112      	bne.n	800356c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003546:	4b82      	ldr	r3, [pc, #520]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003552:	d10b      	bne.n	800356c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	4b7e      	ldr	r3, [pc, #504]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d05b      	beq.n	8003618 <HAL_RCC_OscConfig+0x108>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d157      	bne.n	8003618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e242      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003574:	d106      	bne.n	8003584 <HAL_RCC_OscConfig+0x74>
 8003576:	4b76      	ldr	r3, [pc, #472]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a75      	ldr	r2, [pc, #468]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e01d      	b.n	80035c0 <HAL_RCC_OscConfig+0xb0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x98>
 800358e:	4b70      	ldr	r3, [pc, #448]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a6f      	ldr	r2, [pc, #444]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b6d      	ldr	r3, [pc, #436]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6c      	ldr	r2, [pc, #432]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0xb0>
 80035a8:	4b69      	ldr	r3, [pc, #420]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a68      	ldr	r2, [pc, #416]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b66      	ldr	r3, [pc, #408]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a65      	ldr	r2, [pc, #404]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d013      	beq.n	80035f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7ff fbe8 	bl	8002d9c <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d0:	f7ff fbe4 	bl	8002d9c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e207      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e2:	4b5b      	ldr	r3, [pc, #364]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0xc0>
 80035ee:	e014      	b.n	800361a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7ff fbd4 	bl	8002d9c <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f8:	f7ff fbd0 	bl	8002d9c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1f3      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360a:	4b51      	ldr	r3, [pc, #324]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0xe8>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d063      	beq.n	80036ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003626:	4b4a      	ldr	r3, [pc, #296]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003632:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800363a:	2b08      	cmp	r3, #8
 800363c:	d11c      	bne.n	8003678 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363e:	4b44      	ldr	r3, [pc, #272]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d116      	bne.n	8003678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	4b41      	ldr	r3, [pc, #260]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_RCC_OscConfig+0x152>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e1c7      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003662:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4937      	ldr	r1, [pc, #220]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003676:	e03a      	b.n	80036ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003680:	4b34      	ldr	r3, [pc, #208]	; (8003754 <HAL_RCC_OscConfig+0x244>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7ff fb89 	bl	8002d9c <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368e:	f7ff fb85 	bl	8002d9c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e1a8      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a0:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ac:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4925      	ldr	r1, [pc, #148]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]
 80036c0:	e015      	b.n	80036ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_RCC_OscConfig+0x244>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7ff fb68 	bl	8002d9c <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d0:	f7ff fb64 	bl	8002d9c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e187      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d036      	beq.n	8003768 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <HAL_RCC_OscConfig+0x248>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003708:	f7ff fb48 	bl	8002d9c <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003710:	f7ff fb44 	bl	8002d9c <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e167      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x200>
 800372e:	e01b      	b.n	8003768 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_OscConfig+0x248>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003736:	f7ff fb31 	bl	8002d9c <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373c:	e00e      	b.n	800375c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800373e:	f7ff fb2d 	bl	8002d9c <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d907      	bls.n	800375c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e150      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
 8003750:	40023800 	.word	0x40023800
 8003754:	42470000 	.word	0x42470000
 8003758:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	4b88      	ldr	r3, [pc, #544]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800375e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1ea      	bne.n	800373e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8097 	beq.w	80038a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377a:	4b81      	ldr	r3, [pc, #516]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10f      	bne.n	80037a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	4b7d      	ldr	r3, [pc, #500]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	4a7c      	ldr	r2, [pc, #496]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003794:	6413      	str	r3, [r2, #64]	; 0x40
 8003796:	4b7a      	ldr	r3, [pc, #488]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a2:	2301      	movs	r3, #1
 80037a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a6:	4b77      	ldr	r3, [pc, #476]	; (8003984 <HAL_RCC_OscConfig+0x474>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d118      	bne.n	80037e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b2:	4b74      	ldr	r3, [pc, #464]	; (8003984 <HAL_RCC_OscConfig+0x474>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a73      	ldr	r2, [pc, #460]	; (8003984 <HAL_RCC_OscConfig+0x474>)
 80037b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037be:	f7ff faed 	bl	8002d9c <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c6:	f7ff fae9 	bl	8002d9c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e10c      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4b6a      	ldr	r3, [pc, #424]	; (8003984 <HAL_RCC_OscConfig+0x474>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_OscConfig+0x2ea>
 80037ec:	4b64      	ldr	r3, [pc, #400]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a63      	ldr	r2, [pc, #396]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
 80037f8:	e01c      	b.n	8003834 <HAL_RCC_OscConfig+0x324>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b05      	cmp	r3, #5
 8003800:	d10c      	bne.n	800381c <HAL_RCC_OscConfig+0x30c>
 8003802:	4b5f      	ldr	r3, [pc, #380]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	4a5e      	ldr	r2, [pc, #376]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	6713      	str	r3, [r2, #112]	; 0x70
 800380e:	4b5c      	ldr	r3, [pc, #368]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a5b      	ldr	r2, [pc, #364]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
 800381a:	e00b      	b.n	8003834 <HAL_RCC_OscConfig+0x324>
 800381c:	4b58      	ldr	r3, [pc, #352]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	4a57      	ldr	r2, [pc, #348]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	6713      	str	r3, [r2, #112]	; 0x70
 8003828:	4b55      	ldr	r3, [pc, #340]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	4a54      	ldr	r2, [pc, #336]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800382e:	f023 0304 	bic.w	r3, r3, #4
 8003832:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d015      	beq.n	8003868 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7ff faae 	bl	8002d9c <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003842:	e00a      	b.n	800385a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003844:	f7ff faaa 	bl	8002d9c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e0cb      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385a:	4b49      	ldr	r3, [pc, #292]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0ee      	beq.n	8003844 <HAL_RCC_OscConfig+0x334>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003868:	f7ff fa98 	bl	8002d9c <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386e:	e00a      	b.n	8003886 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003870:	f7ff fa94 	bl	8002d9c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e0b5      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003886:	4b3e      	ldr	r3, [pc, #248]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1ee      	bne.n	8003870 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003898:	4b39      	ldr	r3, [pc, #228]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	4a38      	ldr	r2, [pc, #224]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800389e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80a1 	beq.w	80039f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ae:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d05c      	beq.n	8003974 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d141      	bne.n	8003946 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_RCC_OscConfig+0x478>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7ff fa68 	bl	8002d9c <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d0:	f7ff fa64 	bl	8002d9c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e087      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	4b27      	ldr	r3, [pc, #156]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	3b01      	subs	r3, #1
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	061b      	lsls	r3, r3, #24
 8003912:	491b      	ldr	r1, [pc, #108]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003918:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <HAL_RCC_OscConfig+0x478>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391e:	f7ff fa3d 	bl	8002d9c <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003926:	f7ff fa39 	bl	8002d9c <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e05c      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003938:	4b11      	ldr	r3, [pc, #68]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x416>
 8003944:	e054      	b.n	80039f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003946:	4b10      	ldr	r3, [pc, #64]	; (8003988 <HAL_RCC_OscConfig+0x478>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7ff fa26 	bl	8002d9c <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003954:	f7ff fa22 	bl	8002d9c <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e045      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x444>
 8003972:	e03d      	b.n	80039f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d107      	bne.n	800398c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e038      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
 8003980:	40023800 	.word	0x40023800
 8003984:	40007000 	.word	0x40007000
 8003988:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_RCC_OscConfig+0x4ec>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d028      	beq.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d121      	bne.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d11a      	bne.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039bc:	4013      	ands	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d111      	bne.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	3b01      	subs	r3, #1
 80039d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d107      	bne.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800

08003a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0cc      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a14:	4b68      	ldr	r3, [pc, #416]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d90c      	bls.n	8003a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b65      	ldr	r3, [pc, #404]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b63      	ldr	r3, [pc, #396]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0b8      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d020      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a54:	4b59      	ldr	r3, [pc, #356]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a58      	ldr	r2, [pc, #352]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a6c:	4b53      	ldr	r3, [pc, #332]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4a52      	ldr	r2, [pc, #328]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a78:	4b50      	ldr	r3, [pc, #320]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	494d      	ldr	r1, [pc, #308]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d044      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d119      	bne.n	8003ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e07f      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d003      	beq.n	8003abe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abe:	4b3f      	ldr	r3, [pc, #252]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e06f      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ace:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e067      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ade:	4b37      	ldr	r3, [pc, #220]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f023 0203 	bic.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4934      	ldr	r1, [pc, #208]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af0:	f7ff f954 	bl	8002d9c <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af8:	f7ff f950 	bl	8002d9c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e04f      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 020c 	and.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d1eb      	bne.n	8003af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b20:	4b25      	ldr	r3, [pc, #148]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d20c      	bcs.n	8003b48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e032      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b54:	4b19      	ldr	r3, [pc, #100]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4916      	ldr	r1, [pc, #88]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	490e      	ldr	r1, [pc, #56]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b86:	f000 f821 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	490a      	ldr	r1, [pc, #40]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b98:	5ccb      	ldrb	r3, [r1, r3]
 8003b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9e:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe ffc0 	bl	8002b2c <HAL_InitTick>

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023c00 	.word	0x40023c00
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	08007724 	.word	0x08007724
 8003bc4:	20000000 	.word	0x20000000
 8003bc8:	20000004 	.word	0x20000004

08003bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd0:	b094      	sub	sp, #80	; 0x50
 8003bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd8:	2300      	movs	r3, #0
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bdc:	2300      	movs	r3, #0
 8003bde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be4:	4b79      	ldr	r3, [pc, #484]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d00d      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0x40>
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	f200 80e1 	bhi.w	8003db8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x34>
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bfe:	e0db      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c00:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c04:	e0db      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c06:	4b73      	ldr	r3, [pc, #460]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c0a:	e0d8      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c0c:	4b6f      	ldr	r3, [pc, #444]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c16:	4b6d      	ldr	r3, [pc, #436]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d063      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c22:	4b6a      	ldr	r3, [pc, #424]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	099b      	lsrs	r3, r3, #6
 8003c28:	2200      	movs	r2, #0
 8003c2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30
 8003c36:	2300      	movs	r3, #0
 8003c38:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c3e:	4622      	mov	r2, r4
 8003c40:	462b      	mov	r3, r5
 8003c42:	f04f 0000 	mov.w	r0, #0
 8003c46:	f04f 0100 	mov.w	r1, #0
 8003c4a:	0159      	lsls	r1, r3, #5
 8003c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c50:	0150      	lsls	r0, r2, #5
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4621      	mov	r1, r4
 8003c58:	1a51      	subs	r1, r2, r1
 8003c5a:	6139      	str	r1, [r7, #16]
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c70:	4659      	mov	r1, fp
 8003c72:	018b      	lsls	r3, r1, #6
 8003c74:	4651      	mov	r1, sl
 8003c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	018a      	lsls	r2, r1, #6
 8003c7e:	4651      	mov	r1, sl
 8003c80:	ebb2 0801 	subs.w	r8, r2, r1
 8003c84:	4659      	mov	r1, fp
 8003c86:	eb63 0901 	sbc.w	r9, r3, r1
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c9e:	4690      	mov	r8, r2
 8003ca0:	4699      	mov	r9, r3
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	eb18 0303 	adds.w	r3, r8, r3
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	462b      	mov	r3, r5
 8003cac:	eb49 0303 	adc.w	r3, r9, r3
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	024b      	lsls	r3, r1, #9
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cc8:	4621      	mov	r1, r4
 8003cca:	024a      	lsls	r2, r1, #9
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cdc:	f7fc fa88 	bl	80001f0 <__aeabi_uldivmod>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce8:	e058      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cea:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	099b      	lsrs	r3, r3, #6
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cfa:	623b      	str	r3, [r7, #32]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003d00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d04:	4642      	mov	r2, r8
 8003d06:	464b      	mov	r3, r9
 8003d08:	f04f 0000 	mov.w	r0, #0
 8003d0c:	f04f 0100 	mov.w	r1, #0
 8003d10:	0159      	lsls	r1, r3, #5
 8003d12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d16:	0150      	lsls	r0, r2, #5
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d22:	4649      	mov	r1, r9
 8003d24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d40:	eb63 050b 	sbc.w	r5, r3, fp
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	00eb      	lsls	r3, r5, #3
 8003d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d52:	00e2      	lsls	r2, r4, #3
 8003d54:	4614      	mov	r4, r2
 8003d56:	461d      	mov	r5, r3
 8003d58:	4643      	mov	r3, r8
 8003d5a:	18e3      	adds	r3, r4, r3
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	464b      	mov	r3, r9
 8003d60:	eb45 0303 	adc.w	r3, r5, r3
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d72:	4629      	mov	r1, r5
 8003d74:	028b      	lsls	r3, r1, #10
 8003d76:	4621      	mov	r1, r4
 8003d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	028a      	lsls	r2, r1, #10
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d86:	2200      	movs	r2, #0
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	61fa      	str	r2, [r7, #28]
 8003d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d90:	f7fc fa2e 	bl	80001f0 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	3301      	adds	r3, #1
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003dac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003db6:	e002      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3750      	adds	r7, #80	; 0x50
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	00f42400 	.word	0x00f42400
 8003dd4:	007a1200 	.word	0x007a1200

08003dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_RCC_GetHCLKFreq+0x14>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20000000 	.word	0x20000000

08003df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003df4:	f7ff fff0 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	0a9b      	lsrs	r3, r3, #10
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	4903      	ldr	r1, [pc, #12]	; (8003e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e06:	5ccb      	ldrb	r3, [r1, r3]
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40023800 	.word	0x40023800
 8003e14:	08007734 	.word	0x08007734

08003e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e1c:	f7ff ffdc 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003e20:	4602      	mov	r2, r0
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	0b5b      	lsrs	r3, r3, #13
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	4903      	ldr	r1, [pc, #12]	; (8003e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2e:	5ccb      	ldrb	r3, [r1, r3]
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	08007734 	.word	0x08007734

08003e40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	220f      	movs	r2, #15
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e50:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <HAL_RCC_GetClockConfig+0x5c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0203 	and.w	r2, r3, #3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <HAL_RCC_GetClockConfig+0x5c>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <HAL_RCC_GetClockConfig+0x5c>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_RCC_GetClockConfig+0x5c>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	08db      	lsrs	r3, r3, #3
 8003e7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <HAL_RCC_GetClockConfig+0x60>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 020f 	and.w	r2, r3, #15
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	601a      	str	r2, [r3, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40023c00 	.word	0x40023c00

08003ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e07b      	b.n	8003fae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d108      	bne.n	8003ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ec6:	d009      	beq.n	8003edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61da      	str	r2, [r3, #28]
 8003ece:	e005      	b.n	8003edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fe fcbc 	bl	8002874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	ea42 0103 	orr.w	r1, r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	f003 0104 	and.w	r1, r3, #4
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	f003 0210 	and.w	r2, r3, #16
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69da      	ldr	r2, [r3, #28]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b088      	sub	sp, #32
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	603b      	str	r3, [r7, #0]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_SPI_Transmit+0x22>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e126      	b.n	8004226 <HAL_SPI_Transmit+0x270>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fe0:	f7fe fedc 	bl	8002d9c <HAL_GetTick>
 8003fe4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d002      	beq.n	8003ffc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ffa:	e10b      	b.n	8004214 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_SPI_Transmit+0x52>
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d102      	bne.n	800400e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800400c:	e102      	b.n	8004214 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2203      	movs	r2, #3
 8004012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	88fa      	ldrh	r2, [r7, #6]
 8004026:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	88fa      	ldrh	r2, [r7, #6]
 800402c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004054:	d10f      	bne.n	8004076 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004064:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004074:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d007      	beq.n	8004094 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004092:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409c:	d14b      	bne.n	8004136 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_SPI_Transmit+0xf6>
 80040a6:	8afb      	ldrh	r3, [r7, #22]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d13e      	bne.n	800412a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	881a      	ldrh	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	1c9a      	adds	r2, r3, #2
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040d0:	e02b      	b.n	800412a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d112      	bne.n	8004106 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	881a      	ldrh	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	1c9a      	adds	r2, r3, #2
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	86da      	strh	r2, [r3, #54]	; 0x36
 8004104:	e011      	b.n	800412a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004106:	f7fe fe49 	bl	8002d9c <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d803      	bhi.n	800411e <HAL_SPI_Transmit+0x168>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d102      	bne.n	8004124 <HAL_SPI_Transmit+0x16e>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004128:	e074      	b.n	8004214 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1ce      	bne.n	80040d2 <HAL_SPI_Transmit+0x11c>
 8004134:	e04c      	b.n	80041d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_SPI_Transmit+0x18e>
 800413e:	8afb      	ldrh	r3, [r7, #22]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d140      	bne.n	80041c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	7812      	ldrb	r2, [r2, #0]
 8004150:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800416a:	e02c      	b.n	80041c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b02      	cmp	r3, #2
 8004178:	d113      	bne.n	80041a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	86da      	strh	r2, [r3, #54]	; 0x36
 80041a0:	e011      	b.n	80041c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041a2:	f7fe fdfb 	bl	8002d9c <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d803      	bhi.n	80041ba <HAL_SPI_Transmit+0x204>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d102      	bne.n	80041c0 <HAL_SPI_Transmit+0x20a>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d102      	bne.n	80041c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041c4:	e026      	b.n	8004214 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1cd      	bne.n	800416c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	6839      	ldr	r1, [r7, #0]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fceb 	bl	8004bb0 <SPI_EndRxTxTransaction>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e000      	b.n	8004214 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004212:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004224:	7ffb      	ldrb	r3, [r7, #31]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b088      	sub	sp, #32
 8004232:	af02      	add	r7, sp, #8
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800424a:	d112      	bne.n	8004272 <HAL_SPI_Receive+0x44>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10e      	bne.n	8004272 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2204      	movs	r2, #4
 8004258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800425c:	88fa      	ldrh	r2, [r7, #6]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	4613      	mov	r3, r2
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f8f1 	bl	8004450 <HAL_SPI_TransmitReceive>
 800426e:	4603      	mov	r3, r0
 8004270:	e0ea      	b.n	8004448 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_SPI_Receive+0x52>
 800427c:	2302      	movs	r3, #2
 800427e:	e0e3      	b.n	8004448 <HAL_SPI_Receive+0x21a>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004288:	f7fe fd88 	bl	8002d9c <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b01      	cmp	r3, #1
 8004298:	d002      	beq.n	80042a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800429a:	2302      	movs	r3, #2
 800429c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800429e:	e0ca      	b.n	8004436 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_SPI_Receive+0x7e>
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042b0:	e0c1      	b.n	8004436 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2204      	movs	r2, #4
 80042b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	88fa      	ldrh	r2, [r7, #6]
 80042ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	88fa      	ldrh	r2, [r7, #6]
 80042d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f8:	d10f      	bne.n	800431a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004308:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004318:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	d007      	beq.n	8004338 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004336:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d162      	bne.n	8004406 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004340:	e02e      	b.n	80043a0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b01      	cmp	r3, #1
 800434e:	d115      	bne.n	800437c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f103 020c 	add.w	r2, r3, #12
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	7812      	ldrb	r2, [r2, #0]
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	87da      	strh	r2, [r3, #62]	; 0x3e
 800437a:	e011      	b.n	80043a0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800437c:	f7fe fd0e 	bl	8002d9c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d803      	bhi.n	8004394 <HAL_SPI_Receive+0x166>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004392:	d102      	bne.n	800439a <HAL_SPI_Receive+0x16c>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800439e:	e04a      	b.n	8004436 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1cb      	bne.n	8004342 <HAL_SPI_Receive+0x114>
 80043aa:	e031      	b.n	8004410 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d113      	bne.n	80043e2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	b292      	uxth	r2, r2
 80043c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	1c9a      	adds	r2, r3, #2
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043e0:	e011      	b.n	8004406 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043e2:	f7fe fcdb 	bl	8002d9c <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d803      	bhi.n	80043fa <HAL_SPI_Receive+0x1cc>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d102      	bne.n	8004400 <HAL_SPI_Receive+0x1d2>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004404:	e017      	b.n	8004436 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1cd      	bne.n	80043ac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	6839      	ldr	r1, [r7, #0]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fb65 	bl	8004ae4 <SPI_EndRxTransaction>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	75fb      	strb	r3, [r7, #23]
 8004432:	e000      	b.n	8004436 <HAL_SPI_Receive+0x208>
  }

error :
 8004434:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004446:	7dfb      	ldrb	r3, [r7, #23]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08c      	sub	sp, #48	; 0x30
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800445e:	2301      	movs	r3, #1
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_SPI_TransmitReceive+0x26>
 8004472:	2302      	movs	r3, #2
 8004474:	e18a      	b.n	800478c <HAL_SPI_TransmitReceive+0x33c>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800447e:	f7fe fc8d 	bl	8002d9c <HAL_GetTick>
 8004482:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004494:	887b      	ldrh	r3, [r7, #2]
 8004496:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004498:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800449c:	2b01      	cmp	r3, #1
 800449e:	d00f      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x70>
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044a6:	d107      	bne.n	80044b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <HAL_SPI_TransmitReceive+0x68>
 80044b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d003      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044b8:	2302      	movs	r3, #2
 80044ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044be:	e15b      	b.n	8004778 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0x82>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0x82>
 80044cc:	887b      	ldrh	r3, [r7, #2]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d103      	bne.n	80044da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044d8:	e14e      	b.n	8004778 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d003      	beq.n	80044ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2205      	movs	r2, #5
 80044ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	887a      	ldrh	r2, [r7, #2]
 80044fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	887a      	ldrh	r2, [r7, #2]
 8004504:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	887a      	ldrh	r2, [r7, #2]
 8004510:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	887a      	ldrh	r2, [r7, #2]
 8004516:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452e:	2b40      	cmp	r3, #64	; 0x40
 8004530:	d007      	beq.n	8004542 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004540:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454a:	d178      	bne.n	800463e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_SPI_TransmitReceive+0x10a>
 8004554:	8b7b      	ldrh	r3, [r7, #26]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d166      	bne.n	8004628 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	881a      	ldrh	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	1c9a      	adds	r2, r3, #2
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800457e:	e053      	b.n	8004628 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b02      	cmp	r3, #2
 800458c:	d11b      	bne.n	80045c6 <HAL_SPI_TransmitReceive+0x176>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d016      	beq.n	80045c6 <HAL_SPI_TransmitReceive+0x176>
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d113      	bne.n	80045c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	881a      	ldrh	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	1c9a      	adds	r2, r3, #2
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d119      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x1b8>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d014      	beq.n	8004608 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	b292      	uxth	r2, r2
 80045ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	1c9a      	adds	r2, r3, #2
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004604:	2301      	movs	r3, #1
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004608:	f7fe fbc8 	bl	8002d9c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004614:	429a      	cmp	r2, r3
 8004616:	d807      	bhi.n	8004628 <HAL_SPI_TransmitReceive+0x1d8>
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	d003      	beq.n	8004628 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004626:	e0a7      	b.n	8004778 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1a6      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x130>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1a1      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x130>
 800463c:	e07c      	b.n	8004738 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_SPI_TransmitReceive+0x1fc>
 8004646:	8b7b      	ldrh	r3, [r7, #26]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d16b      	bne.n	8004724 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	7812      	ldrb	r2, [r2, #0]
 8004658:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004672:	e057      	b.n	8004724 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b02      	cmp	r3, #2
 8004680:	d11c      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x26c>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d017      	beq.n	80046bc <HAL_SPI_TransmitReceive+0x26c>
 800468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468e:	2b01      	cmp	r3, #1
 8004690:	d114      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	330c      	adds	r3, #12
 800469c:	7812      	ldrb	r2, [r2, #0]
 800469e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d119      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x2ae>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d014      	beq.n	80046fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046fa:	2301      	movs	r3, #1
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046fe:	f7fe fb4d 	bl	8002d9c <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800470a:	429a      	cmp	r2, r3
 800470c:	d803      	bhi.n	8004716 <HAL_SPI_TransmitReceive+0x2c6>
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d102      	bne.n	800471c <HAL_SPI_TransmitReceive+0x2cc>
 8004716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004718:	2b00      	cmp	r3, #0
 800471a:	d103      	bne.n	8004724 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004722:	e029      	b.n	8004778 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1a2      	bne.n	8004674 <HAL_SPI_TransmitReceive+0x224>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d19d      	bne.n	8004674 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fa37 	bl	8004bb0 <SPI_EndRxTxTransaction>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d006      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004754:	e010      	b.n	8004778 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	e000      	b.n	8004778 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004776:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004788:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800478c:	4618      	mov	r0, r3
 800478e:	3730      	adds	r7, #48	; 0x30
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10e      	bne.n	80047d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d009      	beq.n	80047d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d004      	beq.n	80047d4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	4798      	blx	r3
    return;
 80047d2:	e0ce      	b.n	8004972 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <HAL_SPI_IRQHandler+0x5e>
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
    return;
 80047f0:	e0bf      	b.n	8004972 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <HAL_SPI_IRQHandler+0x7e>
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d105      	bne.n	8004812 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80b0 	beq.w	8004972 <HAL_SPI_IRQHandler+0x1de>
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80aa 	beq.w	8004972 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	d023      	beq.n	8004870 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b03      	cmp	r3, #3
 8004832:	d011      	beq.n	8004858 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004838:	f043 0204 	orr.w	r2, r3, #4
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	e00b      	b.n	8004870 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004858:	2300      	movs	r3, #0
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	693b      	ldr	r3, [r7, #16]
        return;
 800486e:	e080      	b.n	8004972 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d014      	beq.n	80048a4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	f043 0201 	orr.w	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	f043 0208 	orr.w	r2, r3, #8
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d04f      	beq.n	8004970 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048de:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d104      	bne.n	80048fc <HAL_SPI_IRQHandler+0x168>
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d034      	beq.n	8004966 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0203 	bic.w	r2, r2, #3
 800490a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d011      	beq.n	8004938 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004918:	4a17      	ldr	r2, [pc, #92]	; (8004978 <HAL_SPI_IRQHandler+0x1e4>)
 800491a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004920:	4618      	mov	r0, r3
 8004922:	f7fe fbbd 	bl	80030a0 <HAL_DMA_Abort_IT>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493c:	2b00      	cmp	r3, #0
 800493e:	d016      	beq.n	800496e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004944:	4a0c      	ldr	r2, [pc, #48]	; (8004978 <HAL_SPI_IRQHandler+0x1e4>)
 8004946:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494c:	4618      	mov	r0, r3
 800494e:	f7fe fba7 	bl	80030a0 <HAL_DMA_Abort_IT>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004964:	e003      	b.n	800496e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f808 	bl	800497c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800496c:	e000      	b.n	8004970 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800496e:	bf00      	nop
    return;
 8004970:	bf00      	nop
  }
}
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	080049ad 	.word	0x080049ad

0800497c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800499e:	b2db      	uxtb	r3, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7ff ffd8 	bl	800497c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049e4:	f7fe f9da 	bl	8002d9c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	4413      	add	r3, r2
 80049f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049f4:	f7fe f9d2 	bl	8002d9c <HAL_GetTick>
 80049f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049fa:	4b39      	ldr	r3, [pc, #228]	; (8004ae0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	015b      	lsls	r3, r3, #5
 8004a00:	0d1b      	lsrs	r3, r3, #20
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	fb02 f303 	mul.w	r3, r2, r3
 8004a08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a0a:	e054      	b.n	8004ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a12:	d050      	beq.n	8004ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a14:	f7fe f9c2 	bl	8002d9c <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d902      	bls.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d13d      	bne.n	8004aa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a42:	d111      	bne.n	8004a68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4c:	d004      	beq.n	8004a58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a56:	d107      	bne.n	8004a68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a70:	d10f      	bne.n	8004a92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e017      	b.n	8004ad6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	bf0c      	ite	eq
 8004ac6:	2301      	moveq	r3, #1
 8004ac8:	2300      	movne	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d19b      	bne.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000000 	.word	0x20000000

08004ae4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af8:	d111      	bne.n	8004b1e <SPI_EndRxTransaction+0x3a>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b02:	d004      	beq.n	8004b0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0c:	d107      	bne.n	8004b1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b1c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b26:	d12a      	bne.n	8004b7e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b30:	d012      	beq.n	8004b58 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2180      	movs	r1, #128	; 0x80
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff ff49 	bl	80049d4 <SPI_WaitFlagStateUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d02d      	beq.n	8004ba4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e026      	b.n	8004ba6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2101      	movs	r1, #1
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff ff36 	bl	80049d4 <SPI_WaitFlagStateUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01a      	beq.n	8004ba4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e013      	b.n	8004ba6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	2101      	movs	r1, #1
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7ff ff23 	bl	80049d4 <SPI_WaitFlagStateUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	f043 0220 	orr.w	r2, r3, #32
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e000      	b.n	8004ba6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bbc:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <SPI_EndRxTxTransaction+0x7c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <SPI_EndRxTxTransaction+0x80>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	0d5b      	lsrs	r3, r3, #21
 8004bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bcc:	fb02 f303 	mul.w	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bda:	d112      	bne.n	8004c02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2200      	movs	r2, #0
 8004be4:	2180      	movs	r1, #128	; 0x80
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fef4 	bl	80049d4 <SPI_WaitFlagStateUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d016      	beq.n	8004c20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf6:	f043 0220 	orr.w	r2, r3, #32
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e00f      	b.n	8004c22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	2b80      	cmp	r3, #128	; 0x80
 8004c1a:	d0f2      	beq.n	8004c02 <SPI_EndRxTxTransaction+0x52>
 8004c1c:	e000      	b.n	8004c20 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c1e:	bf00      	nop
  }

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000000 	.word	0x20000000
 8004c30:	165e9f81 	.word	0x165e9f81

08004c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e041      	b.n	8004cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f839 	bl	8004cd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f000 f9d8 	bl	8005028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d001      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e04e      	b.n	8004d9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a23      	ldr	r2, [pc, #140]	; (8004dac <HAL_TIM_Base_Start_IT+0xc4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d022      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0x80>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2a:	d01d      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0x80>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1f      	ldr	r2, [pc, #124]	; (8004db0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d018      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0x80>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1e      	ldr	r2, [pc, #120]	; (8004db4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d013      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0x80>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1c      	ldr	r2, [pc, #112]	; (8004db8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00e      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0x80>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a1b      	ldr	r2, [pc, #108]	; (8004dbc <HAL_TIM_Base_Start_IT+0xd4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d009      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0x80>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a19      	ldr	r2, [pc, #100]	; (8004dc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d004      	beq.n	8004d68 <HAL_TIM_Base_Start_IT+0x80>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a18      	ldr	r2, [pc, #96]	; (8004dc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d111      	bne.n	8004d8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b06      	cmp	r3, #6
 8004d78:	d010      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8a:	e007      	b.n	8004d9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40010000 	.word	0x40010000
 8004db0:	40000400 	.word	0x40000400
 8004db4:	40000800 	.word	0x40000800
 8004db8:	40000c00 	.word	0x40000c00
 8004dbc:	40010400 	.word	0x40010400
 8004dc0:	40014000 	.word	0x40014000
 8004dc4:	40001800 	.word	0x40001800

08004dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d122      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d11b      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0202 	mvn.w	r2, #2
 8004df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f8ee 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f8e0 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f8f1 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d122      	bne.n	8004e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d11b      	bne.n	8004e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0204 	mvn.w	r2, #4
 8004e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f8c4 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004e64:	e005      	b.n	8004e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f8b6 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f8c7 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d122      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d11b      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0208 	mvn.w	r2, #8
 8004e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f89a 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004eb8:	e005      	b.n	8004ec6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f88c 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f89d 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0310 	and.w	r3, r3, #16
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d122      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b10      	cmp	r3, #16
 8004ee6:	d11b      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0210 	mvn.w	r2, #16
 8004ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f870 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004f0c:	e005      	b.n	8004f1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f862 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f873 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d10e      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d107      	bne.n	8004f4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0201 	mvn.w	r2, #1
 8004f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fd fc50 	bl	80027ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f56:	2b80      	cmp	r3, #128	; 0x80
 8004f58:	d10e      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f64:	2b80      	cmp	r3, #128	; 0x80
 8004f66:	d107      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f902 	bl	800517c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b40      	cmp	r3, #64	; 0x40
 8004f84:	d10e      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d107      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f838 	bl	8005014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d10e      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d107      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0220 	mvn.w	r2, #32
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f8cc 	bl	8005168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a40      	ldr	r2, [pc, #256]	; (800513c <TIM_Base_SetConfig+0x114>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005046:	d00f      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a3d      	ldr	r2, [pc, #244]	; (8005140 <TIM_Base_SetConfig+0x118>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00b      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a3c      	ldr	r2, [pc, #240]	; (8005144 <TIM_Base_SetConfig+0x11c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a3b      	ldr	r2, [pc, #236]	; (8005148 <TIM_Base_SetConfig+0x120>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3a      	ldr	r2, [pc, #232]	; (800514c <TIM_Base_SetConfig+0x124>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d108      	bne.n	800507a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a2f      	ldr	r2, [pc, #188]	; (800513c <TIM_Base_SetConfig+0x114>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d02b      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d027      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2c      	ldr	r2, [pc, #176]	; (8005140 <TIM_Base_SetConfig+0x118>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d023      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2b      	ldr	r2, [pc, #172]	; (8005144 <TIM_Base_SetConfig+0x11c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01f      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a2a      	ldr	r2, [pc, #168]	; (8005148 <TIM_Base_SetConfig+0x120>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01b      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a29      	ldr	r2, [pc, #164]	; (800514c <TIM_Base_SetConfig+0x124>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d017      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a28      	ldr	r2, [pc, #160]	; (8005150 <TIM_Base_SetConfig+0x128>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a27      	ldr	r2, [pc, #156]	; (8005154 <TIM_Base_SetConfig+0x12c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00f      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a26      	ldr	r2, [pc, #152]	; (8005158 <TIM_Base_SetConfig+0x130>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00b      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a25      	ldr	r2, [pc, #148]	; (800515c <TIM_Base_SetConfig+0x134>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d007      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a24      	ldr	r2, [pc, #144]	; (8005160 <TIM_Base_SetConfig+0x138>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a23      	ldr	r2, [pc, #140]	; (8005164 <TIM_Base_SetConfig+0x13c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d108      	bne.n	80050ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a0a      	ldr	r2, [pc, #40]	; (800513c <TIM_Base_SetConfig+0x114>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_Base_SetConfig+0xf8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a0c      	ldr	r2, [pc, #48]	; (800514c <TIM_Base_SetConfig+0x124>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d103      	bne.n	8005128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	615a      	str	r2, [r3, #20]
}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40010000 	.word	0x40010000
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40000c00 	.word	0x40000c00
 800514c:	40010400 	.word	0x40010400
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800
 800515c:	40001800 	.word	0x40001800
 8005160:	40001c00 	.word	0x40001c00
 8005164:	40002000 	.word	0x40002000

08005168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e03f      	b.n	8005222 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fd fc68 	bl	8002a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2224      	movs	r2, #36	; 0x24
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fc7b 	bl	8005ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695a      	ldr	r2, [r3, #20]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b0ba      	sub	sp, #232	; 0xe8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005252:	2300      	movs	r3, #0
 8005254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005258:	2300      	movs	r3, #0
 800525a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800526a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <HAL_UART_IRQHandler+0x66>
 800527e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fb65 	bl	800595a <UART_Receive_IT>
      return;
 8005290:	e256      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80de 	beq.w	8005458 <HAL_UART_IRQHandler+0x22c>
 800529c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80d1 	beq.w	8005458 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00b      	beq.n	80052da <HAL_UART_IRQHandler+0xae>
 80052c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f043 0201 	orr.w	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <HAL_UART_IRQHandler+0xd2>
 80052e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f043 0202 	orr.w	r2, r3, #2
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <HAL_UART_IRQHandler+0xf6>
 800530a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f043 0204 	orr.w	r2, r3, #4
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d011      	beq.n	8005352 <HAL_UART_IRQHandler+0x126>
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d105      	bne.n	8005346 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800533a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f043 0208 	orr.w	r2, r3, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 81ed 	beq.w	8005736 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800535c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_UART_IRQHandler+0x14e>
 8005368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 faf0 	bl	800595a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <HAL_UART_IRQHandler+0x17a>
 800539e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d04f      	beq.n	8005446 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f9f8 	bl	800579c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d141      	bne.n	800543e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3314      	adds	r3, #20
 80053c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3314      	adds	r3, #20
 80053e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1d9      	bne.n	80053ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	2b00      	cmp	r3, #0
 800540c:	d013      	beq.n	8005436 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	4a7d      	ldr	r2, [pc, #500]	; (8005608 <HAL_UART_IRQHandler+0x3dc>)
 8005414:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	4618      	mov	r0, r3
 800541c:	f7fd fe40 	bl	80030a0 <HAL_DMA_Abort_IT>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d016      	beq.n	8005454 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	e00e      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f99a 	bl	8005770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	e00a      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f996 	bl	8005770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	e006      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f992 	bl	8005770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005452:	e170      	b.n	8005736 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	bf00      	nop
    return;
 8005456:	e16e      	b.n	8005736 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	2b01      	cmp	r3, #1
 800545e:	f040 814a 	bne.w	80056f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8143 	beq.w	80056f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 813c 	beq.w	80056f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800547e:	2300      	movs	r3, #0
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	f040 80b4 	bne.w	800560c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8140 	beq.w	800573a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054c2:	429a      	cmp	r2, r3
 80054c4:	f080 8139 	bcs.w	800573a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054da:	f000 8088 	beq.w	80055ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	330c      	adds	r3, #12
 80054e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800550a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800550e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005516:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1d9      	bne.n	80054de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3314      	adds	r3, #20
 8005530:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800553a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3314      	adds	r3, #20
 800554a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800554e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005552:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005556:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e1      	bne.n	800552a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3314      	adds	r3, #20
 800556c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800557c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3314      	adds	r3, #20
 8005586:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800558a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800558c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005590:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e3      	bne.n	8005566 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055be:	f023 0310 	bic.w	r3, r3, #16
 80055c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80055d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e3      	bne.n	80055ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fd fce9 	bl	8002fc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8c0 	bl	8005784 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005604:	e099      	b.n	800573a <HAL_UART_IRQHandler+0x50e>
 8005606:	bf00      	nop
 8005608:	08005863 	.word	0x08005863
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005614:	b29b      	uxth	r3, r3
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 808b 	beq.w	800573e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005628:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8086 	beq.w	800573e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005648:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005656:	647a      	str	r2, [r7, #68]	; 0x44
 8005658:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800565c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e3      	bne.n	8005632 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3314      	adds	r3, #20
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	623b      	str	r3, [r7, #32]
   return(result);
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3314      	adds	r3, #20
 800568a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800568e:	633a      	str	r2, [r7, #48]	; 0x30
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e3      	bne.n	800566a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	60fb      	str	r3, [r7, #12]
   return(result);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0310 	bic.w	r3, r3, #16
 80056c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	330c      	adds	r3, #12
 80056d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056d4:	61fa      	str	r2, [r7, #28]
 80056d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	69b9      	ldr	r1, [r7, #24]
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	617b      	str	r3, [r7, #20]
   return(result);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e3      	bne.n	80056b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f848 	bl	8005784 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056f4:	e023      	b.n	800573e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <HAL_UART_IRQHandler+0x4ea>
 8005702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f8bb 	bl	800588a <UART_Transmit_IT>
    return;
 8005714:	e014      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00e      	beq.n	8005740 <HAL_UART_IRQHandler+0x514>
 8005722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d008      	beq.n	8005740 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f8fb 	bl	800592a <UART_EndTransmit_IT>
    return;
 8005734:	e004      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
    return;
 8005736:	bf00      	nop
 8005738:	e002      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
      return;
 800573a:	bf00      	nop
 800573c:	e000      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
      return;
 800573e:	bf00      	nop
  }
}
 8005740:	37e8      	adds	r7, #232	; 0xe8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop

08005748 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b095      	sub	sp, #84	; 0x54
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	330c      	adds	r3, #12
 80057c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057c4:	643a      	str	r2, [r7, #64]	; 0x40
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e5      	bne.n	80057a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3314      	adds	r3, #20
 80057de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3314      	adds	r3, #20
 80057f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e5      	bne.n	80057d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005810:	2b01      	cmp	r3, #1
 8005812:	d119      	bne.n	8005848 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	330c      	adds	r3, #12
 800581a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	60bb      	str	r3, [r7, #8]
   return(result);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f023 0310 	bic.w	r3, r3, #16
 800582a:	647b      	str	r3, [r7, #68]	; 0x44
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	330c      	adds	r3, #12
 8005832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005834:	61ba      	str	r2, [r7, #24]
 8005836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6979      	ldr	r1, [r7, #20]
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	613b      	str	r3, [r7, #16]
   return(result);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e5      	bne.n	8005814 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005856:	bf00      	nop
 8005858:	3754      	adds	r7, #84	; 0x54
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff ff77 	bl	8005770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005882:	bf00      	nop
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800588a:	b480      	push	{r7}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b21      	cmp	r3, #33	; 0x21
 800589c:	d13e      	bne.n	800591c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a6:	d114      	bne.n	80058d2 <UART_Transmit_IT+0x48>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d110      	bne.n	80058d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	1c9a      	adds	r2, r3, #2
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	621a      	str	r2, [r3, #32]
 80058d0:	e008      	b.n	80058e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	1c59      	adds	r1, r3, #1
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6211      	str	r1, [r2, #32]
 80058dc:	781a      	ldrb	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4619      	mov	r1, r3
 80058f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10f      	bne.n	8005918 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005906:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005916:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	e000      	b.n	800591e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800591c:	2302      	movs	r3, #2
  }
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005940:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff fefc 	bl	8005748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b08c      	sub	sp, #48	; 0x30
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b22      	cmp	r3, #34	; 0x22
 800596c:	f040 80ab 	bne.w	8005ac6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005978:	d117      	bne.n	80059aa <UART_Receive_IT+0x50>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d113      	bne.n	80059aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	b29b      	uxth	r3, r3
 8005994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005998:	b29a      	uxth	r2, r3
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	1c9a      	adds	r2, r3, #2
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	629a      	str	r2, [r3, #40]	; 0x28
 80059a8:	e026      	b.n	80059f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059bc:	d007      	beq.n	80059ce <UART_Receive_IT+0x74>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <UART_Receive_IT+0x82>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	e008      	b.n	80059ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	4619      	mov	r1, r3
 8005a06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d15a      	bne.n	8005ac2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0220 	bic.w	r2, r2, #32
 8005a1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695a      	ldr	r2, [r3, #20]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d135      	bne.n	8005ab8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	613b      	str	r3, [r7, #16]
   return(result);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f023 0310 	bic.w	r3, r3, #16
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a72:	623a      	str	r2, [r7, #32]
 8005a74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	69f9      	ldr	r1, [r7, #28]
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e5      	bne.n	8005a52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d10a      	bne.n	8005aaa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff fe67 	bl	8005784 <HAL_UARTEx_RxEventCallback>
 8005ab6:	e002      	b.n	8005abe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff fe4f 	bl	800575c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e002      	b.n	8005ac8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e000      	b.n	8005ac8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005ac6:	2302      	movs	r3, #2
  }
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3730      	adds	r7, #48	; 0x30
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ad4:	b0c0      	sub	sp, #256	; 0x100
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aec:	68d9      	ldr	r1, [r3, #12]
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	ea40 0301 	orr.w	r3, r0, r1
 8005af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b28:	f021 010c 	bic.w	r1, r1, #12
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b36:	430b      	orrs	r3, r1
 8005b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4a:	6999      	ldr	r1, [r3, #24]
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	ea40 0301 	orr.w	r3, r0, r1
 8005b56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b8f      	ldr	r3, [pc, #572]	; (8005d9c <UART_SetConfig+0x2cc>)
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d005      	beq.n	8005b70 <UART_SetConfig+0xa0>
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	4b8d      	ldr	r3, [pc, #564]	; (8005da0 <UART_SetConfig+0x2d0>)
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d104      	bne.n	8005b7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b70:	f7fe f952 	bl	8003e18 <HAL_RCC_GetPCLK2Freq>
 8005b74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b78:	e003      	b.n	8005b82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b7a:	f7fe f939 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 8005b7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b8c:	f040 810c 	bne.w	8005da8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b94:	2200      	movs	r2, #0
 8005b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	462b      	mov	r3, r5
 8005ba6:	1891      	adds	r1, r2, r2
 8005ba8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005baa:	415b      	adcs	r3, r3
 8005bac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	eb12 0801 	adds.w	r8, r2, r1
 8005bb8:	4629      	mov	r1, r5
 8005bba:	eb43 0901 	adc.w	r9, r3, r1
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bd2:	4690      	mov	r8, r2
 8005bd4:	4699      	mov	r9, r3
 8005bd6:	4623      	mov	r3, r4
 8005bd8:	eb18 0303 	adds.w	r3, r8, r3
 8005bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005be0:	462b      	mov	r3, r5
 8005be2:	eb49 0303 	adc.w	r3, r9, r3
 8005be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bfe:	460b      	mov	r3, r1
 8005c00:	18db      	adds	r3, r3, r3
 8005c02:	653b      	str	r3, [r7, #80]	; 0x50
 8005c04:	4613      	mov	r3, r2
 8005c06:	eb42 0303 	adc.w	r3, r2, r3
 8005c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c14:	f7fa faec 	bl	80001f0 <__aeabi_uldivmod>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4b61      	ldr	r3, [pc, #388]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	011c      	lsls	r4, r3, #4
 8005c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c38:	4642      	mov	r2, r8
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	1891      	adds	r1, r2, r2
 8005c3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c40:	415b      	adcs	r3, r3
 8005c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c48:	4641      	mov	r1, r8
 8005c4a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c4e:	4649      	mov	r1, r9
 8005c50:	eb43 0b01 	adc.w	fp, r3, r1
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c68:	4692      	mov	sl, r2
 8005c6a:	469b      	mov	fp, r3
 8005c6c:	4643      	mov	r3, r8
 8005c6e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c76:	464b      	mov	r3, r9
 8005c78:	eb4b 0303 	adc.w	r3, fp, r3
 8005c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c94:	460b      	mov	r3, r1
 8005c96:	18db      	adds	r3, r3, r3
 8005c98:	643b      	str	r3, [r7, #64]	; 0x40
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005caa:	f7fa faa1 	bl	80001f0 <__aeabi_uldivmod>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4b3b      	ldr	r3, [pc, #236]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	2264      	movs	r2, #100	; 0x64
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	1acb      	subs	r3, r1, r3
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cca:	4b36      	ldr	r3, [pc, #216]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cd8:	441c      	add	r4, r3
 8005cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ce4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ce8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cec:	4642      	mov	r2, r8
 8005cee:	464b      	mov	r3, r9
 8005cf0:	1891      	adds	r1, r2, r2
 8005cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cf4:	415b      	adcs	r3, r3
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cfc:	4641      	mov	r1, r8
 8005cfe:	1851      	adds	r1, r2, r1
 8005d00:	6339      	str	r1, [r7, #48]	; 0x30
 8005d02:	4649      	mov	r1, r9
 8005d04:	414b      	adcs	r3, r1
 8005d06:	637b      	str	r3, [r7, #52]	; 0x34
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d14:	4659      	mov	r1, fp
 8005d16:	00cb      	lsls	r3, r1, #3
 8005d18:	4651      	mov	r1, sl
 8005d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d1e:	4651      	mov	r1, sl
 8005d20:	00ca      	lsls	r2, r1, #3
 8005d22:	4610      	mov	r0, r2
 8005d24:	4619      	mov	r1, r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	4642      	mov	r2, r8
 8005d2a:	189b      	adds	r3, r3, r2
 8005d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d30:	464b      	mov	r3, r9
 8005d32:	460a      	mov	r2, r1
 8005d34:	eb42 0303 	adc.w	r3, r2, r3
 8005d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d50:	460b      	mov	r3, r1
 8005d52:	18db      	adds	r3, r3, r3
 8005d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d56:	4613      	mov	r3, r2
 8005d58:	eb42 0303 	adc.w	r3, r2, r3
 8005d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d66:	f7fa fa43 	bl	80001f0 <__aeabi_uldivmod>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005d70:	fba3 1302 	umull	r1, r3, r3, r2
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	2164      	movs	r1, #100	; 0x64
 8005d78:	fb01 f303 	mul.w	r3, r1, r3
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	3332      	adds	r3, #50	; 0x32
 8005d82:	4a08      	ldr	r2, [pc, #32]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005d84:	fba2 2303 	umull	r2, r3, r2, r3
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	f003 0207 	and.w	r2, r3, #7
 8005d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4422      	add	r2, r4
 8005d96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d98:	e106      	b.n	8005fa8 <UART_SetConfig+0x4d8>
 8005d9a:	bf00      	nop
 8005d9c:	40011000 	.word	0x40011000
 8005da0:	40011400 	.word	0x40011400
 8005da4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005db2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005db6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005dba:	4642      	mov	r2, r8
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	1891      	adds	r1, r2, r2
 8005dc0:	6239      	str	r1, [r7, #32]
 8005dc2:	415b      	adcs	r3, r3
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dca:	4641      	mov	r1, r8
 8005dcc:	1854      	adds	r4, r2, r1
 8005dce:	4649      	mov	r1, r9
 8005dd0:	eb43 0501 	adc.w	r5, r3, r1
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	00eb      	lsls	r3, r5, #3
 8005dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005de2:	00e2      	lsls	r2, r4, #3
 8005de4:	4614      	mov	r4, r2
 8005de6:	461d      	mov	r5, r3
 8005de8:	4643      	mov	r3, r8
 8005dea:	18e3      	adds	r3, r4, r3
 8005dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005df0:	464b      	mov	r3, r9
 8005df2:	eb45 0303 	adc.w	r3, r5, r3
 8005df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e16:	4629      	mov	r1, r5
 8005e18:	008b      	lsls	r3, r1, #2
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e20:	4621      	mov	r1, r4
 8005e22:	008a      	lsls	r2, r1, #2
 8005e24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e28:	f7fa f9e2 	bl	80001f0 <__aeabi_uldivmod>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4b60      	ldr	r3, [pc, #384]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005e32:	fba3 2302 	umull	r2, r3, r3, r2
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	011c      	lsls	r4, r3, #4
 8005e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	464b      	mov	r3, r9
 8005e50:	1891      	adds	r1, r2, r2
 8005e52:	61b9      	str	r1, [r7, #24]
 8005e54:	415b      	adcs	r3, r3
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e5c:	4641      	mov	r1, r8
 8005e5e:	1851      	adds	r1, r2, r1
 8005e60:	6139      	str	r1, [r7, #16]
 8005e62:	4649      	mov	r1, r9
 8005e64:	414b      	adcs	r3, r1
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e74:	4659      	mov	r1, fp
 8005e76:	00cb      	lsls	r3, r1, #3
 8005e78:	4651      	mov	r1, sl
 8005e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e7e:	4651      	mov	r1, sl
 8005e80:	00ca      	lsls	r2, r1, #3
 8005e82:	4610      	mov	r0, r2
 8005e84:	4619      	mov	r1, r3
 8005e86:	4603      	mov	r3, r0
 8005e88:	4642      	mov	r2, r8
 8005e8a:	189b      	adds	r3, r3, r2
 8005e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e90:	464b      	mov	r3, r9
 8005e92:	460a      	mov	r2, r1
 8005e94:	eb42 0303 	adc.w	r3, r2, r3
 8005e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ea6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	f04f 0300 	mov.w	r3, #0
 8005eb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	008b      	lsls	r3, r1, #2
 8005eb8:	4641      	mov	r1, r8
 8005eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	008a      	lsls	r2, r1, #2
 8005ec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ec6:	f7fa f993 	bl	80001f0 <__aeabi_uldivmod>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	2264      	movs	r2, #100	; 0x64
 8005eda:	fb02 f303 	mul.w	r3, r2, r3
 8005ede:	1acb      	subs	r3, r1, r3
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	3332      	adds	r3, #50	; 0x32
 8005ee4:	4a33      	ldr	r2, [pc, #204]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ef0:	441c      	add	r4, r3
 8005ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	673b      	str	r3, [r7, #112]	; 0x70
 8005efa:	677a      	str	r2, [r7, #116]	; 0x74
 8005efc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f00:	4642      	mov	r2, r8
 8005f02:	464b      	mov	r3, r9
 8005f04:	1891      	adds	r1, r2, r2
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	415b      	adcs	r3, r3
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f10:	4641      	mov	r1, r8
 8005f12:	1851      	adds	r1, r2, r1
 8005f14:	6039      	str	r1, [r7, #0]
 8005f16:	4649      	mov	r1, r9
 8005f18:	414b      	adcs	r3, r1
 8005f1a:	607b      	str	r3, [r7, #4]
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f28:	4659      	mov	r1, fp
 8005f2a:	00cb      	lsls	r3, r1, #3
 8005f2c:	4651      	mov	r1, sl
 8005f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f32:	4651      	mov	r1, sl
 8005f34:	00ca      	lsls	r2, r1, #3
 8005f36:	4610      	mov	r0, r2
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	4642      	mov	r2, r8
 8005f3e:	189b      	adds	r3, r3, r2
 8005f40:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f42:	464b      	mov	r3, r9
 8005f44:	460a      	mov	r2, r1
 8005f46:	eb42 0303 	adc.w	r3, r2, r3
 8005f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	663b      	str	r3, [r7, #96]	; 0x60
 8005f56:	667a      	str	r2, [r7, #100]	; 0x64
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	f04f 0300 	mov.w	r3, #0
 8005f60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f64:	4649      	mov	r1, r9
 8005f66:	008b      	lsls	r3, r1, #2
 8005f68:	4641      	mov	r1, r8
 8005f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f6e:	4641      	mov	r1, r8
 8005f70:	008a      	lsls	r2, r1, #2
 8005f72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f76:	f7fa f93b 	bl	80001f0 <__aeabi_uldivmod>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005f80:	fba3 1302 	umull	r1, r3, r3, r2
 8005f84:	095b      	lsrs	r3, r3, #5
 8005f86:	2164      	movs	r1, #100	; 0x64
 8005f88:	fb01 f303 	mul.w	r3, r1, r3
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	011b      	lsls	r3, r3, #4
 8005f90:	3332      	adds	r3, #50	; 0x32
 8005f92:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005f94:	fba2 2303 	umull	r2, r3, r2, r3
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	f003 020f 	and.w	r2, r3, #15
 8005f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4422      	add	r2, r4
 8005fa6:	609a      	str	r2, [r3, #8]
}
 8005fa8:	bf00      	nop
 8005faa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fb4:	51eb851f 	.word	0x51eb851f

08005fb8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fca:	2b84      	cmp	r3, #132	; 0x84
 8005fcc:	d005      	beq.n	8005fda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005fce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	3303      	adds	r3, #3
 8005fd8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005fda:	68fb      	ldr	r3, [r7, #12]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005fec:	f000 faf6 	bl	80065dc <vTaskStartScheduler>
  
  return osOK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ff8:	b089      	sub	sp, #36	; 0x24
 8005ffa:	af04      	add	r7, sp, #16
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d020      	beq.n	800604a <osThreadCreate+0x54>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01c      	beq.n	800604a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685c      	ldr	r4, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691e      	ldr	r6, [r3, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff ffc8 	bl	8005fb8 <makeFreeRtosPriority>
 8006028:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006032:	9202      	str	r2, [sp, #8]
 8006034:	9301      	str	r3, [sp, #4]
 8006036:	9100      	str	r1, [sp, #0]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	4632      	mov	r2, r6
 800603c:	4629      	mov	r1, r5
 800603e:	4620      	mov	r0, r4
 8006040:	f000 f8ed 	bl	800621e <xTaskCreateStatic>
 8006044:	4603      	mov	r3, r0
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	e01c      	b.n	8006084 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685c      	ldr	r4, [r3, #4]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006056:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff ffaa 	bl	8005fb8 <makeFreeRtosPriority>
 8006064:	4602      	mov	r2, r0
 8006066:	f107 030c 	add.w	r3, r7, #12
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	9200      	str	r2, [sp, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	4632      	mov	r2, r6
 8006072:	4629      	mov	r1, r5
 8006074:	4620      	mov	r0, r4
 8006076:	f000 f92f 	bl	80062d8 <xTaskCreate>
 800607a:	4603      	mov	r3, r0
 800607c:	2b01      	cmp	r3, #1
 800607e:	d001      	beq.n	8006084 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006080:	2300      	movs	r3, #0
 8006082:	e000      	b.n	8006086 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006084:	68fb      	ldr	r3, [r7, #12]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800608e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b084      	sub	sp, #16
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <osDelay+0x16>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	e000      	b.n	80060a6 <osDelay+0x18>
 80060a4:	2301      	movs	r3, #1
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 fa64 	bl	8006574 <vTaskDelay>
  
  return osOK;
 80060ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f103 0208 	add.w	r2, r3, #8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f04f 32ff 	mov.w	r2, #4294967295
 80060ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f103 0208 	add.w	r2, r3, #8
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f103 0208 	add.w	r2, r3, #8
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	601a      	str	r2, [r3, #0]
}
 800614c:	bf00      	nop
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616e:	d103      	bne.n	8006178 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	e00c      	b.n	8006192 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3308      	adds	r3, #8
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	e002      	b.n	8006186 <vListInsert+0x2e>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	429a      	cmp	r2, r3
 8006190:	d2f6      	bcs.n	8006180 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	601a      	str	r2, [r3, #0]
}
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061ca:	b480      	push	{r7}
 80061cc:	b085      	sub	sp, #20
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6892      	ldr	r2, [r2, #8]
 80061e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6852      	ldr	r2, [r2, #4]
 80061ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d103      	bne.n	80061fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	1e5a      	subs	r2, r3, #1
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800621e:	b580      	push	{r7, lr}
 8006220:	b08e      	sub	sp, #56	; 0x38
 8006222:	af04      	add	r7, sp, #16
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
 800622a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006244:	bf00      	nop
 8006246:	e7fe      	b.n	8006246 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10a      	bne.n	8006264 <xTaskCreateStatic+0x46>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	61fb      	str	r3, [r7, #28]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006264:	23a0      	movs	r3, #160	; 0xa0
 8006266:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2ba0      	cmp	r3, #160	; 0xa0
 800626c:	d00a      	beq.n	8006284 <xTaskCreateStatic+0x66>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	61bb      	str	r3, [r7, #24]
}
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006284:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01e      	beq.n	80062ca <xTaskCreateStatic+0xac>
 800628c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01b      	beq.n	80062ca <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800629a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062a4:	2300      	movs	r3, #0
 80062a6:	9303      	str	r3, [sp, #12]
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	9302      	str	r3, [sp, #8]
 80062ac:	f107 0314 	add.w	r3, r7, #20
 80062b0:	9301      	str	r3, [sp, #4]
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f851 	bl	8006364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062c4:	f000 f8ec 	bl	80064a0 <prvAddNewTaskToReadyList>
 80062c8:	e001      	b.n	80062ce <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062ce:	697b      	ldr	r3, [r7, #20]
	}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3728      	adds	r7, #40	; 0x28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08c      	sub	sp, #48	; 0x30
 80062dc:	af04      	add	r7, sp, #16
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	4613      	mov	r3, r2
 80062e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062e8:	88fb      	ldrh	r3, [r7, #6]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 fef3 	bl	80070d8 <pvPortMalloc>
 80062f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00e      	beq.n	8006318 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062fa:	20a0      	movs	r0, #160	; 0xa0
 80062fc:	f000 feec 	bl	80070d8 <pvPortMalloc>
 8006300:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	631a      	str	r2, [r3, #48]	; 0x30
 800630e:	e005      	b.n	800631c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006310:	6978      	ldr	r0, [r7, #20]
 8006312:	f000 ffad 	bl	8007270 <vPortFree>
 8006316:	e001      	b.n	800631c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d017      	beq.n	8006352 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	2300      	movs	r3, #0
 800632e:	9303      	str	r3, [sp, #12]
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	9302      	str	r3, [sp, #8]
 8006334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 f80f 	bl	8006364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006346:	69f8      	ldr	r0, [r7, #28]
 8006348:	f000 f8aa 	bl	80064a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800634c:	2301      	movs	r3, #1
 800634e:	61bb      	str	r3, [r7, #24]
 8006350:	e002      	b.n	8006358 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006352:	f04f 33ff 	mov.w	r3, #4294967295
 8006356:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006358:	69bb      	ldr	r3, [r7, #24]
	}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800637c:	3b01      	subs	r3, #1
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	f023 0307 	bic.w	r3, r3, #7
 800638a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <prvInitialiseNewTask+0x48>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	617b      	str	r3, [r7, #20]
}
 80063a8:	bf00      	nop
 80063aa:	e7fe      	b.n	80063aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01f      	beq.n	80063f2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063b2:	2300      	movs	r3, #0
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	e012      	b.n	80063de <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	7819      	ldrb	r1, [r3, #0]
 80063c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	4413      	add	r3, r2
 80063c6:	3334      	adds	r3, #52	; 0x34
 80063c8:	460a      	mov	r2, r1
 80063ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d006      	beq.n	80063e6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	3301      	adds	r3, #1
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	2b0f      	cmp	r3, #15
 80063e2:	d9e9      	bls.n	80063b8 <prvInitialiseNewTask+0x54>
 80063e4:	e000      	b.n	80063e8 <prvInitialiseNewTask+0x84>
			{
				break;
 80063e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063f0:	e003      	b.n	80063fa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	2b06      	cmp	r3, #6
 80063fe:	d901      	bls.n	8006404 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006400:	2306      	movs	r3, #6
 8006402:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006408:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800640e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	2200      	movs	r2, #0
 8006414:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	3304      	adds	r3, #4
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff fe6b 	bl	80060f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	3318      	adds	r3, #24
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff fe66 	bl	80060f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800642e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	f1c3 0207 	rsb	r2, r3, #7
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800643e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	2200      	movs	r2, #0
 8006444:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	2200      	movs	r2, #0
 800644c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	334c      	adds	r3, #76	; 0x4c
 8006454:	224c      	movs	r2, #76	; 0x4c
 8006456:	2100      	movs	r1, #0
 8006458:	4618      	mov	r0, r3
 800645a:	f001 f827 	bl	80074ac <memset>
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	4a0c      	ldr	r2, [pc, #48]	; (8006494 <prvInitialiseNewTask+0x130>)
 8006462:	651a      	str	r2, [r3, #80]	; 0x50
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	4a0c      	ldr	r2, [pc, #48]	; (8006498 <prvInitialiseNewTask+0x134>)
 8006468:	655a      	str	r2, [r3, #84]	; 0x54
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	4a0b      	ldr	r2, [pc, #44]	; (800649c <prvInitialiseNewTask+0x138>)
 800646e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	68f9      	ldr	r1, [r7, #12]
 8006474:	69b8      	ldr	r0, [r7, #24]
 8006476:	f000 fc1f 	bl	8006cb8 <pxPortInitialiseStack>
 800647a:	4602      	mov	r2, r0
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800648a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800648c:	bf00      	nop
 800648e:	3720      	adds	r7, #32
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20004378 	.word	0x20004378
 8006498:	200043e0 	.word	0x200043e0
 800649c:	20004448 	.word	0x20004448

080064a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064a8:	f000 fd34 	bl	8006f14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064ac:	4b2a      	ldr	r3, [pc, #168]	; (8006558 <prvAddNewTaskToReadyList+0xb8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3301      	adds	r3, #1
 80064b2:	4a29      	ldr	r2, [pc, #164]	; (8006558 <prvAddNewTaskToReadyList+0xb8>)
 80064b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064b6:	4b29      	ldr	r3, [pc, #164]	; (800655c <prvAddNewTaskToReadyList+0xbc>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064be:	4a27      	ldr	r2, [pc, #156]	; (800655c <prvAddNewTaskToReadyList+0xbc>)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064c4:	4b24      	ldr	r3, [pc, #144]	; (8006558 <prvAddNewTaskToReadyList+0xb8>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d110      	bne.n	80064ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064cc:	f000 facc 	bl	8006a68 <prvInitialiseTaskLists>
 80064d0:	e00d      	b.n	80064ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064d2:	4b23      	ldr	r3, [pc, #140]	; (8006560 <prvAddNewTaskToReadyList+0xc0>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d109      	bne.n	80064ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064da:	4b20      	ldr	r3, [pc, #128]	; (800655c <prvAddNewTaskToReadyList+0xbc>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d802      	bhi.n	80064ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064e8:	4a1c      	ldr	r2, [pc, #112]	; (800655c <prvAddNewTaskToReadyList+0xbc>)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064ee:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <prvAddNewTaskToReadyList+0xc4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3301      	adds	r3, #1
 80064f4:	4a1b      	ldr	r2, [pc, #108]	; (8006564 <prvAddNewTaskToReadyList+0xc4>)
 80064f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	2201      	movs	r2, #1
 80064fe:	409a      	lsls	r2, r3
 8006500:	4b19      	ldr	r3, [pc, #100]	; (8006568 <prvAddNewTaskToReadyList+0xc8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4313      	orrs	r3, r2
 8006506:	4a18      	ldr	r2, [pc, #96]	; (8006568 <prvAddNewTaskToReadyList+0xc8>)
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4a15      	ldr	r2, [pc, #84]	; (800656c <prvAddNewTaskToReadyList+0xcc>)
 8006518:	441a      	add	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3304      	adds	r3, #4
 800651e:	4619      	mov	r1, r3
 8006520:	4610      	mov	r0, r2
 8006522:	f7ff fdf5 	bl	8006110 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006526:	f000 fd25 	bl	8006f74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800652a:	4b0d      	ldr	r3, [pc, #52]	; (8006560 <prvAddNewTaskToReadyList+0xc0>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00e      	beq.n	8006550 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006532:	4b0a      	ldr	r3, [pc, #40]	; (800655c <prvAddNewTaskToReadyList+0xbc>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	429a      	cmp	r2, r3
 800653e:	d207      	bcs.n	8006550 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <prvAddNewTaskToReadyList+0xd0>)
 8006542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20000724 	.word	0x20000724
 800655c:	20000624 	.word	0x20000624
 8006560:	20000730 	.word	0x20000730
 8006564:	20000740 	.word	0x20000740
 8006568:	2000072c 	.word	0x2000072c
 800656c:	20000628 	.word	0x20000628
 8006570:	e000ed04 	.word	0xe000ed04

08006574 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d017      	beq.n	80065b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006586:	4b13      	ldr	r3, [pc, #76]	; (80065d4 <vTaskDelay+0x60>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <vTaskDelay+0x30>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	60bb      	str	r3, [r7, #8]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065a4:	f000 f884 	bl	80066b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065a8:	2100      	movs	r1, #0
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fb1e 	bl	8006bec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065b0:	f000 f88c 	bl	80066cc <xTaskResumeAll>
 80065b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d107      	bne.n	80065cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80065bc:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <vTaskDelay+0x64>)
 80065be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	2000074c 	.word	0x2000074c
 80065d8:	e000ed04 	.word	0xe000ed04

080065dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08a      	sub	sp, #40	; 0x28
 80065e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065ea:	463a      	mov	r2, r7
 80065ec:	1d39      	adds	r1, r7, #4
 80065ee:	f107 0308 	add.w	r3, r7, #8
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fb fc0a 	bl	8001e0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	9202      	str	r2, [sp, #8]
 8006600:	9301      	str	r3, [sp, #4]
 8006602:	2300      	movs	r3, #0
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	2300      	movs	r3, #0
 8006608:	460a      	mov	r2, r1
 800660a:	4921      	ldr	r1, [pc, #132]	; (8006690 <vTaskStartScheduler+0xb4>)
 800660c:	4821      	ldr	r0, [pc, #132]	; (8006694 <vTaskStartScheduler+0xb8>)
 800660e:	f7ff fe06 	bl	800621e <xTaskCreateStatic>
 8006612:	4603      	mov	r3, r0
 8006614:	4a20      	ldr	r2, [pc, #128]	; (8006698 <vTaskStartScheduler+0xbc>)
 8006616:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006618:	4b1f      	ldr	r3, [pc, #124]	; (8006698 <vTaskStartScheduler+0xbc>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006620:	2301      	movs	r3, #1
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	e001      	b.n	800662a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006626:	2300      	movs	r3, #0
 8006628:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d11b      	bne.n	8006668 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	613b      	str	r3, [r7, #16]
}
 8006642:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006644:	4b15      	ldr	r3, [pc, #84]	; (800669c <vTaskStartScheduler+0xc0>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	334c      	adds	r3, #76	; 0x4c
 800664a:	4a15      	ldr	r2, [pc, #84]	; (80066a0 <vTaskStartScheduler+0xc4>)
 800664c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800664e:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <vTaskStartScheduler+0xc8>)
 8006650:	f04f 32ff 	mov.w	r2, #4294967295
 8006654:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006656:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <vTaskStartScheduler+0xcc>)
 8006658:	2201      	movs	r2, #1
 800665a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800665c:	4b13      	ldr	r3, [pc, #76]	; (80066ac <vTaskStartScheduler+0xd0>)
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006662:	f000 fbb5 	bl	8006dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006666:	e00e      	b.n	8006686 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d10a      	bne.n	8006686 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <vTaskStartScheduler+0xa8>
}
 8006686:	bf00      	nop
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	0800771c 	.word	0x0800771c
 8006694:	08006a39 	.word	0x08006a39
 8006698:	20000748 	.word	0x20000748
 800669c:	20000624 	.word	0x20000624
 80066a0:	2000005c 	.word	0x2000005c
 80066a4:	20000744 	.word	0x20000744
 80066a8:	20000730 	.word	0x20000730
 80066ac:	20000728 	.word	0x20000728

080066b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066b4:	4b04      	ldr	r3, [pc, #16]	; (80066c8 <vTaskSuspendAll+0x18>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	4a03      	ldr	r2, [pc, #12]	; (80066c8 <vTaskSuspendAll+0x18>)
 80066bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066be:	bf00      	nop
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	2000074c 	.word	0x2000074c

080066cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066da:	4b41      	ldr	r3, [pc, #260]	; (80067e0 <xTaskResumeAll+0x114>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	603b      	str	r3, [r7, #0]
}
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066f8:	f000 fc0c 	bl	8006f14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066fc:	4b38      	ldr	r3, [pc, #224]	; (80067e0 <xTaskResumeAll+0x114>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3b01      	subs	r3, #1
 8006702:	4a37      	ldr	r2, [pc, #220]	; (80067e0 <xTaskResumeAll+0x114>)
 8006704:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006706:	4b36      	ldr	r3, [pc, #216]	; (80067e0 <xTaskResumeAll+0x114>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d161      	bne.n	80067d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800670e:	4b35      	ldr	r3, [pc, #212]	; (80067e4 <xTaskResumeAll+0x118>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d05d      	beq.n	80067d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006716:	e02e      	b.n	8006776 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006718:	4b33      	ldr	r3, [pc, #204]	; (80067e8 <xTaskResumeAll+0x11c>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3318      	adds	r3, #24
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff fd50 	bl	80061ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3304      	adds	r3, #4
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff fd4b 	bl	80061ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	2201      	movs	r2, #1
 800673a:	409a      	lsls	r2, r3
 800673c:	4b2b      	ldr	r3, [pc, #172]	; (80067ec <xTaskResumeAll+0x120>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4313      	orrs	r3, r2
 8006742:	4a2a      	ldr	r2, [pc, #168]	; (80067ec <xTaskResumeAll+0x120>)
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4a27      	ldr	r2, [pc, #156]	; (80067f0 <xTaskResumeAll+0x124>)
 8006754:	441a      	add	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3304      	adds	r3, #4
 800675a:	4619      	mov	r1, r3
 800675c:	4610      	mov	r0, r2
 800675e:	f7ff fcd7 	bl	8006110 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006766:	4b23      	ldr	r3, [pc, #140]	; (80067f4 <xTaskResumeAll+0x128>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	429a      	cmp	r2, r3
 800676e:	d302      	bcc.n	8006776 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006770:	4b21      	ldr	r3, [pc, #132]	; (80067f8 <xTaskResumeAll+0x12c>)
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006776:	4b1c      	ldr	r3, [pc, #112]	; (80067e8 <xTaskResumeAll+0x11c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1cc      	bne.n	8006718 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006784:	f000 fa12 	bl	8006bac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006788:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <xTaskResumeAll+0x130>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d010      	beq.n	80067b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006794:	f000 f836 	bl	8006804 <xTaskIncrementTick>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800679e:	4b16      	ldr	r3, [pc, #88]	; (80067f8 <xTaskResumeAll+0x12c>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1f1      	bne.n	8006794 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80067b0:	4b12      	ldr	r3, [pc, #72]	; (80067fc <xTaskResumeAll+0x130>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067b6:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <xTaskResumeAll+0x12c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d009      	beq.n	80067d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067be:	2301      	movs	r3, #1
 80067c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067c2:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <xTaskResumeAll+0x134>)
 80067c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067d2:	f000 fbcf 	bl	8006f74 <vPortExitCritical>

	return xAlreadyYielded;
 80067d6:	68bb      	ldr	r3, [r7, #8]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	2000074c 	.word	0x2000074c
 80067e4:	20000724 	.word	0x20000724
 80067e8:	200006e4 	.word	0x200006e4
 80067ec:	2000072c 	.word	0x2000072c
 80067f0:	20000628 	.word	0x20000628
 80067f4:	20000624 	.word	0x20000624
 80067f8:	20000738 	.word	0x20000738
 80067fc:	20000734 	.word	0x20000734
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800680a:	2300      	movs	r3, #0
 800680c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800680e:	4b4e      	ldr	r3, [pc, #312]	; (8006948 <xTaskIncrementTick+0x144>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	f040 808e 	bne.w	8006934 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006818:	4b4c      	ldr	r3, [pc, #304]	; (800694c <xTaskIncrementTick+0x148>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3301      	adds	r3, #1
 800681e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006820:	4a4a      	ldr	r2, [pc, #296]	; (800694c <xTaskIncrementTick+0x148>)
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d120      	bne.n	800686e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800682c:	4b48      	ldr	r3, [pc, #288]	; (8006950 <xTaskIncrementTick+0x14c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <xTaskIncrementTick+0x48>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	603b      	str	r3, [r7, #0]
}
 8006848:	bf00      	nop
 800684a:	e7fe      	b.n	800684a <xTaskIncrementTick+0x46>
 800684c:	4b40      	ldr	r3, [pc, #256]	; (8006950 <xTaskIncrementTick+0x14c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	4b40      	ldr	r3, [pc, #256]	; (8006954 <xTaskIncrementTick+0x150>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a3e      	ldr	r2, [pc, #248]	; (8006950 <xTaskIncrementTick+0x14c>)
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	4a3e      	ldr	r2, [pc, #248]	; (8006954 <xTaskIncrementTick+0x150>)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	4b3d      	ldr	r3, [pc, #244]	; (8006958 <xTaskIncrementTick+0x154>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3301      	adds	r3, #1
 8006866:	4a3c      	ldr	r2, [pc, #240]	; (8006958 <xTaskIncrementTick+0x154>)
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	f000 f99f 	bl	8006bac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800686e:	4b3b      	ldr	r3, [pc, #236]	; (800695c <xTaskIncrementTick+0x158>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	429a      	cmp	r2, r3
 8006876:	d348      	bcc.n	800690a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006878:	4b35      	ldr	r3, [pc, #212]	; (8006950 <xTaskIncrementTick+0x14c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d104      	bne.n	800688c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006882:	4b36      	ldr	r3, [pc, #216]	; (800695c <xTaskIncrementTick+0x158>)
 8006884:	f04f 32ff 	mov.w	r2, #4294967295
 8006888:	601a      	str	r2, [r3, #0]
					break;
 800688a:	e03e      	b.n	800690a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800688c:	4b30      	ldr	r3, [pc, #192]	; (8006950 <xTaskIncrementTick+0x14c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d203      	bcs.n	80068ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068a4:	4a2d      	ldr	r2, [pc, #180]	; (800695c <xTaskIncrementTick+0x158>)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068aa:	e02e      	b.n	800690a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff fc8a 	bl	80061ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	3318      	adds	r3, #24
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff fc81 	bl	80061ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	2201      	movs	r2, #1
 80068ce:	409a      	lsls	r2, r3
 80068d0:	4b23      	ldr	r3, [pc, #140]	; (8006960 <xTaskIncrementTick+0x15c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	4a22      	ldr	r2, [pc, #136]	; (8006960 <xTaskIncrementTick+0x15c>)
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068de:	4613      	mov	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4a1f      	ldr	r2, [pc, #124]	; (8006964 <xTaskIncrementTick+0x160>)
 80068e8:	441a      	add	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	3304      	adds	r3, #4
 80068ee:	4619      	mov	r1, r3
 80068f0:	4610      	mov	r0, r2
 80068f2:	f7ff fc0d 	bl	8006110 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fa:	4b1b      	ldr	r3, [pc, #108]	; (8006968 <xTaskIncrementTick+0x164>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	429a      	cmp	r2, r3
 8006902:	d3b9      	bcc.n	8006878 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006904:	2301      	movs	r3, #1
 8006906:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006908:	e7b6      	b.n	8006878 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800690a:	4b17      	ldr	r3, [pc, #92]	; (8006968 <xTaskIncrementTick+0x164>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006910:	4914      	ldr	r1, [pc, #80]	; (8006964 <xTaskIncrementTick+0x160>)
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	440b      	add	r3, r1
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d901      	bls.n	8006926 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006922:	2301      	movs	r3, #1
 8006924:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006926:	4b11      	ldr	r3, [pc, #68]	; (800696c <xTaskIncrementTick+0x168>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d007      	beq.n	800693e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800692e:	2301      	movs	r3, #1
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	e004      	b.n	800693e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006934:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <xTaskIncrementTick+0x16c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3301      	adds	r3, #1
 800693a:	4a0d      	ldr	r2, [pc, #52]	; (8006970 <xTaskIncrementTick+0x16c>)
 800693c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800693e:	697b      	ldr	r3, [r7, #20]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	2000074c 	.word	0x2000074c
 800694c:	20000728 	.word	0x20000728
 8006950:	200006dc 	.word	0x200006dc
 8006954:	200006e0 	.word	0x200006e0
 8006958:	2000073c 	.word	0x2000073c
 800695c:	20000744 	.word	0x20000744
 8006960:	2000072c 	.word	0x2000072c
 8006964:	20000628 	.word	0x20000628
 8006968:	20000624 	.word	0x20000624
 800696c:	20000738 	.word	0x20000738
 8006970:	20000734 	.word	0x20000734

08006974 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800697a:	4b29      	ldr	r3, [pc, #164]	; (8006a20 <vTaskSwitchContext+0xac>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006982:	4b28      	ldr	r3, [pc, #160]	; (8006a24 <vTaskSwitchContext+0xb0>)
 8006984:	2201      	movs	r2, #1
 8006986:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006988:	e044      	b.n	8006a14 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800698a:	4b26      	ldr	r3, [pc, #152]	; (8006a24 <vTaskSwitchContext+0xb0>)
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006990:	4b25      	ldr	r3, [pc, #148]	; (8006a28 <vTaskSwitchContext+0xb4>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	fab3 f383 	clz	r3, r3
 800699c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800699e:	7afb      	ldrb	r3, [r7, #11]
 80069a0:	f1c3 031f 	rsb	r3, r3, #31
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	4921      	ldr	r1, [pc, #132]	; (8006a2c <vTaskSwitchContext+0xb8>)
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	607b      	str	r3, [r7, #4]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <vTaskSwitchContext+0x5a>
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4a14      	ldr	r2, [pc, #80]	; (8006a2c <vTaskSwitchContext+0xb8>)
 80069dc:	4413      	add	r3, r2
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	605a      	str	r2, [r3, #4]
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	3308      	adds	r3, #8
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d104      	bne.n	8006a00 <vTaskSwitchContext+0x8c>
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	605a      	str	r2, [r3, #4]
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	4a0a      	ldr	r2, [pc, #40]	; (8006a30 <vTaskSwitchContext+0xbc>)
 8006a08:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a0a:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <vTaskSwitchContext+0xbc>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	334c      	adds	r3, #76	; 0x4c
 8006a10:	4a08      	ldr	r2, [pc, #32]	; (8006a34 <vTaskSwitchContext+0xc0>)
 8006a12:	6013      	str	r3, [r2, #0]
}
 8006a14:	bf00      	nop
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	2000074c 	.word	0x2000074c
 8006a24:	20000738 	.word	0x20000738
 8006a28:	2000072c 	.word	0x2000072c
 8006a2c:	20000628 	.word	0x20000628
 8006a30:	20000624 	.word	0x20000624
 8006a34:	2000005c 	.word	0x2000005c

08006a38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a40:	f000 f852 	bl	8006ae8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a44:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <prvIdleTask+0x28>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d9f9      	bls.n	8006a40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a4c:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <prvIdleTask+0x2c>)
 8006a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a5c:	e7f0      	b.n	8006a40 <prvIdleTask+0x8>
 8006a5e:	bf00      	nop
 8006a60:	20000628 	.word	0x20000628
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a6e:	2300      	movs	r3, #0
 8006a70:	607b      	str	r3, [r7, #4]
 8006a72:	e00c      	b.n	8006a8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4a12      	ldr	r2, [pc, #72]	; (8006ac8 <prvInitialiseTaskLists+0x60>)
 8006a80:	4413      	add	r3, r2
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff fb17 	bl	80060b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	607b      	str	r3, [r7, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b06      	cmp	r3, #6
 8006a92:	d9ef      	bls.n	8006a74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a94:	480d      	ldr	r0, [pc, #52]	; (8006acc <prvInitialiseTaskLists+0x64>)
 8006a96:	f7ff fb0e 	bl	80060b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a9a:	480d      	ldr	r0, [pc, #52]	; (8006ad0 <prvInitialiseTaskLists+0x68>)
 8006a9c:	f7ff fb0b 	bl	80060b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006aa0:	480c      	ldr	r0, [pc, #48]	; (8006ad4 <prvInitialiseTaskLists+0x6c>)
 8006aa2:	f7ff fb08 	bl	80060b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006aa6:	480c      	ldr	r0, [pc, #48]	; (8006ad8 <prvInitialiseTaskLists+0x70>)
 8006aa8:	f7ff fb05 	bl	80060b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006aac:	480b      	ldr	r0, [pc, #44]	; (8006adc <prvInitialiseTaskLists+0x74>)
 8006aae:	f7ff fb02 	bl	80060b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	; (8006ae0 <prvInitialiseTaskLists+0x78>)
 8006ab4:	4a05      	ldr	r2, [pc, #20]	; (8006acc <prvInitialiseTaskLists+0x64>)
 8006ab6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <prvInitialiseTaskLists+0x7c>)
 8006aba:	4a05      	ldr	r2, [pc, #20]	; (8006ad0 <prvInitialiseTaskLists+0x68>)
 8006abc:	601a      	str	r2, [r3, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000628 	.word	0x20000628
 8006acc:	200006b4 	.word	0x200006b4
 8006ad0:	200006c8 	.word	0x200006c8
 8006ad4:	200006e4 	.word	0x200006e4
 8006ad8:	200006f8 	.word	0x200006f8
 8006adc:	20000710 	.word	0x20000710
 8006ae0:	200006dc 	.word	0x200006dc
 8006ae4:	200006e0 	.word	0x200006e0

08006ae8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aee:	e019      	b.n	8006b24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006af0:	f000 fa10 	bl	8006f14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af4:	4b10      	ldr	r3, [pc, #64]	; (8006b38 <prvCheckTasksWaitingTermination+0x50>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff fb62 	bl	80061ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b06:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <prvCheckTasksWaitingTermination+0x54>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	4a0b      	ldr	r2, [pc, #44]	; (8006b3c <prvCheckTasksWaitingTermination+0x54>)
 8006b0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b10:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <prvCheckTasksWaitingTermination+0x58>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	4a0a      	ldr	r2, [pc, #40]	; (8006b40 <prvCheckTasksWaitingTermination+0x58>)
 8006b18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b1a:	f000 fa2b 	bl	8006f74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f810 	bl	8006b44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b24:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <prvCheckTasksWaitingTermination+0x58>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e1      	bne.n	8006af0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	200006f8 	.word	0x200006f8
 8006b3c:	20000724 	.word	0x20000724
 8006b40:	2000070c 	.word	0x2000070c

08006b44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	334c      	adds	r3, #76	; 0x4c
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 fcb3 	bl	80074bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d108      	bne.n	8006b72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fb83 	bl	8007270 <vPortFree>
				vPortFree( pxTCB );
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fb80 	bl	8007270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b70:	e018      	b.n	8006ba4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d103      	bne.n	8006b84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fb77 	bl	8007270 <vPortFree>
	}
 8006b82:	e00f      	b.n	8006ba4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d00a      	beq.n	8006ba4 <prvDeleteTCB+0x60>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	60fb      	str	r3, [r7, #12]
}
 8006ba0:	bf00      	nop
 8006ba2:	e7fe      	b.n	8006ba2 <prvDeleteTCB+0x5e>
	}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <prvResetNextTaskUnblockTime+0x38>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <prvResetNextTaskUnblockTime+0x3c>)
 8006bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bc4:	e008      	b.n	8006bd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc6:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <prvResetNextTaskUnblockTime+0x38>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	4a04      	ldr	r2, [pc, #16]	; (8006be8 <prvResetNextTaskUnblockTime+0x3c>)
 8006bd6:	6013      	str	r3, [r2, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	200006dc 	.word	0x200006dc
 8006be8:	20000744 	.word	0x20000744

08006bec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bf6:	4b29      	ldr	r3, [pc, #164]	; (8006c9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bfc:	4b28      	ldr	r3, [pc, #160]	; (8006ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3304      	adds	r3, #4
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff fae1 	bl	80061ca <uxListRemove>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10b      	bne.n	8006c26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006c0e:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	2201      	movs	r2, #1
 8006c16:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1a:	43da      	mvns	r2, r3
 8006c1c:	4b21      	ldr	r3, [pc, #132]	; (8006ca4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4013      	ands	r3, r2
 8006c22:	4a20      	ldr	r2, [pc, #128]	; (8006ca4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2c:	d10a      	bne.n	8006c44 <prvAddCurrentTaskToDelayedList+0x58>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d007      	beq.n	8006c44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c34:	4b1a      	ldr	r3, [pc, #104]	; (8006ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	481a      	ldr	r0, [pc, #104]	; (8006ca8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c3e:	f7ff fa67 	bl	8006110 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c42:	e026      	b.n	8006c92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c4c:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d209      	bcs.n	8006c70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c5c:	4b13      	ldr	r3, [pc, #76]	; (8006cac <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3304      	adds	r3, #4
 8006c66:	4619      	mov	r1, r3
 8006c68:	4610      	mov	r0, r2
 8006c6a:	f7ff fa75 	bl	8006158 <vListInsert>
}
 8006c6e:	e010      	b.n	8006c92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c70:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	f7ff fa6b 	bl	8006158 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c82:	4b0c      	ldr	r3, [pc, #48]	; (8006cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d202      	bcs.n	8006c92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006c8c:	4a09      	ldr	r2, [pc, #36]	; (8006cb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	6013      	str	r3, [r2, #0]
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000728 	.word	0x20000728
 8006ca0:	20000624 	.word	0x20000624
 8006ca4:	2000072c 	.word	0x2000072c
 8006ca8:	20000710 	.word	0x20000710
 8006cac:	200006e0 	.word	0x200006e0
 8006cb0:	200006dc 	.word	0x200006dc
 8006cb4:	20000744 	.word	0x20000744

08006cb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3b04      	subs	r3, #4
 8006cc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3b04      	subs	r3, #4
 8006cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f023 0201 	bic.w	r2, r3, #1
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3b04      	subs	r3, #4
 8006ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ce8:	4a0c      	ldr	r2, [pc, #48]	; (8006d1c <pxPortInitialiseStack+0x64>)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3b14      	subs	r3, #20
 8006cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3b04      	subs	r3, #4
 8006cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f06f 0202 	mvn.w	r2, #2
 8006d06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3b20      	subs	r3, #32
 8006d0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	08006d21 	.word	0x08006d21

08006d20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d2a:	4b12      	ldr	r3, [pc, #72]	; (8006d74 <prvTaskExitError+0x54>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d32:	d00a      	beq.n	8006d4a <prvTaskExitError+0x2a>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	60fb      	str	r3, [r7, #12]
}
 8006d46:	bf00      	nop
 8006d48:	e7fe      	b.n	8006d48 <prvTaskExitError+0x28>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	60bb      	str	r3, [r7, #8]
}
 8006d5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d5e:	bf00      	nop
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0fc      	beq.n	8006d60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d66:	bf00      	nop
 8006d68:	bf00      	nop
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	2000000c 	.word	0x2000000c
	...

08006d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d80:	4b07      	ldr	r3, [pc, #28]	; (8006da0 <pxCurrentTCBConst2>)
 8006d82:	6819      	ldr	r1, [r3, #0]
 8006d84:	6808      	ldr	r0, [r1, #0]
 8006d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8a:	f380 8809 	msr	PSP, r0
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f04f 0000 	mov.w	r0, #0
 8006d96:	f380 8811 	msr	BASEPRI, r0
 8006d9a:	4770      	bx	lr
 8006d9c:	f3af 8000 	nop.w

08006da0 <pxCurrentTCBConst2>:
 8006da0:	20000624 	.word	0x20000624
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop

08006da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006da8:	4808      	ldr	r0, [pc, #32]	; (8006dcc <prvPortStartFirstTask+0x24>)
 8006daa:	6800      	ldr	r0, [r0, #0]
 8006dac:	6800      	ldr	r0, [r0, #0]
 8006dae:	f380 8808 	msr	MSP, r0
 8006db2:	f04f 0000 	mov.w	r0, #0
 8006db6:	f380 8814 	msr	CONTROL, r0
 8006dba:	b662      	cpsie	i
 8006dbc:	b661      	cpsie	f
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	df00      	svc	0
 8006dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dca:	bf00      	nop
 8006dcc:	e000ed08 	.word	0xe000ed08

08006dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006dd6:	4b46      	ldr	r3, [pc, #280]	; (8006ef0 <xPortStartScheduler+0x120>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a46      	ldr	r2, [pc, #280]	; (8006ef4 <xPortStartScheduler+0x124>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d10a      	bne.n	8006df6 <xPortStartScheduler+0x26>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	613b      	str	r3, [r7, #16]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006df6:	4b3e      	ldr	r3, [pc, #248]	; (8006ef0 <xPortStartScheduler+0x120>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a3f      	ldr	r2, [pc, #252]	; (8006ef8 <xPortStartScheduler+0x128>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d10a      	bne.n	8006e16 <xPortStartScheduler+0x46>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	60fb      	str	r3, [r7, #12]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e16:	4b39      	ldr	r3, [pc, #228]	; (8006efc <xPortStartScheduler+0x12c>)
 8006e18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	22ff      	movs	r2, #255	; 0xff
 8006e26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	4b31      	ldr	r3, [pc, #196]	; (8006f00 <xPortStartScheduler+0x130>)
 8006e3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e3e:	4b31      	ldr	r3, [pc, #196]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e40:	2207      	movs	r2, #7
 8006e42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e44:	e009      	b.n	8006e5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e46:	4b2f      	ldr	r3, [pc, #188]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	4a2d      	ldr	r2, [pc, #180]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e5a:	78fb      	ldrb	r3, [r7, #3]
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e62:	2b80      	cmp	r3, #128	; 0x80
 8006e64:	d0ef      	beq.n	8006e46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e66:	4b27      	ldr	r3, [pc, #156]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f1c3 0307 	rsb	r3, r3, #7
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d00a      	beq.n	8006e88 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	60bb      	str	r3, [r7, #8]
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e88:	4b1e      	ldr	r3, [pc, #120]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	4a1d      	ldr	r2, [pc, #116]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e92:	4b1c      	ldr	r3, [pc, #112]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e9a:	4a1a      	ldr	r2, [pc, #104]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ea6:	4b18      	ldr	r3, [pc, #96]	; (8006f08 <xPortStartScheduler+0x138>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a17      	ldr	r2, [pc, #92]	; (8006f08 <xPortStartScheduler+0x138>)
 8006eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006eb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006eb2:	4b15      	ldr	r3, [pc, #84]	; (8006f08 <xPortStartScheduler+0x138>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a14      	ldr	r2, [pc, #80]	; (8006f08 <xPortStartScheduler+0x138>)
 8006eb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ebc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ebe:	f000 f8dd 	bl	800707c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ec2:	4b12      	ldr	r3, [pc, #72]	; (8006f0c <xPortStartScheduler+0x13c>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ec8:	f000 f8fc 	bl	80070c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ecc:	4b10      	ldr	r3, [pc, #64]	; (8006f10 <xPortStartScheduler+0x140>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a0f      	ldr	r2, [pc, #60]	; (8006f10 <xPortStartScheduler+0x140>)
 8006ed2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ed6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ed8:	f7ff ff66 	bl	8006da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006edc:	f7ff fd4a 	bl	8006974 <vTaskSwitchContext>
	prvTaskExitError();
 8006ee0:	f7ff ff1e 	bl	8006d20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	e000ed00 	.word	0xe000ed00
 8006ef4:	410fc271 	.word	0x410fc271
 8006ef8:	410fc270 	.word	0x410fc270
 8006efc:	e000e400 	.word	0xe000e400
 8006f00:	20000750 	.word	0x20000750
 8006f04:	20000754 	.word	0x20000754
 8006f08:	e000ed20 	.word	0xe000ed20
 8006f0c:	2000000c 	.word	0x2000000c
 8006f10:	e000ef34 	.word	0xe000ef34

08006f14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	607b      	str	r3, [r7, #4]
}
 8006f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f2e:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <vPortEnterCritical+0x58>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3301      	adds	r3, #1
 8006f34:	4a0d      	ldr	r2, [pc, #52]	; (8006f6c <vPortEnterCritical+0x58>)
 8006f36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f38:	4b0c      	ldr	r3, [pc, #48]	; (8006f6c <vPortEnterCritical+0x58>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d10f      	bne.n	8006f60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f40:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <vPortEnterCritical+0x5c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	603b      	str	r3, [r7, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <vPortEnterCritical+0x4a>
	}
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	2000000c 	.word	0x2000000c
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f7a:	4b12      	ldr	r3, [pc, #72]	; (8006fc4 <vPortExitCritical+0x50>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <vPortExitCritical+0x24>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	607b      	str	r3, [r7, #4]
}
 8006f94:	bf00      	nop
 8006f96:	e7fe      	b.n	8006f96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f98:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <vPortExitCritical+0x50>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	4a09      	ldr	r2, [pc, #36]	; (8006fc4 <vPortExitCritical+0x50>)
 8006fa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fa2:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <vPortExitCritical+0x50>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d105      	bne.n	8006fb6 <vPortExitCritical+0x42>
 8006faa:	2300      	movs	r3, #0
 8006fac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	2000000c 	.word	0x2000000c
	...

08006fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fd0:	f3ef 8009 	mrs	r0, PSP
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	4b15      	ldr	r3, [pc, #84]	; (8007030 <pxCurrentTCBConst>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	f01e 0f10 	tst.w	lr, #16
 8006fe0:	bf08      	it	eq
 8006fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fea:	6010      	str	r0, [r2, #0]
 8006fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ff4:	f380 8811 	msr	BASEPRI, r0
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f7ff fcb8 	bl	8006974 <vTaskSwitchContext>
 8007004:	f04f 0000 	mov.w	r0, #0
 8007008:	f380 8811 	msr	BASEPRI, r0
 800700c:	bc09      	pop	{r0, r3}
 800700e:	6819      	ldr	r1, [r3, #0]
 8007010:	6808      	ldr	r0, [r1, #0]
 8007012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007016:	f01e 0f10 	tst.w	lr, #16
 800701a:	bf08      	it	eq
 800701c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007020:	f380 8809 	msr	PSP, r0
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	f3af 8000 	nop.w

08007030 <pxCurrentTCBConst>:
 8007030:	20000624 	.word	0x20000624
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop

08007038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	607b      	str	r3, [r7, #4]
}
 8007050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007052:	f7ff fbd7 	bl	8006804 <xTaskIncrementTick>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800705c:	4b06      	ldr	r3, [pc, #24]	; (8007078 <SysTick_Handler+0x40>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	2300      	movs	r3, #0
 8007066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	f383 8811 	msr	BASEPRI, r3
}
 800706e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007070:	bf00      	nop
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	e000ed04 	.word	0xe000ed04

0800707c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007080:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <vPortSetupTimerInterrupt+0x34>)
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <vPortSetupTimerInterrupt+0x38>)
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <vPortSetupTimerInterrupt+0x3c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a0a      	ldr	r2, [pc, #40]	; (80070bc <vPortSetupTimerInterrupt+0x40>)
 8007092:	fba2 2303 	umull	r2, r3, r2, r3
 8007096:	099b      	lsrs	r3, r3, #6
 8007098:	4a09      	ldr	r2, [pc, #36]	; (80070c0 <vPortSetupTimerInterrupt+0x44>)
 800709a:	3b01      	subs	r3, #1
 800709c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800709e:	4b04      	ldr	r3, [pc, #16]	; (80070b0 <vPortSetupTimerInterrupt+0x34>)
 80070a0:	2207      	movs	r2, #7
 80070a2:	601a      	str	r2, [r3, #0]
}
 80070a4:	bf00      	nop
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	e000e010 	.word	0xe000e010
 80070b4:	e000e018 	.word	0xe000e018
 80070b8:	20000000 	.word	0x20000000
 80070bc:	10624dd3 	.word	0x10624dd3
 80070c0:	e000e014 	.word	0xe000e014

080070c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80070d4 <vPortEnableVFP+0x10>
 80070c8:	6801      	ldr	r1, [r0, #0]
 80070ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80070ce:	6001      	str	r1, [r0, #0]
 80070d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070d2:	bf00      	nop
 80070d4:	e000ed88 	.word	0xe000ed88

080070d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08a      	sub	sp, #40	; 0x28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070e4:	f7ff fae4 	bl	80066b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070e8:	4b5b      	ldr	r3, [pc, #364]	; (8007258 <pvPortMalloc+0x180>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070f0:	f000 f920 	bl	8007334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070f4:	4b59      	ldr	r3, [pc, #356]	; (800725c <pvPortMalloc+0x184>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4013      	ands	r3, r2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f040 8093 	bne.w	8007228 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01d      	beq.n	8007144 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007108:	2208      	movs	r2, #8
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4413      	add	r3, r2
 800710e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	2b00      	cmp	r3, #0
 8007118:	d014      	beq.n	8007144 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f023 0307 	bic.w	r3, r3, #7
 8007120:	3308      	adds	r3, #8
 8007122:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <pvPortMalloc+0x6c>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	617b      	str	r3, [r7, #20]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d06e      	beq.n	8007228 <pvPortMalloc+0x150>
 800714a:	4b45      	ldr	r3, [pc, #276]	; (8007260 <pvPortMalloc+0x188>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d869      	bhi.n	8007228 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007154:	4b43      	ldr	r3, [pc, #268]	; (8007264 <pvPortMalloc+0x18c>)
 8007156:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007158:	4b42      	ldr	r3, [pc, #264]	; (8007264 <pvPortMalloc+0x18c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800715e:	e004      	b.n	800716a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	429a      	cmp	r2, r3
 8007172:	d903      	bls.n	800717c <pvPortMalloc+0xa4>
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1f1      	bne.n	8007160 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800717c:	4b36      	ldr	r3, [pc, #216]	; (8007258 <pvPortMalloc+0x180>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007182:	429a      	cmp	r2, r3
 8007184:	d050      	beq.n	8007228 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2208      	movs	r2, #8
 800718c:	4413      	add	r3, r2
 800718e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	2308      	movs	r3, #8
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d91f      	bls.n	80071e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4413      	add	r3, r2
 80071ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <pvPortMalloc+0xf8>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	613b      	str	r3, [r7, #16]
}
 80071cc:	bf00      	nop
 80071ce:	e7fe      	b.n	80071ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	1ad2      	subs	r2, r2, r3
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071e2:	69b8      	ldr	r0, [r7, #24]
 80071e4:	f000 f908 	bl	80073f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071e8:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <pvPortMalloc+0x188>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	4a1b      	ldr	r2, [pc, #108]	; (8007260 <pvPortMalloc+0x188>)
 80071f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071f6:	4b1a      	ldr	r3, [pc, #104]	; (8007260 <pvPortMalloc+0x188>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b1b      	ldr	r3, [pc, #108]	; (8007268 <pvPortMalloc+0x190>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d203      	bcs.n	800720a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007202:	4b17      	ldr	r3, [pc, #92]	; (8007260 <pvPortMalloc+0x188>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a18      	ldr	r2, [pc, #96]	; (8007268 <pvPortMalloc+0x190>)
 8007208:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	4b13      	ldr	r3, [pc, #76]	; (800725c <pvPortMalloc+0x184>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	431a      	orrs	r2, r3
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800721e:	4b13      	ldr	r3, [pc, #76]	; (800726c <pvPortMalloc+0x194>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3301      	adds	r3, #1
 8007224:	4a11      	ldr	r2, [pc, #68]	; (800726c <pvPortMalloc+0x194>)
 8007226:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007228:	f7ff fa50 	bl	80066cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	f003 0307 	and.w	r3, r3, #7
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <pvPortMalloc+0x174>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	60fb      	str	r3, [r7, #12]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <pvPortMalloc+0x172>
	return pvReturn;
 800724c:	69fb      	ldr	r3, [r7, #28]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3728      	adds	r7, #40	; 0x28
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20004360 	.word	0x20004360
 800725c:	20004374 	.word	0x20004374
 8007260:	20004364 	.word	0x20004364
 8007264:	20004358 	.word	0x20004358
 8007268:	20004368 	.word	0x20004368
 800726c:	2000436c 	.word	0x2000436c

08007270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d04d      	beq.n	800731e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007282:	2308      	movs	r3, #8
 8007284:	425b      	negs	r3, r3
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	4413      	add	r3, r2
 800728a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	4b24      	ldr	r3, [pc, #144]	; (8007328 <vPortFree+0xb8>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4013      	ands	r3, r2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10a      	bne.n	80072b4 <vPortFree+0x44>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	60fb      	str	r3, [r7, #12]
}
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00a      	beq.n	80072d2 <vPortFree+0x62>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	60bb      	str	r3, [r7, #8]
}
 80072ce:	bf00      	nop
 80072d0:	e7fe      	b.n	80072d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	4b14      	ldr	r3, [pc, #80]	; (8007328 <vPortFree+0xb8>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4013      	ands	r3, r2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01e      	beq.n	800731e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d11a      	bne.n	800731e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <vPortFree+0xb8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	43db      	mvns	r3, r3
 80072f2:	401a      	ands	r2, r3
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072f8:	f7ff f9da 	bl	80066b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	4b0a      	ldr	r3, [pc, #40]	; (800732c <vPortFree+0xbc>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4413      	add	r3, r2
 8007306:	4a09      	ldr	r2, [pc, #36]	; (800732c <vPortFree+0xbc>)
 8007308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800730a:	6938      	ldr	r0, [r7, #16]
 800730c:	f000 f874 	bl	80073f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007310:	4b07      	ldr	r3, [pc, #28]	; (8007330 <vPortFree+0xc0>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3301      	adds	r3, #1
 8007316:	4a06      	ldr	r2, [pc, #24]	; (8007330 <vPortFree+0xc0>)
 8007318:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800731a:	f7ff f9d7 	bl	80066cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800731e:	bf00      	nop
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20004374 	.word	0x20004374
 800732c:	20004364 	.word	0x20004364
 8007330:	20004370 	.word	0x20004370

08007334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800733a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800733e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007340:	4b27      	ldr	r3, [pc, #156]	; (80073e0 <prvHeapInit+0xac>)
 8007342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00c      	beq.n	8007368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3307      	adds	r3, #7
 8007352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0307 	bic.w	r3, r3, #7
 800735a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	4a1f      	ldr	r2, [pc, #124]	; (80073e0 <prvHeapInit+0xac>)
 8007364:	4413      	add	r3, r2
 8007366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800736c:	4a1d      	ldr	r2, [pc, #116]	; (80073e4 <prvHeapInit+0xb0>)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007372:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <prvHeapInit+0xb0>)
 8007374:	2200      	movs	r2, #0
 8007376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	4413      	add	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007380:	2208      	movs	r2, #8
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	1a9b      	subs	r3, r3, r2
 8007386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f023 0307 	bic.w	r3, r3, #7
 800738e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4a15      	ldr	r2, [pc, #84]	; (80073e8 <prvHeapInit+0xb4>)
 8007394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007396:	4b14      	ldr	r3, [pc, #80]	; (80073e8 <prvHeapInit+0xb4>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2200      	movs	r2, #0
 800739c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800739e:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <prvHeapInit+0xb4>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	1ad2      	subs	r2, r2, r3
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073b4:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <prvHeapInit+0xb4>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	4a0a      	ldr	r2, [pc, #40]	; (80073ec <prvHeapInit+0xb8>)
 80073c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4a09      	ldr	r2, [pc, #36]	; (80073f0 <prvHeapInit+0xbc>)
 80073ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073cc:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <prvHeapInit+0xc0>)
 80073ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073d2:	601a      	str	r2, [r3, #0]
}
 80073d4:	bf00      	nop
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	20000758 	.word	0x20000758
 80073e4:	20004358 	.word	0x20004358
 80073e8:	20004360 	.word	0x20004360
 80073ec:	20004368 	.word	0x20004368
 80073f0:	20004364 	.word	0x20004364
 80073f4:	20004374 	.word	0x20004374

080073f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007400:	4b28      	ldr	r3, [pc, #160]	; (80074a4 <prvInsertBlockIntoFreeList+0xac>)
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	e002      	b.n	800740c <prvInsertBlockIntoFreeList+0x14>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	429a      	cmp	r2, r3
 8007414:	d8f7      	bhi.n	8007406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	4413      	add	r3, r2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	429a      	cmp	r2, r3
 8007426:	d108      	bne.n	800743a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	441a      	add	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	441a      	add	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d118      	bne.n	8007480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	4b15      	ldr	r3, [pc, #84]	; (80074a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d00d      	beq.n	8007476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	441a      	add	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	e008      	b.n	8007488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007476:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	e003      	b.n	8007488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	429a      	cmp	r2, r3
 800748e:	d002      	beq.n	8007496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007496:	bf00      	nop
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	20004358 	.word	0x20004358
 80074a8:	20004360 	.word	0x20004360

080074ac <memset>:
 80074ac:	4402      	add	r2, r0
 80074ae:	4603      	mov	r3, r0
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d100      	bne.n	80074b6 <memset+0xa>
 80074b4:	4770      	bx	lr
 80074b6:	f803 1b01 	strb.w	r1, [r3], #1
 80074ba:	e7f9      	b.n	80074b0 <memset+0x4>

080074bc <_reclaim_reent>:
 80074bc:	4b29      	ldr	r3, [pc, #164]	; (8007564 <_reclaim_reent+0xa8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4283      	cmp	r3, r0
 80074c2:	b570      	push	{r4, r5, r6, lr}
 80074c4:	4604      	mov	r4, r0
 80074c6:	d04b      	beq.n	8007560 <_reclaim_reent+0xa4>
 80074c8:	69c3      	ldr	r3, [r0, #28]
 80074ca:	b143      	cbz	r3, 80074de <_reclaim_reent+0x22>
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d144      	bne.n	800755c <_reclaim_reent+0xa0>
 80074d2:	69e3      	ldr	r3, [r4, #28]
 80074d4:	6819      	ldr	r1, [r3, #0]
 80074d6:	b111      	cbz	r1, 80074de <_reclaim_reent+0x22>
 80074d8:	4620      	mov	r0, r4
 80074da:	f000 f86b 	bl	80075b4 <_free_r>
 80074de:	6961      	ldr	r1, [r4, #20]
 80074e0:	b111      	cbz	r1, 80074e8 <_reclaim_reent+0x2c>
 80074e2:	4620      	mov	r0, r4
 80074e4:	f000 f866 	bl	80075b4 <_free_r>
 80074e8:	69e1      	ldr	r1, [r4, #28]
 80074ea:	b111      	cbz	r1, 80074f2 <_reclaim_reent+0x36>
 80074ec:	4620      	mov	r0, r4
 80074ee:	f000 f861 	bl	80075b4 <_free_r>
 80074f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80074f4:	b111      	cbz	r1, 80074fc <_reclaim_reent+0x40>
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 f85c 	bl	80075b4 <_free_r>
 80074fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074fe:	b111      	cbz	r1, 8007506 <_reclaim_reent+0x4a>
 8007500:	4620      	mov	r0, r4
 8007502:	f000 f857 	bl	80075b4 <_free_r>
 8007506:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007508:	b111      	cbz	r1, 8007510 <_reclaim_reent+0x54>
 800750a:	4620      	mov	r0, r4
 800750c:	f000 f852 	bl	80075b4 <_free_r>
 8007510:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007512:	b111      	cbz	r1, 800751a <_reclaim_reent+0x5e>
 8007514:	4620      	mov	r0, r4
 8007516:	f000 f84d 	bl	80075b4 <_free_r>
 800751a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800751c:	b111      	cbz	r1, 8007524 <_reclaim_reent+0x68>
 800751e:	4620      	mov	r0, r4
 8007520:	f000 f848 	bl	80075b4 <_free_r>
 8007524:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007526:	b111      	cbz	r1, 800752e <_reclaim_reent+0x72>
 8007528:	4620      	mov	r0, r4
 800752a:	f000 f843 	bl	80075b4 <_free_r>
 800752e:	6a23      	ldr	r3, [r4, #32]
 8007530:	b1b3      	cbz	r3, 8007560 <_reclaim_reent+0xa4>
 8007532:	4620      	mov	r0, r4
 8007534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007538:	4718      	bx	r3
 800753a:	5949      	ldr	r1, [r1, r5]
 800753c:	b941      	cbnz	r1, 8007550 <_reclaim_reent+0x94>
 800753e:	3504      	adds	r5, #4
 8007540:	69e3      	ldr	r3, [r4, #28]
 8007542:	2d80      	cmp	r5, #128	; 0x80
 8007544:	68d9      	ldr	r1, [r3, #12]
 8007546:	d1f8      	bne.n	800753a <_reclaim_reent+0x7e>
 8007548:	4620      	mov	r0, r4
 800754a:	f000 f833 	bl	80075b4 <_free_r>
 800754e:	e7c0      	b.n	80074d2 <_reclaim_reent+0x16>
 8007550:	680e      	ldr	r6, [r1, #0]
 8007552:	4620      	mov	r0, r4
 8007554:	f000 f82e 	bl	80075b4 <_free_r>
 8007558:	4631      	mov	r1, r6
 800755a:	e7ef      	b.n	800753c <_reclaim_reent+0x80>
 800755c:	2500      	movs	r5, #0
 800755e:	e7ef      	b.n	8007540 <_reclaim_reent+0x84>
 8007560:	bd70      	pop	{r4, r5, r6, pc}
 8007562:	bf00      	nop
 8007564:	2000005c 	.word	0x2000005c

08007568 <__libc_init_array>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	4d0d      	ldr	r5, [pc, #52]	; (80075a0 <__libc_init_array+0x38>)
 800756c:	4c0d      	ldr	r4, [pc, #52]	; (80075a4 <__libc_init_array+0x3c>)
 800756e:	1b64      	subs	r4, r4, r5
 8007570:	10a4      	asrs	r4, r4, #2
 8007572:	2600      	movs	r6, #0
 8007574:	42a6      	cmp	r6, r4
 8007576:	d109      	bne.n	800758c <__libc_init_array+0x24>
 8007578:	4d0b      	ldr	r5, [pc, #44]	; (80075a8 <__libc_init_array+0x40>)
 800757a:	4c0c      	ldr	r4, [pc, #48]	; (80075ac <__libc_init_array+0x44>)
 800757c:	f000 f872 	bl	8007664 <_init>
 8007580:	1b64      	subs	r4, r4, r5
 8007582:	10a4      	asrs	r4, r4, #2
 8007584:	2600      	movs	r6, #0
 8007586:	42a6      	cmp	r6, r4
 8007588:	d105      	bne.n	8007596 <__libc_init_array+0x2e>
 800758a:	bd70      	pop	{r4, r5, r6, pc}
 800758c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007590:	4798      	blx	r3
 8007592:	3601      	adds	r6, #1
 8007594:	e7ee      	b.n	8007574 <__libc_init_array+0xc>
 8007596:	f855 3b04 	ldr.w	r3, [r5], #4
 800759a:	4798      	blx	r3
 800759c:	3601      	adds	r6, #1
 800759e:	e7f2      	b.n	8007586 <__libc_init_array+0x1e>
 80075a0:	08007744 	.word	0x08007744
 80075a4:	08007744 	.word	0x08007744
 80075a8:	08007744 	.word	0x08007744
 80075ac:	08007748 	.word	0x08007748

080075b0 <__retarget_lock_acquire_recursive>:
 80075b0:	4770      	bx	lr

080075b2 <__retarget_lock_release_recursive>:
 80075b2:	4770      	bx	lr

080075b4 <_free_r>:
 80075b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075b6:	2900      	cmp	r1, #0
 80075b8:	d044      	beq.n	8007644 <_free_r+0x90>
 80075ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075be:	9001      	str	r0, [sp, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f1a1 0404 	sub.w	r4, r1, #4
 80075c6:	bfb8      	it	lt
 80075c8:	18e4      	addlt	r4, r4, r3
 80075ca:	f000 f83f 	bl	800764c <__malloc_lock>
 80075ce:	4a1e      	ldr	r2, [pc, #120]	; (8007648 <_free_r+0x94>)
 80075d0:	9801      	ldr	r0, [sp, #4]
 80075d2:	6813      	ldr	r3, [r2, #0]
 80075d4:	b933      	cbnz	r3, 80075e4 <_free_r+0x30>
 80075d6:	6063      	str	r3, [r4, #4]
 80075d8:	6014      	str	r4, [r2, #0]
 80075da:	b003      	add	sp, #12
 80075dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075e0:	f000 b83a 	b.w	8007658 <__malloc_unlock>
 80075e4:	42a3      	cmp	r3, r4
 80075e6:	d908      	bls.n	80075fa <_free_r+0x46>
 80075e8:	6825      	ldr	r5, [r4, #0]
 80075ea:	1961      	adds	r1, r4, r5
 80075ec:	428b      	cmp	r3, r1
 80075ee:	bf01      	itttt	eq
 80075f0:	6819      	ldreq	r1, [r3, #0]
 80075f2:	685b      	ldreq	r3, [r3, #4]
 80075f4:	1949      	addeq	r1, r1, r5
 80075f6:	6021      	streq	r1, [r4, #0]
 80075f8:	e7ed      	b.n	80075d6 <_free_r+0x22>
 80075fa:	461a      	mov	r2, r3
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	b10b      	cbz	r3, 8007604 <_free_r+0x50>
 8007600:	42a3      	cmp	r3, r4
 8007602:	d9fa      	bls.n	80075fa <_free_r+0x46>
 8007604:	6811      	ldr	r1, [r2, #0]
 8007606:	1855      	adds	r5, r2, r1
 8007608:	42a5      	cmp	r5, r4
 800760a:	d10b      	bne.n	8007624 <_free_r+0x70>
 800760c:	6824      	ldr	r4, [r4, #0]
 800760e:	4421      	add	r1, r4
 8007610:	1854      	adds	r4, r2, r1
 8007612:	42a3      	cmp	r3, r4
 8007614:	6011      	str	r1, [r2, #0]
 8007616:	d1e0      	bne.n	80075da <_free_r+0x26>
 8007618:	681c      	ldr	r4, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	6053      	str	r3, [r2, #4]
 800761e:	440c      	add	r4, r1
 8007620:	6014      	str	r4, [r2, #0]
 8007622:	e7da      	b.n	80075da <_free_r+0x26>
 8007624:	d902      	bls.n	800762c <_free_r+0x78>
 8007626:	230c      	movs	r3, #12
 8007628:	6003      	str	r3, [r0, #0]
 800762a:	e7d6      	b.n	80075da <_free_r+0x26>
 800762c:	6825      	ldr	r5, [r4, #0]
 800762e:	1961      	adds	r1, r4, r5
 8007630:	428b      	cmp	r3, r1
 8007632:	bf04      	itt	eq
 8007634:	6819      	ldreq	r1, [r3, #0]
 8007636:	685b      	ldreq	r3, [r3, #4]
 8007638:	6063      	str	r3, [r4, #4]
 800763a:	bf04      	itt	eq
 800763c:	1949      	addeq	r1, r1, r5
 800763e:	6021      	streq	r1, [r4, #0]
 8007640:	6054      	str	r4, [r2, #4]
 8007642:	e7ca      	b.n	80075da <_free_r+0x26>
 8007644:	b003      	add	sp, #12
 8007646:	bd30      	pop	{r4, r5, pc}
 8007648:	200044b4 	.word	0x200044b4

0800764c <__malloc_lock>:
 800764c:	4801      	ldr	r0, [pc, #4]	; (8007654 <__malloc_lock+0x8>)
 800764e:	f7ff bfaf 	b.w	80075b0 <__retarget_lock_acquire_recursive>
 8007652:	bf00      	nop
 8007654:	200044b0 	.word	0x200044b0

08007658 <__malloc_unlock>:
 8007658:	4801      	ldr	r0, [pc, #4]	; (8007660 <__malloc_unlock+0x8>)
 800765a:	f7ff bfaa 	b.w	80075b2 <__retarget_lock_release_recursive>
 800765e:	bf00      	nop
 8007660:	200044b0 	.word	0x200044b0

08007664 <_init>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	bf00      	nop
 8007668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766a:	bc08      	pop	{r3}
 800766c:	469e      	mov	lr, r3
 800766e:	4770      	bx	lr

08007670 <_fini>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	bf00      	nop
 8007674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007676:	bc08      	pop	{r3}
 8007678:	469e      	mov	lr, r3
 800767a:	4770      	bx	lr
