
LoRa_Receiver_Nucleo_F429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cfc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb8  08002eb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ec0  08002ec0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007f17  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019b3  00000000  00000000  00027f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000790  00000000  00000000  00029950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005a2  00000000  00000000  0002a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022046  00000000  00000000  0002a682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008fc7  00000000  00000000  0004c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd7bb  00000000  00000000  0005568f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001d6c  00000000  00000000  00122e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00124bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002e90 	.word	0x08002e90

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002e90 	.word	0x08002e90

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004e8:	b4b0      	push	{r4, r5, r7}
 80004ea:	b08f      	sub	sp, #60	; 0x3c
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 915       ;
 80004f0:	f240 3393 	movw	r3, #915	; 0x393
 80004f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_12      ;
 80004f6:	230c      	movs	r3, #12
 80004f8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004fc:	2307      	movs	r3, #7
 80004fe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000502:	2301      	movs	r3, #1
 8000504:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000508:	23ff      	movs	r3, #255	; 0xff
 800050a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000514:	2308      	movs	r3, #8
 8000516:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	461d      	mov	r5, r3
 800051c:	f107 040c 	add.w	r4, r7, #12
 8000520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000528:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800052c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	373c      	adds	r7, #60	; 0x3c
 8000534:	46bd      	mov	sp, r7
 8000536:	bcb0      	pop	{r4, r5, r7}
 8000538:	4770      	bx	lr

0800053a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800053a:	b580      	push	{r7, lr}
 800053c:	b084      	sub	sp, #16
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000544:	2101      	movs	r1, #1
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 f99f 	bl	800088a <LoRa_read>
 800054c:	4603      	mov	r3, r0
 800054e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000550:	7bbb      	ldrb	r3, [r7, #14]
 8000552:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d107      	bne.n	800056a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800055a:	7bbb      	ldrb	r3, [r7, #14]
 800055c:	f023 0307 	bic.w	r3, r3, #7
 8000560:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2200      	movs	r2, #0
 8000566:	61da      	str	r2, [r3, #28]
 8000568:	e03e      	b.n	80005e8 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d10c      	bne.n	800058a <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000574:	f023 0307 	bic.w	r3, r3, #7
 8000578:	b25b      	sxtb	r3, r3
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	b25b      	sxtb	r3, r3
 8000580:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	e02e      	b.n	80005e8 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b03      	cmp	r3, #3
 800058e:	d10c      	bne.n	80005aa <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000594:	f023 0307 	bic.w	r3, r3, #7
 8000598:	b25b      	sxtb	r3, r3
 800059a:	f043 0303 	orr.w	r3, r3, #3
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2203      	movs	r2, #3
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	e01e      	b.n	80005e8 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b05      	cmp	r3, #5
 80005ae:	d10c      	bne.n	80005ca <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80005b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005b4:	f023 0307 	bic.w	r3, r3, #7
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f043 0305 	orr.w	r3, r3, #5
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2205      	movs	r2, #5
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	e00e      	b.n	80005e8 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b06      	cmp	r3, #6
 80005ce:	d10b      	bne.n	80005e8 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80005d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005d4:	f023 0307 	bic.w	r3, r3, #7
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	f043 0306 	orr.w	r3, r3, #6
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2206      	movs	r2, #6
 80005e6:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	461a      	mov	r2, r3
 80005ec:	2101      	movs	r1, #1
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f965 	bl	80008be <LoRa_write>
	//HAL_Delay(10);
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	4613      	mov	r3, r2
 800060a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	889b      	ldrh	r3, [r3, #4]
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	f001 f878 	bl	800170c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	6998      	ldr	r0, [r3, #24]
 8000620:	88fa      	ldrh	r2, [r7, #6]
 8000622:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000626:	68b9      	ldr	r1, [r7, #8]
 8000628:	f001 fdc7 	bl	80021ba <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800062c:	bf00      	nop
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4618      	mov	r0, r3
 8000634:	f002 faae 	bl	8002b94 <HAL_SPI_GetState>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d1f7      	bne.n	800062e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	6998      	ldr	r0, [r3, #24]
 8000642:	8b3a      	ldrh	r2, [r7, #24]
 8000644:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000648:	6839      	ldr	r1, [r7, #0]
 800064a:	f001 fef2 	bl	8002432 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800064e:	bf00      	nop
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fa9d 	bl	8002b94 <HAL_SPI_GetState>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d1f7      	bne.n	8000650 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	889b      	ldrh	r3, [r3, #4]
 8000668:	2201      	movs	r2, #1
 800066a:	4619      	mov	r1, r3
 800066c:	f001 f84e 	bl	800170c <HAL_GPIO_WritePin>
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	4613      	mov	r3, r2
 8000686:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	889b      	ldrh	r3, [r3, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	4619      	mov	r1, r3
 8000694:	f001 f83a 	bl	800170c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	6998      	ldr	r0, [r3, #24]
 800069c:	88fa      	ldrh	r2, [r7, #6]
 800069e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006a2:	68b9      	ldr	r1, [r7, #8]
 80006a4:	f001 fd89 	bl	80021ba <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006a8:	bf00      	nop
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fa70 	bl	8002b94 <HAL_SPI_GetState>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d1f7      	bne.n	80006aa <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6998      	ldr	r0, [r3, #24]
 80006be:	8b3a      	ldrh	r2, [r7, #24]
 80006c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006c4:	6839      	ldr	r1, [r7, #0]
 80006c6:	f001 fd78 	bl	80021ba <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006ca:	bf00      	nop
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fa5f 	bl	8002b94 <HAL_SPI_GetState>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d1f7      	bne.n	80006cc <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	889b      	ldrh	r3, [r3, #4]
 80006e4:	2201      	movs	r2, #1
 80006e6:	4619      	mov	r1, r3
 80006e8:	f001 f810 	bl	800170c <HAL_GPIO_WritePin>
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	04db      	lsls	r3, r3, #19
 8000702:	115b      	asrs	r3, r3, #5
 8000704:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	0c1b      	lsrs	r3, r3, #16
 800070a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800070c:	7afb      	ldrb	r3, [r7, #11]
 800070e:	461a      	mov	r2, r3
 8000710:	2106      	movs	r1, #6
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f000 f8d3 	bl	80008be <LoRa_write>
	HAL_Delay(5);
 8000718:	2005      	movs	r0, #5
 800071a:	f000 fcf3 	bl	8001104 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000724:	7afb      	ldrb	r3, [r7, #11]
 8000726:	461a      	mov	r2, r3
 8000728:	2107      	movs	r1, #7
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 f8c7 	bl	80008be <LoRa_write>
	HAL_Delay(5);
 8000730:	2005      	movs	r0, #5
 8000732:	f000 fce7 	bl	8001104 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800073a:	7afb      	ldrb	r3, [r7, #11]
 800073c:	461a      	mov	r2, r3
 800073e:	2108      	movs	r1, #8
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f000 f8bc 	bl	80008be <LoRa_write>
	HAL_Delay(5);
 8000746:	2005      	movs	r0, #5
 8000748:	f000 fcdc 	bl	8001104 <HAL_Delay>
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	2b0c      	cmp	r3, #12
 8000762:	dd01      	ble.n	8000768 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000764:	230c      	movs	r3, #12
 8000766:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	2b06      	cmp	r3, #6
 800076c:	dc01      	bgt.n	8000772 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800076e:	2307      	movs	r3, #7
 8000770:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000772:	211e      	movs	r1, #30
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 f888 	bl	800088a <LoRa_read>
 800077a:	4603      	mov	r3, r0
 800077c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800077e:	200a      	movs	r0, #10
 8000780:	f000 fcc0 	bl	8001104 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	b2da      	uxtb	r2, r3
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	f003 030f 	and.w	r3, r3, #15
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4413      	add	r3, r2
 8000796:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000798:	7bbb      	ldrb	r3, [r7, #14]
 800079a:	461a      	mov	r2, r3
 800079c:	211e      	movs	r1, #30
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f000 f88d 	bl	80008be <LoRa_write>
	HAL_Delay(10);
 80007a4:	200a      	movs	r0, #10
 80007a6:	f000 fcad 	bl	8001104 <HAL_Delay>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	461a      	mov	r2, r3
 80007c2:	2109      	movs	r1, #9
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f000 f87a 	bl	80008be <LoRa_write>
	HAL_Delay(10);
 80007ca:	200a      	movs	r0, #10
 80007cc:	f000 fc9a 	bl	8001104 <HAL_Delay>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	2b2c      	cmp	r3, #44	; 0x2c
 80007ec:	d801      	bhi.n	80007f2 <LoRa_setOCP+0x1a>
		current = 45;
 80007ee:	232d      	movs	r3, #45	; 0x2d
 80007f0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80007f2:	78fb      	ldrb	r3, [r7, #3]
 80007f4:	2bf0      	cmp	r3, #240	; 0xf0
 80007f6:	d901      	bls.n	80007fc <LoRa_setOCP+0x24>
		current = 240;
 80007f8:	23f0      	movs	r3, #240	; 0xf0
 80007fa:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b78      	cmp	r3, #120	; 0x78
 8000800:	d809      	bhi.n	8000816 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	3b2d      	subs	r3, #45	; 0x2d
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <LoRa_setOCP+0x78>)
 8000808:	fb82 1203 	smull	r1, r2, r2, r3
 800080c:	1052      	asrs	r2, r2, #1
 800080e:	17db      	asrs	r3, r3, #31
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	e00b      	b.n	800082e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	2bf0      	cmp	r3, #240	; 0xf0
 800081a:	d808      	bhi.n	800082e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	331e      	adds	r3, #30
 8000820:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <LoRa_setOCP+0x78>)
 8000822:	fb82 1203 	smull	r1, r2, r2, r3
 8000826:	1092      	asrs	r2, r2, #2
 8000828:	17db      	asrs	r3, r3, #31
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	3320      	adds	r3, #32
 8000832:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	461a      	mov	r2, r3
 8000838:	210b      	movs	r1, #11
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f000 f83f 	bl	80008be <LoRa_write>
	HAL_Delay(10);
 8000840:	200a      	movs	r0, #10
 8000842:	f000 fc5f 	bl	8001104 <HAL_Delay>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	66666667 	.word	0x66666667

08000854 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800085c:	211e      	movs	r1, #30
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f813 	bl	800088a <LoRa_read>
 8000864:	4603      	mov	r3, r0
 8000866:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	f043 0307 	orr.w	r3, r3, #7
 800086e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000870:	7bbb      	ldrb	r3, [r7, #14]
 8000872:	461a      	mov	r2, r3
 8000874:	211e      	movs	r1, #30
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f000 f821 	bl	80008be <LoRa_write>
	HAL_Delay(10);
 800087c:	200a      	movs	r0, #10
 800087e:	f000 fc41 	bl	8001104 <HAL_Delay>
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af02      	add	r7, sp, #8
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	460b      	mov	r3, r1
 8000894:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000896:	78fb      	ldrb	r3, [r7, #3]
 8000898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800089c:	b2db      	uxtb	r3, r3
 800089e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80008a0:	f107 030f 	add.w	r3, r7, #15
 80008a4:	f107 010e 	add.w	r1, r7, #14
 80008a8:	2201      	movs	r2, #1
 80008aa:	9200      	str	r2, [sp, #0]
 80008ac:	2201      	movs	r2, #1
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff fea4 	bl	80005fc <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af02      	add	r7, sp, #8
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	460b      	mov	r3, r1
 80008c8:	70fb      	strb	r3, [r7, #3]
 80008ca:	4613      	mov	r3, r2
 80008cc:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	73bb      	strb	r3, [r7, #14]
	data = value;
 80008d8:	78bb      	ldrb	r3, [r7, #2]
 80008da:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80008dc:	f107 030f 	add.w	r3, r7, #15
 80008e0:	f107 010e 	add.w	r1, r7, #14
 80008e4:	2201      	movs	r2, #1
 80008e6:	9200      	str	r2, [sp, #0]
 80008e8:	2201      	movs	r2, #1
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff fec4 	bl	8000678 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

	return 1;
 8000900:	2301      	movs	r3, #1
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000916:	2105      	movs	r1, #5
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff fe0e 	bl	800053a <LoRa_gotoMode>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000926:	b590      	push	{r4, r7, lr}
 8000928:	b089      	sub	sp, #36	; 0x24
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	4613      	mov	r3, r2
 8000932:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	e007      	b.n	800094e <LoRa_receive+0x28>
		data[i]=0;
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	68ba      	ldr	r2, [r7, #8]
 8000942:	4413      	add	r3, r2
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	3301      	adds	r3, #1
 800094c:	61bb      	str	r3, [r7, #24]
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	429a      	cmp	r2, r3
 8000954:	dbf3      	blt.n	800093e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000956:	2101      	movs	r1, #1
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f7ff fdee 	bl	800053a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 800095e:	2112      	movs	r1, #18
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	f7ff ff92 	bl	800088a <LoRa_read>
 8000966:	4603      	mov	r3, r0
 8000968:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800096a:	7cfb      	ldrb	r3, [r7, #19]
 800096c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000970:	2b00      	cmp	r3, #0
 8000972:	d02f      	beq.n	80009d4 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000974:	22ff      	movs	r2, #255	; 0xff
 8000976:	2112      	movs	r1, #18
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f7ff ffa0 	bl	80008be <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800097e:	2113      	movs	r1, #19
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f7ff ff82 	bl	800088a <LoRa_read>
 8000986:	4603      	mov	r3, r0
 8000988:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 800098a:	2110      	movs	r1, #16
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f7ff ff7c 	bl	800088a <LoRa_read>
 8000992:	4603      	mov	r3, r0
 8000994:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000996:	7cfb      	ldrb	r3, [r7, #19]
 8000998:	461a      	mov	r2, r3
 800099a:	210d      	movs	r1, #13
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f7ff ff8e 	bl	80008be <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80009a2:	7cba      	ldrb	r2, [r7, #18]
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4293      	cmp	r3, r2
 80009a8:	bf28      	it	cs
 80009aa:	4613      	movcs	r3, r2
 80009ac:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	e00b      	b.n	80009cc <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	18d4      	adds	r4, r2, r3
 80009ba:	2100      	movs	r1, #0
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f7ff ff64 	bl	800088a <LoRa_read>
 80009c2:	4603      	mov	r3, r0
 80009c4:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbef      	blt.n	80009b4 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80009d4:	2105      	movs	r1, #5
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f7ff fdaf 	bl	800053a <LoRa_gotoMode>
    return min;
 80009dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	; 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd90      	pop	{r4, r7, pc}

080009e6 <LoRa_getRSSI>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Returns the RSSI value of last received packet.
\* ----------------------------------------------------------------------------- */
int LoRa_getRSSI(LoRa* _LoRa){
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
	uint8_t read;
	read = LoRa_read(_LoRa, RegPktRssiValue);
 80009ee:	211a      	movs	r1, #26
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff4a 	bl	800088a <LoRa_read>
 80009f6:	4603      	mov	r3, r0
 80009f8:	73fb      	strb	r3, [r7, #15]
	return -164 + read;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	3ba4      	subs	r3, #164	; 0xa4
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b084      	sub	sp, #16
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ff72 	bl	80008f8 <LoRa_isvalid>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f000 8093 	beq.w	8000b42 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fd8b 	bl	800053a <LoRa_gotoMode>
			HAL_Delay(10);
 8000a24:	200a      	movs	r0, #10
 8000a26:	f000 fb6d 	bl	8001104 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff2c 	bl	800088a <LoRa_read>
 8000a32:	4603      	mov	r3, r0
 8000a34:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000a36:	200a      	movs	r0, #10
 8000a38:	f000 fb64 	bl	8001104 <HAL_Delay>
			data = read | 0x80;
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a42:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2101      	movs	r1, #1
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ff37 	bl	80008be <LoRa_write>
			HAL_Delay(100);
 8000a50:	2064      	movs	r0, #100	; 0x64
 8000a52:	f000 fb57 	bl	8001104 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff fe49 	bl	80006f4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000a68:	4619      	mov	r1, r3
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff fea1 	bl	80007b2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000a76:	4619      	mov	r1, r3
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff fead 	bl	80007d8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000a7e:	2223      	movs	r2, #35	; 0x23
 8000a80:	210c      	movs	r1, #12
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ff1b 	bl	80008be <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fee3 	bl	8000854 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a94:	4619      	mov	r1, r3
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff fe5c 	bl	8000754 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000a9c:	22ff      	movs	r2, #255	; 0xff
 8000a9e:	211f      	movs	r1, #31
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff0c 	bl	80008be <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4413      	add	r3, r2
 8000ac0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000ac2:	7bbb      	ldrb	r3, [r7, #14]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	211d      	movs	r1, #29
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff fef8 	bl	80008be <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ad2:	0a1b      	lsrs	r3, r3, #8
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	2120      	movs	r1, #32
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff feee 	bl	80008be <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2121      	movs	r1, #33	; 0x21
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fee6 	bl	80008be <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fec8 	bl	800088a <LoRa_read>
 8000afa:	4603      	mov	r3, r0
 8000afc:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000b04:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	2140      	movs	r1, #64	; 0x40
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fed6 	bl	80008be <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b12:	2101      	movs	r1, #1
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fd10 	bl	800053a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000b20:	200a      	movs	r0, #10
 8000b22:	f000 faef 	bl	8001104 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000b26:	2142      	movs	r1, #66	; 0x42
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff feae 	bl	800088a <LoRa_read>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	2b12      	cmp	r3, #18
 8000b36:	d101      	bne.n	8000b3c <LoRa_init+0x136>
				return LORA_OK;
 8000b38:	23c8      	movs	r3, #200	; 0xc8
 8000b3a:	e004      	b.n	8000b46 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000b3c:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000b40:	e001      	b.n	8000b46 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000b42:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);

int main(void)
{
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0
  HAL_Init();
 8000b56:	f000 fa63 	bl	8001020 <HAL_Init>
  SystemClock_Config();
 8000b5a:	f000 f86f 	bl	8000c3c <SystemClock_Config>
  MX_GPIO_Init();
 8000b5e:	f000 f913 	bl	8000d88 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b62:	f000 f8db 	bl	8000d1c <MX_SPI1_Init>

  myLoRa = newLoRa();
 8000b66:	4c2f      	ldr	r4, [pc, #188]	; (8000c24 <main+0xd4>)
 8000b68:	463b      	mov	r3, r7
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fcbc 	bl	80004e8 <newLoRa>
 8000b70:	4625      	mov	r5, r4
 8000b72:	463c      	mov	r4, r7
 8000b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b7c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b80:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myLoRa.CS_port         = NSS_GPIO_Port;
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <main+0xd4>)
 8000b86:	4a28      	ldr	r2, [pc, #160]	; (8000c28 <main+0xd8>)
 8000b88:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <main+0xd4>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <main+0xd4>)
 8000b92:	4a25      	ldr	r2, [pc, #148]	; (8000c28 <main+0xd8>)
 8000b94:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <main+0xd4>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8000b9c:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <main+0xd4>)
 8000b9e:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <main+0xd8>)
 8000ba0:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <main+0xd4>)
 8000ba4:	2204      	movs	r2, #4
 8000ba6:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <main+0xd4>)
 8000baa:	4a20      	ldr	r2, [pc, #128]	; (8000c2c <main+0xdc>)
 8000bac:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 868;             // default = 433 MHz
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <main+0xd4>)
 8000bb0:	f44f 7259 	mov.w	r2, #868	; 0x364
 8000bb4:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_9;            // default = SF_7
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <main+0xd4>)
 8000bb8:	2209      	movs	r2, #9
 8000bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth             = BW_250KHz;       // default = BW_125KHz
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <main+0xd4>)
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate               = CR_4_8;          // default = CR_4_5
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <main+0xd4>)
 8000bc8:	2204      	movs	r2, #4
 8000bca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power                 = POWER_17db;      // default = 20db
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <main+0xd4>)
 8000bd0:	22fc      	movs	r2, #252	; 0xfc
 8000bd2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <main+0xd4>)
 8000bd8:	2282      	movs	r2, #130	; 0x82
 8000bda:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble              = 10;              // default = 8;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <main+0xd4>)
 8000be0:	220a      	movs	r2, #10
 8000be2:	851a      	strh	r2, [r3, #40]	; 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 8000be4:	480f      	ldr	r0, [pc, #60]	; (8000c24 <main+0xd4>)
 8000be6:	f7ff ff0e 	bl	8000a06 <LoRa_init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2bc8      	cmp	r3, #200	; 0xc8
 8000bee:	d102      	bne.n	8000bf6 <main+0xa6>
  	 LoRa_stat = 1;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <main+0xe0>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 8000bf6:	480b      	ldr	r0, [pc, #44]	; (8000c24 <main+0xd4>)
 8000bf8:	f7ff fe89 	bl	800090e <LoRa_startReceiving>

  while (1)
  {
	  Packet_size = LoRa_receive(&myLoRa, RxBuffer, 20);
 8000bfc:	2214      	movs	r2, #20
 8000bfe:	490d      	ldr	r1, [pc, #52]	; (8000c34 <main+0xe4>)
 8000c00:	4808      	ldr	r0, [pc, #32]	; (8000c24 <main+0xd4>)
 8000c02:	f7ff fe90 	bl	8000926 <LoRa_receive>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <main+0xe8>)
 8000c0c:	701a      	strb	r2, [r3, #0]
	  uint8_t signal_str = LoRa_getRSSI(&myLoRa);
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <main+0xd4>)
 8000c10:	f7ff fee9 	bl	80009e6 <LoRa_getRSSI>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  HAL_Delay(500);
 8000c1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c1e:	f000 fa71 	bl	8001104 <HAL_Delay>
  {
 8000c22:	e7eb      	b.n	8000bfc <main+0xac>
 8000c24:	20000080 	.word	0x20000080
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	20000028 	.word	0x20000028
 8000c30:	200000ac 	.word	0x200000ac
 8000c34:	200000b0 	.word	0x200000b0
 8000c38:	200000ad 	.word	0x200000ad

08000c3c <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	; 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0320 	add.w	r3, r7, #32
 8000c46:	2230      	movs	r2, #48	; 0x30
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 f8f4 	bl	8002e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <SystemClock_Config+0xd8>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a2a      	ldr	r2, [pc, #168]	; (8000d14 <SystemClock_Config+0xd8>)
 8000c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <SystemClock_Config+0xd8>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <SystemClock_Config+0xdc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a24      	ldr	r2, [pc, #144]	; (8000d18 <SystemClock_Config+0xdc>)
 8000c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <SystemClock_Config+0xdc>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cac:	2308      	movs	r3, #8
 8000cae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000cb0:	23b4      	movs	r3, #180	; 0xb4
 8000cb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 0320 	add.w	r3, r7, #32
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 fd8d 	bl	80017e0 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ccc:	f000 f8ba 	bl	8000e44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cd0:	f000 fd36 	bl	8001740 <HAL_PWREx_EnableOverDrive>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000cda:	f000 f8b3 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	2105      	movs	r1, #5
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 ffe7 	bl	8001cd0 <HAL_RCC_ClockConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000d08:	f000 f89c 	bl	8000e44 <Error_Handler>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	3750      	adds	r7, #80	; 0x50
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_SPI1_Init+0x64>)
 8000d22:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <MX_SPI1_Init+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_SPI1_Init+0x64>)
 8000d28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_SPI1_Init+0x64>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_SPI1_Init+0x64>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_SPI1_Init+0x64>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_SPI1_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_SPI1_Init+0x64>)
 8000d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_SPI1_Init+0x64>)
 8000d50:	2210      	movs	r2, #16
 8000d52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <MX_SPI1_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_SPI1_Init+0x64>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <MX_SPI1_Init+0x64>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_SPI1_Init+0x64>)
 8000d68:	220a      	movs	r2, #10
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_SPI1_Init+0x64>)
 8000d6e:	f001 f99b 	bl	80020a8 <HAL_SPI_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d78:	f000 f864 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000028 	.word	0x20000028
 8000d84:	40013000 	.word	0x40013000

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <MX_GPIO_Init+0xb4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <MX_GPIO_Init+0xb4>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <MX_GPIO_Init+0xb4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_GPIO_Init+0xb4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a1e      	ldr	r2, [pc, #120]	; (8000e3c <MX_GPIO_Init+0xb4>)
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_GPIO_Init+0xb4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_GPIO_Init+0xb4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <MX_GPIO_Init+0xb4>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_GPIO_Init+0xb4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2103      	movs	r1, #3
 8000df6:	4812      	ldr	r0, [pc, #72]	; (8000e40 <MX_GPIO_Init+0xb8>)
 8000df8:	f000 fc88 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4619      	mov	r1, r3
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <MX_GPIO_Init+0xb8>)
 8000e14:	f000 face 	bl	80013b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_GPIO_Init+0xb8>)
 8000e2e:	f000 fac1 	bl	80013b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e32:	bf00      	nop
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020800 	.word	0x40020800

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x8>
	...

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <HAL_SPI_MspInit+0x94>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d133      	bne.n	8000f2a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_SPI_MspInit+0x98>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <HAL_SPI_MspInit+0x98>)
 8000ecc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_SPI_MspInit+0x98>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_SPI_MspInit+0x98>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_SPI_MspInit+0x98>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_SPI_MspInit+0x98>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000efa:	23e0      	movs	r3, #224	; 0xe0
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <HAL_SPI_MspInit+0x9c>)
 8000f16:	f000 fa4d 	bl	80013b4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2023      	movs	r0, #35	; 0x23
 8000f20:	f000 f9ef 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f24:	2023      	movs	r0, #35	; 0x23
 8000f26:	f000 fa08 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40013000 	.word	0x40013000
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 f89a 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <SPI1_IRQHandler+0x10>)
 8000f9a:	f001 fcfd 	bl	8002998 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000028 	.word	0x20000028

08000fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001004 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fd2:	490e      	ldr	r1, [pc, #56]	; (800100c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe8:	4c0b      	ldr	r4, [pc, #44]	; (8001018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff6:	f7ff ffd7 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f001 ff25 	bl	8002e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f7ff fda7 	bl	8000b50 <main>
  bx  lr    
 8001002:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001004:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001010:	08002ec8 	.word	0x08002ec8
  ldr r2, =_sbss
 8001014:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001018:	200000c8 	.word	0x200000c8

0800101c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC_IRQHandler>
	...

08001020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <HAL_Init+0x40>)
 800102a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_Init+0x40>)
 8001036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_Init+0x40>)
 8001042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f94f 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f808 	bl	8001064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff fefc 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023c00 	.word	0x40023c00

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x54>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x58>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f967 	bl	8001356 <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00e      	b.n	80010b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	d80a      	bhi.n	80010ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f000 f92f 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_InitTick+0x5c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000004 	.word	0x20000004

080010c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x20>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x24>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <HAL_IncTick+0x24>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008
 80010e8:	200000c4 	.word	0x200000c4

080010ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <HAL_GetTick+0x14>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200000c4 	.word	0x200000c4

08001104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff ffee 	bl	80010ec <HAL_GetTick>
 8001110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111c:	d005      	beq.n	800112a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_Delay+0x44>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800112a:	bf00      	nop
 800112c:	f7ff ffde 	bl	80010ec <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f7      	bhi.n	800112c <HAL_Delay+0x28>
  {
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff29 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff3e 	bl	8001194 <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff8e 	bl	8001240 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5d 	bl	80011ec <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff31 	bl	80011b0 <__NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffa2 	bl	80012a8 <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d004      	beq.n	800138c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e00c      	b.n	80013a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2205      	movs	r2, #5
 8001390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	e177      	b.n	80016c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8166 	bne.w	80016ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d005      	beq.n	8001406 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001402:	2b02      	cmp	r3, #2
 8001404:	d130      	bne.n	8001468 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800143c:	2201      	movs	r2, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	f003 0201 	and.w	r2, r3, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b03      	cmp	r3, #3
 8001472:	d017      	beq.n	80014a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d123      	bne.n	80014f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	08da      	lsrs	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3208      	adds	r2, #8
 80014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	08da      	lsrs	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3208      	adds	r2, #8
 80014f2:	69b9      	ldr	r1, [r7, #24]
 80014f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0203 	and.w	r2, r3, #3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80c0 	beq.w	80016ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b66      	ldr	r3, [pc, #408]	; (80016d8 <HAL_GPIO_Init+0x324>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a65      	ldr	r2, [pc, #404]	; (80016d8 <HAL_GPIO_Init+0x324>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <HAL_GPIO_Init+0x324>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001556:	4a61      	ldr	r2, [pc, #388]	; (80016dc <HAL_GPIO_Init+0x328>)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a58      	ldr	r2, [pc, #352]	; (80016e0 <HAL_GPIO_Init+0x32c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d037      	beq.n	80015f2 <HAL_GPIO_Init+0x23e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a57      	ldr	r2, [pc, #348]	; (80016e4 <HAL_GPIO_Init+0x330>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d031      	beq.n	80015ee <HAL_GPIO_Init+0x23a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a56      	ldr	r2, [pc, #344]	; (80016e8 <HAL_GPIO_Init+0x334>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d02b      	beq.n	80015ea <HAL_GPIO_Init+0x236>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a55      	ldr	r2, [pc, #340]	; (80016ec <HAL_GPIO_Init+0x338>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d025      	beq.n	80015e6 <HAL_GPIO_Init+0x232>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a54      	ldr	r2, [pc, #336]	; (80016f0 <HAL_GPIO_Init+0x33c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d01f      	beq.n	80015e2 <HAL_GPIO_Init+0x22e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a53      	ldr	r2, [pc, #332]	; (80016f4 <HAL_GPIO_Init+0x340>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d019      	beq.n	80015de <HAL_GPIO_Init+0x22a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a52      	ldr	r2, [pc, #328]	; (80016f8 <HAL_GPIO_Init+0x344>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0x226>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a51      	ldr	r2, [pc, #324]	; (80016fc <HAL_GPIO_Init+0x348>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00d      	beq.n	80015d6 <HAL_GPIO_Init+0x222>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a50      	ldr	r2, [pc, #320]	; (8001700 <HAL_GPIO_Init+0x34c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x21e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4f      	ldr	r2, [pc, #316]	; (8001704 <HAL_GPIO_Init+0x350>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_Init+0x21a>
 80015ca:	2309      	movs	r3, #9
 80015cc:	e012      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015ce:	230a      	movs	r3, #10
 80015d0:	e010      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015d2:	2308      	movs	r3, #8
 80015d4:	e00e      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015d6:	2307      	movs	r3, #7
 80015d8:	e00c      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015da:	2306      	movs	r3, #6
 80015dc:	e00a      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015de:	2305      	movs	r3, #5
 80015e0:	e008      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015e2:	2304      	movs	r3, #4
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015e6:	2303      	movs	r3, #3
 80015e8:	e004      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_Init+0x240>
 80015f2:	2300      	movs	r3, #0
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	f002 0203 	and.w	r2, r2, #3
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	4093      	lsls	r3, r2
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001604:	4935      	ldr	r1, [pc, #212]	; (80016dc <HAL_GPIO_Init+0x328>)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <HAL_GPIO_Init+0x354>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001636:	4a34      	ldr	r2, [pc, #208]	; (8001708 <HAL_GPIO_Init+0x354>)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <HAL_GPIO_Init+0x354>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001660:	4a29      	ldr	r2, [pc, #164]	; (8001708 <HAL_GPIO_Init+0x354>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001666:	4b28      	ldr	r3, [pc, #160]	; (8001708 <HAL_GPIO_Init+0x354>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800168a:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <HAL_GPIO_Init+0x354>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_GPIO_Init+0x354>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <HAL_GPIO_Init+0x354>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3301      	adds	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	f67f ae84 	bls.w	80013d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40013800 	.word	0x40013800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40021400 	.word	0x40021400
 80016f8:	40021800 	.word	0x40021800
 80016fc:	40021c00 	.word	0x40021c00
 8001700:	40022000 	.word	0x40022000
 8001704:	40022400 	.word	0x40022400
 8001708:	40013c00 	.word	0x40013c00

0800170c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
 8001718:	4613      	mov	r3, r2
 800171a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800171c:	787b      	ldrb	r3, [r7, #1]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001728:	e003      	b.n	8001732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	041a      	lsls	r2, r3, #16
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	619a      	str	r2, [r3, #24]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800176c:	f7ff fcbe 	bl	80010ec <HAL_GetTick>
 8001770:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001772:	e009      	b.n	8001788 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001774:	f7ff fcba 	bl	80010ec <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001782:	d901      	bls.n	8001788 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e01f      	b.n	80017c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d1ee      	bne.n	8001774 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800179c:	f7ff fca6 	bl	80010ec <HAL_GetTick>
 80017a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017a2:	e009      	b.n	80017b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017a4:	f7ff fca2 	bl	80010ec <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017b2:	d901      	bls.n	80017b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e007      	b.n	80017c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017c4:	d1ee      	bne.n	80017a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	420e0040 	.word	0x420e0040
 80017d8:	40007000 	.word	0x40007000
 80017dc:	420e0044 	.word	0x420e0044

080017e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e267      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d075      	beq.n	80018ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017fe:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b04      	cmp	r3, #4
 8001808:	d00c      	beq.n	8001824 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180a:	4b85      	ldr	r3, [pc, #532]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001812:	2b08      	cmp	r3, #8
 8001814:	d112      	bne.n	800183c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001816:	4b82      	ldr	r3, [pc, #520]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001822:	d10b      	bne.n	800183c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	4b7e      	ldr	r3, [pc, #504]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d05b      	beq.n	80018e8 <HAL_RCC_OscConfig+0x108>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d157      	bne.n	80018e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e242      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001844:	d106      	bne.n	8001854 <HAL_RCC_OscConfig+0x74>
 8001846:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a75      	ldr	r2, [pc, #468]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e01d      	b.n	8001890 <HAL_RCC_OscConfig+0xb0>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0x98>
 800185e:	4b70      	ldr	r3, [pc, #448]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6f      	ldr	r2, [pc, #444]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b6d      	ldr	r3, [pc, #436]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a6c      	ldr	r2, [pc, #432]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0xb0>
 8001878:	4b69      	ldr	r3, [pc, #420]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a68      	ldr	r2, [pc, #416]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800187e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b66      	ldr	r3, [pc, #408]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a65      	ldr	r2, [pc, #404]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fc28 	bl	80010ec <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff fc24 	bl	80010ec <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e207      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0xc0>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fc14 	bl	80010ec <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff fc10 	bl	80010ec <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	; 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e1f3      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0xe8>
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d063      	beq.n	80019be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018f6:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800190a:	2b08      	cmp	r3, #8
 800190c:	d11c      	bne.n	8001948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800190e:	4b44      	ldr	r3, [pc, #272]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x152>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e1c7      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4937      	ldr	r1, [pc, #220]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	e03a      	b.n	80019be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_RCC_OscConfig+0x244>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7ff fbc9 	bl	80010ec <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff fbc5 	bl	80010ec <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1a8      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4925      	ldr	r1, [pc, #148]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_OscConfig+0x244>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fba8 	bl	80010ec <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff fba4 	bl	80010ec <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e187      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d036      	beq.n	8001a38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d016      	beq.n	8001a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_RCC_OscConfig+0x248>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d8:	f7ff fb88 	bl	80010ec <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff fb84 	bl	80010ec <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e167      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_OscConfig+0x240>)
 80019f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x200>
 80019fe:	e01b      	b.n	8001a38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_OscConfig+0x248>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fb71 	bl	80010ec <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	e00e      	b.n	8001a2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fb6d 	bl	80010ec <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d907      	bls.n	8001a2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e150      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	42470000 	.word	0x42470000
 8001a28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2c:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1ea      	bne.n	8001a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8097 	beq.w	8001b74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4a:	4b81      	ldr	r3, [pc, #516]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10f      	bne.n	8001a76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	4b7d      	ldr	r3, [pc, #500]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a7c      	ldr	r2, [pc, #496]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b7a      	ldr	r3, [pc, #488]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a72:	2301      	movs	r3, #1
 8001a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a76:	4b77      	ldr	r3, [pc, #476]	; (8001c54 <HAL_RCC_OscConfig+0x474>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d118      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a82:	4b74      	ldr	r3, [pc, #464]	; (8001c54 <HAL_RCC_OscConfig+0x474>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a73      	ldr	r2, [pc, #460]	; (8001c54 <HAL_RCC_OscConfig+0x474>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fb2d 	bl	80010ec <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a96:	f7ff fb29 	bl	80010ec <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e10c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0x474>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x2ea>
 8001abc:	4b64      	ldr	r3, [pc, #400]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac0:	4a63      	ldr	r2, [pc, #396]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac8:	e01c      	b.n	8001b04 <HAL_RCC_OscConfig+0x324>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x30c>
 8001ad2:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	4a5e      	ldr	r2, [pc, #376]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ade:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	4a5b      	ldr	r2, [pc, #364]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0x324>
 8001aec:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	6713      	str	r3, [r2, #112]	; 0x70
 8001af8:	4b55      	ldr	r3, [pc, #340]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afc:	4a54      	ldr	r2, [pc, #336]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001afe:	f023 0304 	bic.w	r3, r3, #4
 8001b02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d015      	beq.n	8001b38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7ff faee 	bl	80010ec <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b14:	f7ff faea 	bl	80010ec <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e0cb      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2a:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0ee      	beq.n	8001b14 <HAL_RCC_OscConfig+0x334>
 8001b36:	e014      	b.n	8001b62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b38:	f7ff fad8 	bl	80010ec <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff fad4 	bl	80010ec <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e0b5      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b56:	4b3e      	ldr	r3, [pc, #248]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ee      	bne.n	8001b40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b68:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	4a38      	ldr	r2, [pc, #224]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80a1 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b7e:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d05c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d141      	bne.n	8001c16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_RCC_OscConfig+0x478>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff faa8 	bl	80010ec <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff faa4 	bl	80010ec <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e087      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69da      	ldr	r2, [r3, #28]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	019b      	lsls	r3, r3, #6
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	041b      	lsls	r3, r3, #16
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	061b      	lsls	r3, r3, #24
 8001be2:	491b      	ldr	r1, [pc, #108]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_RCC_OscConfig+0x478>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff fa7d 	bl	80010ec <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff fa79 	bl	80010ec <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e05c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x416>
 8001c14:	e054      	b.n	8001cc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_RCC_OscConfig+0x478>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fa66 	bl	80010ec <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff fa62 	bl	80010ec <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e045      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_OscConfig+0x470>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x444>
 8001c42:	e03d      	b.n	8001cc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e038      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000
 8001c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_RCC_OscConfig+0x4ec>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d028      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d121      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d11a      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d111      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	085b      	lsrs	r3, r3, #1
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0cc      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b68      	ldr	r3, [pc, #416]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d90c      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0b8      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d020      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d24:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d48:	4b50      	ldr	r3, [pc, #320]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	494d      	ldr	r1, [pc, #308]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d044      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d119      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e07f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8e:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e06f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e067      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f023 0203 	bic.w	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4934      	ldr	r1, [pc, #208]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc0:	f7ff f994 	bl	80010ec <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc8:	f7ff f990 	bl	80010ec <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e04f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 020c 	and.w	r2, r3, #12
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d1eb      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d20c      	bcs.n	8001e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCC_ClockConfig+0x1b8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e032      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4916      	ldr	r1, [pc, #88]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	490e      	ldr	r1, [pc, #56]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e56:	f000 f821 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	490a      	ldr	r1, [pc, #40]	; (8001e90 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	5ccb      	ldrb	r3, [r1, r3]
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x1c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f8f4 	bl	8001064 <HAL_InitTick>

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023c00 	.word	0x40023c00
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	08002ea8 	.word	0x08002ea8
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea0:	b094      	sub	sp, #80	; 0x50
 8001ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eac:	2300      	movs	r3, #0
 8001eae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eb4:	4b79      	ldr	r3, [pc, #484]	; (800209c <HAL_RCC_GetSysClockFreq+0x200>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d00d      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x40>
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	f200 80e1 	bhi.w	8002088 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d003      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ece:	e0db      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ed0:	4b73      	ldr	r3, [pc, #460]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ed2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ed4:	e0db      	b.n	800208e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ed6:	4b73      	ldr	r3, [pc, #460]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ed8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eda:	e0d8      	b.n	800208e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001edc:	4b6f      	ldr	r3, [pc, #444]	; (800209c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ee6:	4b6d      	ldr	r3, [pc, #436]	; (800209c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d063      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef2:	4b6a      	ldr	r3, [pc, #424]	; (800209c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	2200      	movs	r2, #0
 8001efa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001efc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
 8001f06:	2300      	movs	r3, #0
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f0e:	4622      	mov	r2, r4
 8001f10:	462b      	mov	r3, r5
 8001f12:	f04f 0000 	mov.w	r0, #0
 8001f16:	f04f 0100 	mov.w	r1, #0
 8001f1a:	0159      	lsls	r1, r3, #5
 8001f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f20:	0150      	lsls	r0, r2, #5
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4621      	mov	r1, r4
 8001f28:	1a51      	subs	r1, r2, r1
 8001f2a:	6139      	str	r1, [r7, #16]
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f40:	4659      	mov	r1, fp
 8001f42:	018b      	lsls	r3, r1, #6
 8001f44:	4651      	mov	r1, sl
 8001f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f4a:	4651      	mov	r1, sl
 8001f4c:	018a      	lsls	r2, r1, #6
 8001f4e:	4651      	mov	r1, sl
 8001f50:	ebb2 0801 	subs.w	r8, r2, r1
 8001f54:	4659      	mov	r1, fp
 8001f56:	eb63 0901 	sbc.w	r9, r3, r1
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f6e:	4690      	mov	r8, r2
 8001f70:	4699      	mov	r9, r3
 8001f72:	4623      	mov	r3, r4
 8001f74:	eb18 0303 	adds.w	r3, r8, r3
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	462b      	mov	r3, r5
 8001f7c:	eb49 0303 	adc.w	r3, r9, r3
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f8e:	4629      	mov	r1, r5
 8001f90:	024b      	lsls	r3, r1, #9
 8001f92:	4621      	mov	r1, r4
 8001f94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f98:	4621      	mov	r1, r4
 8001f9a:	024a      	lsls	r2, r1, #9
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fac:	f7fe f91e 	bl	80001ec <__aeabi_uldivmod>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fb8:	e058      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fba:	4b38      	ldr	r3, [pc, #224]	; (800209c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	099b      	lsrs	r3, r3, #6
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fca:	623b      	str	r3, [r7, #32]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fd4:	4642      	mov	r2, r8
 8001fd6:	464b      	mov	r3, r9
 8001fd8:	f04f 0000 	mov.w	r0, #0
 8001fdc:	f04f 0100 	mov.w	r1, #0
 8001fe0:	0159      	lsls	r1, r3, #5
 8001fe2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe6:	0150      	lsls	r0, r2, #5
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4641      	mov	r1, r8
 8001fee:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ff2:	4649      	mov	r1, r9
 8001ff4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002004:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002008:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800200c:	ebb2 040a 	subs.w	r4, r2, sl
 8002010:	eb63 050b 	sbc.w	r5, r3, fp
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	00eb      	lsls	r3, r5, #3
 800201e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002022:	00e2      	lsls	r2, r4, #3
 8002024:	4614      	mov	r4, r2
 8002026:	461d      	mov	r5, r3
 8002028:	4643      	mov	r3, r8
 800202a:	18e3      	adds	r3, r4, r3
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	464b      	mov	r3, r9
 8002030:	eb45 0303 	adc.w	r3, r5, r3
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002042:	4629      	mov	r1, r5
 8002044:	028b      	lsls	r3, r1, #10
 8002046:	4621      	mov	r1, r4
 8002048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800204c:	4621      	mov	r1, r4
 800204e:	028a      	lsls	r2, r1, #10
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002056:	2200      	movs	r2, #0
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	61fa      	str	r2, [r7, #28]
 800205c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002060:	f7fe f8c4 	bl	80001ec <__aeabi_uldivmod>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4613      	mov	r3, r2
 800206a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_GetSysClockFreq+0x200>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	0c1b      	lsrs	r3, r3, #16
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	3301      	adds	r3, #1
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800207c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800207e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002080:	fbb2 f3f3 	udiv	r3, r2, r3
 8002084:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002086:	e002      	b.n	800208e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800208c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002090:	4618      	mov	r0, r3
 8002092:	3750      	adds	r7, #80	; 0x50
 8002094:	46bd      	mov	sp, r7
 8002096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	00f42400 	.word	0x00f42400
 80020a4:	007a1200 	.word	0x007a1200

080020a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07b      	b.n	80021b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d108      	bne.n	80020d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ca:	d009      	beq.n	80020e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	61da      	str	r2, [r3, #28]
 80020d2:	e005      	b.n	80020e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fed0 	bl	8000ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002116:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002164:	ea42 0103 	orr.w	r1, r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	0c1b      	lsrs	r3, r3, #16
 800217e:	f003 0104 	and.w	r1, r3, #4
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	f003 0210 	and.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	69da      	ldr	r2, [r3, #28]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b088      	sub	sp, #32
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	4613      	mov	r3, r2
 80021c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_SPI_Transmit+0x22>
 80021d8:	2302      	movs	r3, #2
 80021da:	e126      	b.n	800242a <HAL_SPI_Transmit+0x270>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021e4:	f7fe ff82 	bl	80010ec <HAL_GetTick>
 80021e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d002      	beq.n	8002200 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
 80021fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021fe:	e10b      	b.n	8002418 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_SPI_Transmit+0x52>
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002210:	e102      	b.n	8002418 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2203      	movs	r2, #3
 8002216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	88fa      	ldrh	r2, [r7, #6]
 8002230:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002258:	d10f      	bne.n	800227a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002268:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002278:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002284:	2b40      	cmp	r3, #64	; 0x40
 8002286:	d007      	beq.n	8002298 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022a0:	d14b      	bne.n	800233a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_SPI_Transmit+0xf6>
 80022aa:	8afb      	ldrh	r3, [r7, #22]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d13e      	bne.n	800232e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	881a      	ldrh	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	1c9a      	adds	r2, r3, #2
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022d4:	e02b      	b.n	800232e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d112      	bne.n	800230a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	881a      	ldrh	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	1c9a      	adds	r2, r3, #2
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	86da      	strh	r2, [r3, #54]	; 0x36
 8002308:	e011      	b.n	800232e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800230a:	f7fe feef 	bl	80010ec <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d803      	bhi.n	8002322 <HAL_SPI_Transmit+0x168>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d102      	bne.n	8002328 <HAL_SPI_Transmit+0x16e>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800232c:	e074      	b.n	8002418 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002332:	b29b      	uxth	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ce      	bne.n	80022d6 <HAL_SPI_Transmit+0x11c>
 8002338:	e04c      	b.n	80023d4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_SPI_Transmit+0x18e>
 8002342:	8afb      	ldrh	r3, [r7, #22]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d140      	bne.n	80023ca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	330c      	adds	r3, #12
 8002352:	7812      	ldrb	r2, [r2, #0]
 8002354:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800236e:	e02c      	b.n	80023ca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b02      	cmp	r3, #2
 800237c:	d113      	bne.n	80023a6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	330c      	adds	r3, #12
 8002388:	7812      	ldrb	r2, [r2, #0]
 800238a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80023a4:	e011      	b.n	80023ca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023a6:	f7fe fea1 	bl	80010ec <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d803      	bhi.n	80023be <HAL_SPI_Transmit+0x204>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d102      	bne.n	80023c4 <HAL_SPI_Transmit+0x20a>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023c8:	e026      	b.n	8002418 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1cd      	bne.n	8002370 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fceb 	bl	8002db4 <SPI_EndRxTxTransaction>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10a      	bne.n	8002408 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	77fb      	strb	r3, [r7, #31]
 8002414:	e000      	b.n	8002418 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002416:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002428:	7ffb      	ldrb	r3, [r7, #31]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b088      	sub	sp, #32
 8002436:	af02      	add	r7, sp, #8
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	4613      	mov	r3, r2
 8002440:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800244e:	d112      	bne.n	8002476 <HAL_SPI_Receive+0x44>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10e      	bne.n	8002476 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2204      	movs	r2, #4
 800245c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002460:	88fa      	ldrh	r2, [r7, #6]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f8f1 	bl	8002654 <HAL_SPI_TransmitReceive>
 8002472:	4603      	mov	r3, r0
 8002474:	e0ea      	b.n	800264c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_SPI_Receive+0x52>
 8002480:	2302      	movs	r3, #2
 8002482:	e0e3      	b.n	800264c <HAL_SPI_Receive+0x21a>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800248c:	f7fe fe2e 	bl	80010ec <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d002      	beq.n	80024a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800249e:	2302      	movs	r3, #2
 80024a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024a2:	e0ca      	b.n	800263a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_SPI_Receive+0x7e>
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024b4:	e0c1      	b.n	800263a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2204      	movs	r2, #4
 80024ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	88fa      	ldrh	r2, [r7, #6]
 80024ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	88fa      	ldrh	r2, [r7, #6]
 80024d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024fc:	d10f      	bne.n	800251e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800250c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d007      	beq.n	800253c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800253a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d162      	bne.n	800260a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002544:	e02e      	b.n	80025a4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	d115      	bne.n	8002580 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f103 020c 	add.w	r2, r3, #12
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	7812      	ldrb	r2, [r2, #0]
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800257e:	e011      	b.n	80025a4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002580:	f7fe fdb4 	bl	80010ec <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d803      	bhi.n	8002598 <HAL_SPI_Receive+0x166>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002596:	d102      	bne.n	800259e <HAL_SPI_Receive+0x16c>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d102      	bne.n	80025a4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025a2:	e04a      	b.n	800263a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1cb      	bne.n	8002546 <HAL_SPI_Receive+0x114>
 80025ae:	e031      	b.n	8002614 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d113      	bne.n	80025e6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	b292      	uxth	r2, r2
 80025ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	1c9a      	adds	r2, r3, #2
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025e4:	e011      	b.n	800260a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025e6:	f7fe fd81 	bl	80010ec <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d803      	bhi.n	80025fe <HAL_SPI_Receive+0x1cc>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d102      	bne.n	8002604 <HAL_SPI_Receive+0x1d2>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002608:	e017      	b.n	800263a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1cd      	bne.n	80025b0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	6839      	ldr	r1, [r7, #0]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fb65 	bl	8002ce8 <SPI_EndRxTransaction>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
 8002636:	e000      	b.n	800263a <HAL_SPI_Receive+0x208>
  }

error :
 8002638:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800264a:	7dfb      	ldrb	r3, [r7, #23]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08c      	sub	sp, #48	; 0x30
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002662:	2301      	movs	r3, #1
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_SPI_TransmitReceive+0x26>
 8002676:	2302      	movs	r3, #2
 8002678:	e18a      	b.n	8002990 <HAL_SPI_TransmitReceive+0x33c>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002682:	f7fe fd33 	bl	80010ec <HAL_GetTick>
 8002686:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800268e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002698:	887b      	ldrh	r3, [r7, #2]
 800269a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800269c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d00f      	beq.n	80026c4 <HAL_SPI_TransmitReceive+0x70>
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026aa:	d107      	bne.n	80026bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d103      	bne.n	80026bc <HAL_SPI_TransmitReceive+0x68>
 80026b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d003      	beq.n	80026c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
 80026be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026c2:	e15b      	b.n	800297c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_SPI_TransmitReceive+0x82>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_SPI_TransmitReceive+0x82>
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026dc:	e14e      	b.n	800297c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d003      	beq.n	80026f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2205      	movs	r2, #5
 80026ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	887a      	ldrh	r2, [r7, #2]
 8002702:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	887a      	ldrh	r2, [r7, #2]
 800271a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	2b40      	cmp	r3, #64	; 0x40
 8002734:	d007      	beq.n	8002746 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800274e:	d178      	bne.n	8002842 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <HAL_SPI_TransmitReceive+0x10a>
 8002758:	8b7b      	ldrh	r3, [r7, #26]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d166      	bne.n	800282c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	881a      	ldrh	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	1c9a      	adds	r2, r3, #2
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002782:	e053      	b.n	800282c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b02      	cmp	r3, #2
 8002790:	d11b      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x176>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d016      	beq.n	80027ca <HAL_SPI_TransmitReceive+0x176>
 800279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d113      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	881a      	ldrh	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	1c9a      	adds	r2, r3, #2
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d119      	bne.n	800280c <HAL_SPI_TransmitReceive+0x1b8>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d014      	beq.n	800280c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	b292      	uxth	r2, r2
 80027ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	1c9a      	adds	r2, r3, #2
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002808:	2301      	movs	r3, #1
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800280c:	f7fe fc6e 	bl	80010ec <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002818:	429a      	cmp	r2, r3
 800281a:	d807      	bhi.n	800282c <HAL_SPI_TransmitReceive+0x1d8>
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d003      	beq.n	800282c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800282a:	e0a7      	b.n	800297c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1a6      	bne.n	8002784 <HAL_SPI_TransmitReceive+0x130>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1a1      	bne.n	8002784 <HAL_SPI_TransmitReceive+0x130>
 8002840:	e07c      	b.n	800293c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_SPI_TransmitReceive+0x1fc>
 800284a:	8b7b      	ldrh	r3, [r7, #26]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d16b      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	7812      	ldrb	r2, [r2, #0]
 800285c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002876:	e057      	b.n	8002928 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b02      	cmp	r3, #2
 8002884:	d11c      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x26c>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d017      	beq.n	80028c0 <HAL_SPI_TransmitReceive+0x26c>
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	2b01      	cmp	r3, #1
 8002894:	d114      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	330c      	adds	r3, #12
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d119      	bne.n	8002902 <HAL_SPI_TransmitReceive+0x2ae>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d014      	beq.n	8002902 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028fe:	2301      	movs	r3, #1
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002902:	f7fe fbf3 	bl	80010ec <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800290e:	429a      	cmp	r2, r3
 8002910:	d803      	bhi.n	800291a <HAL_SPI_TransmitReceive+0x2c6>
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d102      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x2cc>
 800291a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291c:	2b00      	cmp	r3, #0
 800291e:	d103      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002926:	e029      	b.n	800297c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1a2      	bne.n	8002878 <HAL_SPI_TransmitReceive+0x224>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d19d      	bne.n	8002878 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800293c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fa37 	bl	8002db4 <SPI_EndRxTxTransaction>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d006      	beq.n	800295a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002958:	e010      	b.n	800297c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10b      	bne.n	800297a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	e000      	b.n	800297c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800297a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800298c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002990:	4618      	mov	r0, r3
 8002992:	3730      	adds	r7, #48	; 0x30
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10e      	bne.n	80029d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d004      	beq.n	80029d8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
    return;
 80029d6:	e0ce      	b.n	8002b76 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_SPI_IRQHandler+0x5e>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d004      	beq.n	80029f6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4798      	blx	r3
    return;
 80029f4:	e0bf      	b.n	8002b76 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <HAL_SPI_IRQHandler+0x7e>
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80b0 	beq.w	8002b76 <HAL_SPI_IRQHandler+0x1de>
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80aa 	beq.w	8002b76 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d023      	beq.n	8002a74 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d011      	beq.n	8002a5c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3c:	f043 0204 	orr.w	r2, r3, #4
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	e00b      	b.n	8002a74 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
        return;
 8002a72:	e080      	b.n	8002b76 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d014      	beq.n	8002aa8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f043 0208 	orr.w	r2, r3, #8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d04f      	beq.n	8002b74 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ae2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d104      	bne.n	8002b00 <HAL_SPI_IRQHandler+0x168>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d034      	beq.n	8002b6a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0203 	bic.w	r2, r2, #3
 8002b0e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d011      	beq.n	8002b3c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1c:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_SPI_IRQHandler+0x1e4>)
 8002b1e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe fc22 	bl	800136e <HAL_DMA_Abort_IT>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d016      	beq.n	8002b72 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b48:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <HAL_SPI_IRQHandler+0x1e4>)
 8002b4a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe fc0c 	bl	800136e <HAL_DMA_Abort_IT>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002b68:	e003      	b.n	8002b72 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f808 	bl	8002b80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b70:	e000      	b.n	8002b74 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002b72:	bf00      	nop
    return;
 8002b74:	bf00      	nop
  }
}
 8002b76:	3720      	adds	r7, #32
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	08002bb1 	.word	0x08002bb1

08002b80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ba2:	b2db      	uxtb	r3, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f7ff ffd8 	bl	8002b80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002be8:	f7fe fa80 	bl	80010ec <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bf8:	f7fe fa78 	bl	80010ec <HAL_GetTick>
 8002bfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bfe:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	015b      	lsls	r3, r3, #5
 8002c04:	0d1b      	lsrs	r3, r3, #20
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	fb02 f303 	mul.w	r3, r2, r3
 8002c0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c0e:	e054      	b.n	8002cba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c16:	d050      	beq.n	8002cba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c18:	f7fe fa68 	bl	80010ec <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d902      	bls.n	8002c2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d13d      	bne.n	8002caa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c46:	d111      	bne.n	8002c6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c50:	d004      	beq.n	8002c5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5a:	d107      	bne.n	8002c6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c74:	d10f      	bne.n	8002c96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e017      	b.n	8002cda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	bf0c      	ite	eq
 8002cca:	2301      	moveq	r3, #1
 8002ccc:	2300      	movne	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d19b      	bne.n	8002c10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000000 	.word	0x20000000

08002ce8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cfc:	d111      	bne.n	8002d22 <SPI_EndRxTransaction+0x3a>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d06:	d004      	beq.n	8002d12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d10:	d107      	bne.n	8002d22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d2a:	d12a      	bne.n	8002d82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d34:	d012      	beq.n	8002d5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2180      	movs	r1, #128	; 0x80
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff ff49 	bl	8002bd8 <SPI_WaitFlagStateUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d02d      	beq.n	8002da8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e026      	b.n	8002daa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2200      	movs	r2, #0
 8002d64:	2101      	movs	r1, #1
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7ff ff36 	bl	8002bd8 <SPI_WaitFlagStateUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01a      	beq.n	8002da8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e013      	b.n	8002daa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f7ff ff23 	bl	8002bd8 <SPI_WaitFlagStateUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9c:	f043 0220 	orr.w	r2, r3, #32
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e000      	b.n	8002daa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <SPI_EndRxTxTransaction+0x7c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <SPI_EndRxTxTransaction+0x80>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	0d5b      	lsrs	r3, r3, #21
 8002dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dd0:	fb02 f303 	mul.w	r3, r2, r3
 8002dd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dde:	d112      	bne.n	8002e06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2200      	movs	r2, #0
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f7ff fef4 	bl	8002bd8 <SPI_WaitFlagStateUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	f043 0220 	orr.w	r2, r3, #32
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e00f      	b.n	8002e26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1c:	2b80      	cmp	r3, #128	; 0x80
 8002e1e:	d0f2      	beq.n	8002e06 <SPI_EndRxTxTransaction+0x52>
 8002e20:	e000      	b.n	8002e24 <SPI_EndRxTxTransaction+0x70>
        break;
 8002e22:	bf00      	nop
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000000 	.word	0x20000000
 8002e34:	165e9f81 	.word	0x165e9f81

08002e38 <memset>:
 8002e38:	4402      	add	r2, r0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d100      	bne.n	8002e42 <memset+0xa>
 8002e40:	4770      	bx	lr
 8002e42:	f803 1b01 	strb.w	r1, [r3], #1
 8002e46:	e7f9      	b.n	8002e3c <memset+0x4>

08002e48 <__libc_init_array>:
 8002e48:	b570      	push	{r4, r5, r6, lr}
 8002e4a:	4d0d      	ldr	r5, [pc, #52]	; (8002e80 <__libc_init_array+0x38>)
 8002e4c:	4c0d      	ldr	r4, [pc, #52]	; (8002e84 <__libc_init_array+0x3c>)
 8002e4e:	1b64      	subs	r4, r4, r5
 8002e50:	10a4      	asrs	r4, r4, #2
 8002e52:	2600      	movs	r6, #0
 8002e54:	42a6      	cmp	r6, r4
 8002e56:	d109      	bne.n	8002e6c <__libc_init_array+0x24>
 8002e58:	4d0b      	ldr	r5, [pc, #44]	; (8002e88 <__libc_init_array+0x40>)
 8002e5a:	4c0c      	ldr	r4, [pc, #48]	; (8002e8c <__libc_init_array+0x44>)
 8002e5c:	f000 f818 	bl	8002e90 <_init>
 8002e60:	1b64      	subs	r4, r4, r5
 8002e62:	10a4      	asrs	r4, r4, #2
 8002e64:	2600      	movs	r6, #0
 8002e66:	42a6      	cmp	r6, r4
 8002e68:	d105      	bne.n	8002e76 <__libc_init_array+0x2e>
 8002e6a:	bd70      	pop	{r4, r5, r6, pc}
 8002e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e70:	4798      	blx	r3
 8002e72:	3601      	adds	r6, #1
 8002e74:	e7ee      	b.n	8002e54 <__libc_init_array+0xc>
 8002e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e7a:	4798      	blx	r3
 8002e7c:	3601      	adds	r6, #1
 8002e7e:	e7f2      	b.n	8002e66 <__libc_init_array+0x1e>
 8002e80:	08002ec0 	.word	0x08002ec0
 8002e84:	08002ec0 	.word	0x08002ec0
 8002e88:	08002ec0 	.word	0x08002ec0
 8002e8c:	08002ec4 	.word	0x08002ec4

08002e90 <_init>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	bf00      	nop
 8002e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e96:	bc08      	pop	{r3}
 8002e98:	469e      	mov	lr, r3
 8002e9a:	4770      	bx	lr

08002e9c <_fini>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	bf00      	nop
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr
