
LoRa_Transmeter_STM32G030F6P6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d94  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002e4c  08002e4c  00012e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb0  08002eb0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb0  08002eb0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb0  08002eb0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000010  08002ec8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002ec8  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000681c  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016be  00000000  00000000  00026897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  00027f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000053e  00000000  00000000  00028658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000135fc  00000000  00000000  00028b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008480  00000000  00000000  0003c192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078485  00000000  00000000  00044612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000017d8  00000000  00000000  000bca98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000be270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002e34 	.word	0x08002e34

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08002e34 	.word	0x08002e34

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b08f      	sub	sp, #60	; 0x3c
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 915       ;
 80003f4:	200c      	movs	r0, #12
 80003f6:	183b      	adds	r3, r7, r0
 80003f8:	4a13      	ldr	r2, [pc, #76]	; (8000448 <newLoRa+0x5c>)
 80003fa:	621a      	str	r2, [r3, #32]
	new_LoRa.spredingFactor        = SF_12      ;
 80003fc:	183b      	adds	r3, r7, r0
 80003fe:	2224      	movs	r2, #36	; 0x24
 8000400:	210c      	movs	r1, #12
 8000402:	5499      	strb	r1, [r3, r2]
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000404:	183b      	adds	r3, r7, r0
 8000406:	2225      	movs	r2, #37	; 0x25
 8000408:	2107      	movs	r1, #7
 800040a:	5499      	strb	r1, [r3, r2]
	new_LoRa.crcRate               = CR_4_5    ;
 800040c:	183b      	adds	r3, r7, r0
 800040e:	2226      	movs	r2, #38	; 0x26
 8000410:	2101      	movs	r1, #1
 8000412:	5499      	strb	r1, [r3, r2]
	new_LoRa.power				   = POWER_20db;
 8000414:	183b      	adds	r3, r7, r0
 8000416:	222a      	movs	r2, #42	; 0x2a
 8000418:	21ff      	movs	r1, #255	; 0xff
 800041a:	5499      	strb	r1, [r3, r2]
	new_LoRa.overCurrentProtection = 100       ;
 800041c:	183b      	adds	r3, r7, r0
 800041e:	222b      	movs	r2, #43	; 0x2b
 8000420:	2164      	movs	r1, #100	; 0x64
 8000422:	5499      	strb	r1, [r3, r2]
	new_LoRa.preamble			   = 8         ;
 8000424:	0001      	movs	r1, r0
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2208      	movs	r2, #8
 800042a:	851a      	strh	r2, [r3, #40]	; 0x28

	return new_LoRa;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	187a      	adds	r2, r7, r1
 8000430:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000432:	c313      	stmia	r3!, {r0, r1, r4}
 8000434:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000436:	c313      	stmia	r3!, {r0, r1, r4}
 8000438:	ca13      	ldmia	r2!, {r0, r1, r4}
 800043a:	c313      	stmia	r3!, {r0, r1, r4}
 800043c:	ca03      	ldmia	r2!, {r0, r1}
 800043e:	c303      	stmia	r3!, {r0, r1}
}
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	46bd      	mov	sp, r7
 8000444:	b00f      	add	sp, #60	; 0x3c
 8000446:	bd90      	pop	{r4, r7, pc}
 8000448:	00000393 	.word	0x00000393

0800044c <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800044c:	b5b0      	push	{r4, r5, r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000456:	250e      	movs	r5, #14
 8000458:	197c      	adds	r4, r7, r5
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2101      	movs	r1, #1
 800045e:	0018      	movs	r0, r3
 8000460:	f000 f9e8 	bl	8000834 <LoRa_read>
 8000464:	0003      	movs	r3, r0
 8000466:	7023      	strb	r3, [r4, #0]
	data = read;
 8000468:	200f      	movs	r0, #15
 800046a:	183b      	adds	r3, r7, r0
 800046c:	0029      	movs	r1, r5
 800046e:	187a      	adds	r2, r7, r1
 8000470:	7812      	ldrb	r2, [r2, #0]
 8000472:	701a      	strb	r2, [r3, #0]

	if(mode == SLEEP_MODE){
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d109      	bne.n	800048e <LoRa_gotoMode+0x42>
		data = (read & 0xF8) | 0x00;
 800047a:	183b      	adds	r3, r7, r0
 800047c:	187a      	adds	r2, r7, r1
 800047e:	7812      	ldrb	r2, [r2, #0]
 8000480:	2107      	movs	r1, #7
 8000482:	438a      	bics	r2, r1
 8000484:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = SLEEP_MODE;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2200      	movs	r2, #0
 800048a:	61da      	str	r2, [r3, #28]
 800048c:	e04e      	b.n	800052c <LoRa_gotoMode+0xe0>
	}else if (mode == STNBY_MODE){
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d110      	bne.n	80004b6 <LoRa_gotoMode+0x6a>
		data = (read & 0xF8) | 0x01;
 8000494:	230e      	movs	r3, #14
 8000496:	18fb      	adds	r3, r7, r3
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	b25b      	sxtb	r3, r3
 800049c:	2207      	movs	r2, #7
 800049e:	4393      	bics	r3, r2
 80004a0:	b25b      	sxtb	r3, r3
 80004a2:	2201      	movs	r2, #1
 80004a4:	4313      	orrs	r3, r2
 80004a6:	b25a      	sxtb	r2, r3
 80004a8:	230f      	movs	r3, #15
 80004aa:	18fb      	adds	r3, r7, r3
 80004ac:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = STNBY_MODE;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2201      	movs	r2, #1
 80004b2:	61da      	str	r2, [r3, #28]
 80004b4:	e03a      	b.n	800052c <LoRa_gotoMode+0xe0>
	}else if (mode == TRANSMIT_MODE){
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	2b03      	cmp	r3, #3
 80004ba:	d110      	bne.n	80004de <LoRa_gotoMode+0x92>
		data = (read & 0xF8) | 0x03;
 80004bc:	230e      	movs	r3, #14
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	b25b      	sxtb	r3, r3
 80004c4:	2207      	movs	r2, #7
 80004c6:	4393      	bics	r3, r2
 80004c8:	b25b      	sxtb	r3, r3
 80004ca:	2203      	movs	r2, #3
 80004cc:	4313      	orrs	r3, r2
 80004ce:	b25a      	sxtb	r2, r3
 80004d0:	230f      	movs	r3, #15
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = TRANSMIT_MODE;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2203      	movs	r2, #3
 80004da:	61da      	str	r2, [r3, #28]
 80004dc:	e026      	b.n	800052c <LoRa_gotoMode+0xe0>
	}else if (mode == RXCONTIN_MODE){
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	2b05      	cmp	r3, #5
 80004e2:	d110      	bne.n	8000506 <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | 0x05;
 80004e4:	230e      	movs	r3, #14
 80004e6:	18fb      	adds	r3, r7, r3
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	b25b      	sxtb	r3, r3
 80004ec:	2207      	movs	r2, #7
 80004ee:	4393      	bics	r3, r2
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	2205      	movs	r2, #5
 80004f4:	4313      	orrs	r3, r2
 80004f6:	b25a      	sxtb	r2, r3
 80004f8:	230f      	movs	r3, #15
 80004fa:	18fb      	adds	r3, r7, r3
 80004fc:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXCONTIN_MODE;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2205      	movs	r2, #5
 8000502:	61da      	str	r2, [r3, #28]
 8000504:	e012      	b.n	800052c <LoRa_gotoMode+0xe0>
	}else if (mode == RXSINGLE_MODE){
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	2b06      	cmp	r3, #6
 800050a:	d10f      	bne.n	800052c <LoRa_gotoMode+0xe0>
		data = (read & 0xF8) | 0x06;
 800050c:	230e      	movs	r3, #14
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b25b      	sxtb	r3, r3
 8000514:	2207      	movs	r2, #7
 8000516:	4393      	bics	r3, r2
 8000518:	b25b      	sxtb	r3, r3
 800051a:	2206      	movs	r2, #6
 800051c:	4313      	orrs	r3, r2
 800051e:	b25a      	sxtb	r2, r3
 8000520:	230f      	movs	r3, #15
 8000522:	18fb      	adds	r3, r7, r3
 8000524:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2206      	movs	r2, #6
 800052a:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 800052c:	230f      	movs	r3, #15
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	781a      	ldrb	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2101      	movs	r1, #1
 8000536:	0018      	movs	r0, r3
 8000538:	f000 f99a 	bl	8000870 <LoRa_write>
	//HAL_Delay(10);
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b004      	add	sp, #16
 8000542:	bdb0      	pop	{r4, r5, r7, pc}

08000544 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	1dbb      	adds	r3, r7, #6
 8000552:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	889b      	ldrh	r3, [r3, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	0019      	movs	r1, r3
 8000560:	f001 f836 	bl	80015d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	6998      	ldr	r0, [r3, #24]
 8000568:	23fa      	movs	r3, #250	; 0xfa
 800056a:	00dc      	lsls	r4, r3, #3
 800056c:	1dbb      	adds	r3, r7, #6
 800056e:	881a      	ldrh	r2, [r3, #0]
 8000570:	68b9      	ldr	r1, [r7, #8]
 8000572:	0023      	movs	r3, r4
 8000574:	f001 fddc 	bl	8002130 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	0018      	movs	r0, r3
 8000580:	f002 fa4c 	bl	8002a1c <HAL_SPI_GetState>
 8000584:	0003      	movs	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	d1f7      	bne.n	800057a <LoRa_readReg+0x36>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	6998      	ldr	r0, [r3, #24]
 800058e:	23fa      	movs	r3, #250	; 0xfa
 8000590:	00dc      	lsls	r4, r3, #3
 8000592:	2320      	movs	r3, #32
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	881a      	ldrh	r2, [r3, #0]
 8000598:	6839      	ldr	r1, [r7, #0]
 800059a:	0023      	movs	r3, r4
 800059c:	f001 ff20 	bl	80023e0 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	0018      	movs	r0, r3
 80005a8:	f002 fa38 	bl	8002a1c <HAL_SPI_GetState>
 80005ac:	0003      	movs	r3, r0
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d1f7      	bne.n	80005a2 <LoRa_readReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	889b      	ldrh	r3, [r3, #4]
 80005ba:	2201      	movs	r2, #1
 80005bc:	0019      	movs	r1, r3
 80005be:	f001 f807 	bl	80015d0 <HAL_GPIO_WritePin>
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b005      	add	sp, #20
 80005c8:	bd90      	pop	{r4, r7, pc}

080005ca <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80005ca:	b590      	push	{r4, r7, lr}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	1dbb      	adds	r3, r7, #6
 80005d8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	889b      	ldrh	r3, [r3, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	0019      	movs	r1, r3
 80005e6:	f000 fff3 	bl	80015d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	6998      	ldr	r0, [r3, #24]
 80005ee:	23fa      	movs	r3, #250	; 0xfa
 80005f0:	00dc      	lsls	r4, r3, #3
 80005f2:	1dbb      	adds	r3, r7, #6
 80005f4:	881a      	ldrh	r2, [r3, #0]
 80005f6:	68b9      	ldr	r1, [r7, #8]
 80005f8:	0023      	movs	r3, r4
 80005fa:	f001 fd99 	bl	8002130 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	0018      	movs	r0, r3
 8000606:	f002 fa09 	bl	8002a1c <HAL_SPI_GetState>
 800060a:	0003      	movs	r3, r0
 800060c:	2b01      	cmp	r3, #1
 800060e:	d1f7      	bne.n	8000600 <LoRa_writeReg+0x36>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	6998      	ldr	r0, [r3, #24]
 8000614:	23fa      	movs	r3, #250	; 0xfa
 8000616:	00dc      	lsls	r4, r3, #3
 8000618:	2320      	movs	r3, #32
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	881a      	ldrh	r2, [r3, #0]
 800061e:	6839      	ldr	r1, [r7, #0]
 8000620:	0023      	movs	r3, r4
 8000622:	f001 fd85 	bl	8002130 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	0018      	movs	r0, r3
 800062e:	f002 f9f5 	bl	8002a1c <HAL_SPI_GetState>
 8000632:	0003      	movs	r3, r0
 8000634:	2b01      	cmp	r3, #1
 8000636:	d1f7      	bne.n	8000628 <LoRa_writeReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	889b      	ldrh	r3, [r3, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	0019      	movs	r1, r3
 8000644:	f000 ffc4 	bl	80015d0 <HAL_GPIO_WritePin>
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b005      	add	sp, #20
 800064e:	bd90      	pop	{r4, r7, pc}

08000650 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	04db      	lsls	r3, r3, #19
 800065e:	115b      	asrs	r3, r3, #5
 8000660:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	0c1a      	lsrs	r2, r3, #16
 8000666:	240b      	movs	r4, #11
 8000668:	193b      	adds	r3, r7, r4
 800066a:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMsb, data);
 800066c:	193b      	adds	r3, r7, r4
 800066e:	781a      	ldrb	r2, [r3, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2106      	movs	r1, #6
 8000674:	0018      	movs	r0, r3
 8000676:	f000 f8fb 	bl	8000870 <LoRa_write>
	HAL_Delay(5);
 800067a:	2005      	movs	r0, #5
 800067c:	f000 fd6c 	bl	8001158 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	0a1a      	lsrs	r2, r3, #8
 8000684:	193b      	adds	r3, r7, r4
 8000686:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMid, data);
 8000688:	193b      	adds	r3, r7, r4
 800068a:	781a      	ldrb	r2, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2107      	movs	r1, #7
 8000690:	0018      	movs	r0, r3
 8000692:	f000 f8ed 	bl	8000870 <LoRa_write>
	HAL_Delay(5);
 8000696:	2005      	movs	r0, #5
 8000698:	f000 fd5e 	bl	8001158 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrLsb, data);
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2108      	movs	r1, #8
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 f8e0 	bl	8000870 <LoRa_write>
	HAL_Delay(5);
 80006b0:	2005      	movs	r0, #5
 80006b2:	f000 fd51 	bl	8001158 <HAL_Delay>
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b005      	add	sp, #20
 80006bc:	bd90      	pop	{r4, r7, pc}

080006be <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80006be:	b5b0      	push	{r4, r5, r7, lr}
 80006c0:	b084      	sub	sp, #16
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	2b0c      	cmp	r3, #12
 80006cc:	dd01      	ble.n	80006d2 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80006ce:	230c      	movs	r3, #12
 80006d0:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	dc01      	bgt.n	80006dc <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80006d8:	2307      	movs	r3, #7
 80006da:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80006dc:	250f      	movs	r5, #15
 80006de:	197c      	adds	r4, r7, r5
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	211e      	movs	r1, #30
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 f8a5 	bl	8000834 <LoRa_read>
 80006ea:	0003      	movs	r3, r0
 80006ec:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 80006ee:	200a      	movs	r0, #10
 80006f0:	f000 fd32 	bl	8001158 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	b2d9      	uxtb	r1, r3
 80006fc:	197b      	adds	r3, r7, r5
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	220f      	movs	r2, #15
 8000702:	4013      	ands	r3, r2
 8000704:	b2da      	uxtb	r2, r3
 8000706:	200e      	movs	r0, #14
 8000708:	183b      	adds	r3, r7, r0
 800070a:	188a      	adds	r2, r1, r2
 800070c:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);
 800070e:	183b      	adds	r3, r7, r0
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	211e      	movs	r1, #30
 8000716:	0018      	movs	r0, r3
 8000718:	f000 f8aa 	bl	8000870 <LoRa_write>
	HAL_Delay(10);
 800071c:	200a      	movs	r0, #10
 800071e:	f000 fd1b 	bl	8001158 <HAL_Delay>
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b004      	add	sp, #16
 8000728:	bdb0      	pop	{r4, r5, r7, pc}

0800072a <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	000a      	movs	r2, r1
 8000734:	1cfb      	adds	r3, r7, #3
 8000736:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000738:	1cfb      	adds	r3, r7, #3
 800073a:	781a      	ldrb	r2, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2109      	movs	r1, #9
 8000740:	0018      	movs	r0, r3
 8000742:	f000 f895 	bl	8000870 <LoRa_write>
	HAL_Delay(10);
 8000746:	200a      	movs	r0, #10
 8000748:	f000 fd06 	bl	8001158 <HAL_Delay>
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b002      	add	sp, #8
 8000752:	bd80      	pop	{r7, pc}

08000754 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	000a      	movs	r2, r1
 800075e:	1cfb      	adds	r3, r7, #3
 8000760:	701a      	strb	r2, [r3, #0]
	uint8_t	OcpTrim = 0;
 8000762:	230f      	movs	r3, #15
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]

	if(current<45)
 800076a:	1cfb      	adds	r3, r7, #3
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b2c      	cmp	r3, #44	; 0x2c
 8000770:	d802      	bhi.n	8000778 <LoRa_setOCP+0x24>
		current = 45;
 8000772:	1cfb      	adds	r3, r7, #3
 8000774:	222d      	movs	r2, #45	; 0x2d
 8000776:	701a      	strb	r2, [r3, #0]
	if(current>240)
 8000778:	1cfb      	adds	r3, r7, #3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2bf0      	cmp	r3, #240	; 0xf0
 800077e:	d902      	bls.n	8000786 <LoRa_setOCP+0x32>
		current = 240;
 8000780:	1cfb      	adds	r3, r7, #3
 8000782:	22f0      	movs	r2, #240	; 0xf0
 8000784:	701a      	strb	r2, [r3, #0]

	if(current <= 120)
 8000786:	1cfb      	adds	r3, r7, #3
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b78      	cmp	r3, #120	; 0x78
 800078c:	d80c      	bhi.n	80007a8 <LoRa_setOCP+0x54>
		OcpTrim = (current - 45)/5;
 800078e:	1cfb      	adds	r3, r7, #3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	3b2d      	subs	r3, #45	; 0x2d
 8000794:	2105      	movs	r1, #5
 8000796:	0018      	movs	r0, r3
 8000798:	f7ff fd3c 	bl	8000214 <__divsi3>
 800079c:	0003      	movs	r3, r0
 800079e:	001a      	movs	r2, r3
 80007a0:	230f      	movs	r3, #15
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	e00f      	b.n	80007c8 <LoRa_setOCP+0x74>
	else if(current <= 240)
 80007a8:	1cfb      	adds	r3, r7, #3
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2bf0      	cmp	r3, #240	; 0xf0
 80007ae:	d80b      	bhi.n	80007c8 <LoRa_setOCP+0x74>
		OcpTrim = (current + 30)/10;
 80007b0:	1cfb      	adds	r3, r7, #3
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	331e      	adds	r3, #30
 80007b6:	210a      	movs	r1, #10
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff fd2b 	bl	8000214 <__divsi3>
 80007be:	0003      	movs	r3, r0
 80007c0:	001a      	movs	r2, r3
 80007c2:	230f      	movs	r3, #15
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	701a      	strb	r2, [r3, #0]

	OcpTrim = OcpTrim + (1 << 5);
 80007c8:	210f      	movs	r1, #15
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	187a      	adds	r2, r7, r1
 80007ce:	7812      	ldrb	r2, [r2, #0]
 80007d0:	3220      	adds	r2, #32
 80007d2:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	210b      	movs	r1, #11
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 f847 	bl	8000870 <LoRa_write>
	HAL_Delay(10);
 80007e2:	200a      	movs	r0, #10
 80007e4:	f000 fcb8 	bl	8001158 <HAL_Delay>
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b004      	add	sp, #16
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80007f0:	b5b0      	push	{r4, r5, r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80007f8:	250f      	movs	r5, #15
 80007fa:	197c      	adds	r4, r7, r5
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	211e      	movs	r1, #30
 8000800:	0018      	movs	r0, r3
 8000802:	f000 f817 	bl	8000834 <LoRa_read>
 8000806:	0003      	movs	r3, r0
 8000808:	7023      	strb	r3, [r4, #0]

	data = read | 0x07;
 800080a:	200e      	movs	r0, #14
 800080c:	183b      	adds	r3, r7, r0
 800080e:	197a      	adds	r2, r7, r5
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	2107      	movs	r1, #7
 8000814:	430a      	orrs	r2, r1
 8000816:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000818:	183b      	adds	r3, r7, r0
 800081a:	781a      	ldrb	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	211e      	movs	r1, #30
 8000820:	0018      	movs	r0, r3
 8000822:	f000 f825 	bl	8000870 <LoRa_write>
	HAL_Delay(10);
 8000826:	200a      	movs	r0, #10
 8000828:	f000 fc96 	bl	8001158 <HAL_Delay>
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b004      	add	sp, #16
 8000832:	bdb0      	pop	{r4, r5, r7, pc}

08000834 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b087      	sub	sp, #28
 8000838:	af02      	add	r7, sp, #8
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	000a      	movs	r2, r1
 800083e:	1cfb      	adds	r3, r7, #3
 8000840:	701a      	strb	r2, [r3, #0]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000842:	1cfb      	adds	r3, r7, #3
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	227f      	movs	r2, #127	; 0x7f
 8000848:	4013      	ands	r3, r2
 800084a:	b2da      	uxtb	r2, r3
 800084c:	210e      	movs	r1, #14
 800084e:	187b      	adds	r3, r7, r1
 8000850:	701a      	strb	r2, [r3, #0]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000852:	240f      	movs	r4, #15
 8000854:	193b      	adds	r3, r7, r4
 8000856:	1879      	adds	r1, r7, r1
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	2201      	movs	r2, #1
 800085c:	9200      	str	r2, [sp, #0]
 800085e:	2201      	movs	r2, #1
 8000860:	f7ff fe70 	bl	8000544 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000864:	193b      	adds	r3, r7, r4
 8000866:	781b      	ldrb	r3, [r3, #0]
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b005      	add	sp, #20
 800086e:	bd90      	pop	{r4, r7, pc}

08000870 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af02      	add	r7, sp, #8
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	0008      	movs	r0, r1
 800087a:	0011      	movs	r1, r2
 800087c:	1cfb      	adds	r3, r7, #3
 800087e:	1c02      	adds	r2, r0, #0
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	1cbb      	adds	r3, r7, #2
 8000884:	1c0a      	adds	r2, r1, #0
 8000886:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000888:	1cfb      	adds	r3, r7, #3
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	4252      	negs	r2, r2
 8000890:	4313      	orrs	r3, r2
 8000892:	b2da      	uxtb	r2, r3
 8000894:	210e      	movs	r1, #14
 8000896:	187b      	adds	r3, r7, r1
 8000898:	701a      	strb	r2, [r3, #0]
	data = value;
 800089a:	200f      	movs	r0, #15
 800089c:	183b      	adds	r3, r7, r0
 800089e:	1cba      	adds	r2, r7, #2
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	701a      	strb	r2, [r3, #0]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80008a4:	183b      	adds	r3, r7, r0
 80008a6:	1879      	adds	r1, r7, r1
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	2201      	movs	r2, #1
 80008ac:	9200      	str	r2, [sp, #0]
 80008ae:	2201      	movs	r2, #1
 80008b0:	f7ff fe8b 	bl	80005ca <LoRa_writeReg>
	//HAL_Delay(5);
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b004      	add	sp, #16
 80008ba:	bd80      	pop	{r7, pc}

080008bc <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b087      	sub	sp, #28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	0008      	movs	r0, r1
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	0019      	movs	r1, r3
 80008ca:	240b      	movs	r4, #11
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	1c02      	adds	r2, r0, #0
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	230a      	movs	r3, #10
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	1c0a      	adds	r2, r1, #0
 80008d8:	701a      	strb	r2, [r3, #0]
	uint8_t addr;
	addr = address | 0x80;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	4252      	negs	r2, r2
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	2417      	movs	r4, #23
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	701a      	strb	r2, [r3, #0]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	6818      	ldr	r0, [r3, #0]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	889b      	ldrh	r3, [r3, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	0019      	movs	r1, r3
 80008f8:	f000 fe6a 	bl	80015d0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	6998      	ldr	r0, [r3, #24]
 8000900:	23fa      	movs	r3, #250	; 0xfa
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	1939      	adds	r1, r7, r4
 8000906:	2201      	movs	r2, #1
 8000908:	f001 fc12 	bl	8002130 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	0018      	movs	r0, r3
 8000914:	f002 f882 	bl	8002a1c <HAL_SPI_GetState>
 8000918:	0003      	movs	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d1f7      	bne.n	800090e <LoRa_BurstWrite+0x52>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6998      	ldr	r0, [r3, #24]
 8000922:	230a      	movs	r3, #10
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b29a      	uxth	r2, r3
 800092a:	23fa      	movs	r3, #250	; 0xfa
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f001 fbfe 	bl	8002130 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	0018      	movs	r0, r3
 800093c:	f002 f86e 	bl	8002a1c <HAL_SPI_GetState>
 8000940:	0003      	movs	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d1f7      	bne.n	8000936 <LoRa_BurstWrite+0x7a>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	889b      	ldrh	r3, [r3, #4]
 800094e:	2201      	movs	r2, #1
 8000950:	0019      	movs	r1, r3
 8000952:	f000 fe3d 	bl	80015d0 <HAL_GPIO_WritePin>
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b007      	add	sp, #28
 800095c:	bd90      	pop	{r4, r7, pc}

0800095e <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]

	return 1;
 8000966:	2301      	movs	r3, #1
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}

08000970 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	0019      	movs	r1, r3
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	1c0a      	adds	r2, r1, #0
 8000984:	801a      	strh	r2, [r3, #0]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2101      	movs	r1, #1
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff fd5b 	bl	800044c <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000996:	2513      	movs	r5, #19
 8000998:	197c      	adds	r4, r7, r5
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	210e      	movs	r1, #14
 800099e:	0018      	movs	r0, r3
 80009a0:	f7ff ff48 	bl	8000834 <LoRa_read>
 80009a4:	0003      	movs	r3, r0
 80009a6:	7023      	strb	r3, [r4, #0]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80009a8:	197b      	adds	r3, r7, r5
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	210d      	movs	r1, #13
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff ff5d 	bl	8000870 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2122      	movs	r1, #34	; 0x22
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff ff56 	bl	8000870 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	68ba      	ldr	r2, [r7, #8]
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	2100      	movs	r1, #0
 80009ce:	f7ff ff75 	bl	80008bc <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2103      	movs	r1, #3
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff fd38 	bl	800044c <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80009dc:	2513      	movs	r5, #19
 80009de:	197c      	adds	r4, r7, r5
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2112      	movs	r1, #18
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ff25 	bl	8000834 <LoRa_read>
 80009ea:	0003      	movs	r3, r0
 80009ec:	7023      	strb	r3, [r4, #0]
		if((read & 0x08)!=0){
 80009ee:	197b      	adds	r3, r7, r5
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2208      	movs	r2, #8
 80009f4:	4013      	ands	r3, r2
 80009f6:	d00d      	beq.n	8000a14 <LoRa_transmit+0xa4>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	2112      	movs	r1, #18
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff ff36 	bl	8000870 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	0011      	movs	r1, r2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff fd1e 	bl	800044c <LoRa_gotoMode>
			return 1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e014      	b.n	8000a3e <LoRa_transmit+0xce>
		}
		else{
			if(--timeout==0){
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	1d3a      	adds	r2, r7, #4
 8000a18:	8812      	ldrh	r2, [r2, #0]
 8000a1a:	3a01      	subs	r2, #1
 8000a1c:	801a      	strh	r2, [r3, #0]
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d107      	bne.n	8000a36 <LoRa_transmit+0xc6>
				LoRa_gotoMode(_LoRa, mode);
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff fd0d 	bl	800044c <LoRa_gotoMode>
				return 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e003      	b.n	8000a3e <LoRa_transmit+0xce>
			}
		}
		HAL_Delay(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f000 fb8e 	bl	8001158 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a3c:	e7ce      	b.n	80009dc <LoRa_transmit+0x6c>
	}
}
 8000a3e:	0018      	movs	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b006      	add	sp, #24
 8000a44:	bdb0      	pop	{r4, r5, r7, pc}

08000a46 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2105      	movs	r1, #5
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff fcfa 	bl	800044c <LoRa_gotoMode>
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b002      	add	sp, #8
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff ff77 	bl	800095e <LoRa_isvalid>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d100      	bne.n	8000a76 <LoRa_init+0x16>
 8000a74:	e0b3      	b.n	8000bde <LoRa_init+0x17e>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff fce6 	bl	800044c <LoRa_gotoMode>
			HAL_Delay(10);
 8000a80:	200a      	movs	r0, #10
 8000a82:	f000 fb69 	bl	8001158 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000a86:	260f      	movs	r6, #15
 8000a88:	19bc      	adds	r4, r7, r6
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff fed0 	bl	8000834 <LoRa_read>
 8000a94:	0003      	movs	r3, r0
 8000a96:	7023      	strb	r3, [r4, #0]
			HAL_Delay(10);
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f000 fb5d 	bl	8001158 <HAL_Delay>
			data = read | 0x80;
 8000a9e:	250e      	movs	r5, #14
 8000aa0:	197b      	adds	r3, r7, r5
 8000aa2:	0034      	movs	r4, r6
 8000aa4:	193a      	adds	r2, r7, r4
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	4249      	negs	r1, r1
 8000aac:	430a      	orrs	r2, r1
 8000aae:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegOpMode, data);
 8000ab0:	197b      	adds	r3, r7, r5
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff fed9 	bl	8000870 <LoRa_write>
			HAL_Delay(100);
 8000abe:	2064      	movs	r0, #100	; 0x64
 8000ac0:	f000 fb4a 	bl	8001158 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6a1a      	ldr	r2, [r3, #32]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff fdbf 	bl	8000650 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	222a      	movs	r2, #42	; 0x2a
 8000ad6:	5c9a      	ldrb	r2, [r3, r2]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	0011      	movs	r1, r2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff fe24 	bl	800072a <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	222b      	movs	r2, #43	; 0x2b
 8000ae6:	5c9a      	ldrb	r2, [r3, r2]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff fe31 	bl	8000754 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2223      	movs	r2, #35	; 0x23
 8000af6:	210c      	movs	r1, #12
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff feb9 	bl	8000870 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fe75 	bl	80007f0 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2224      	movs	r2, #36	; 0x24
 8000b0a:	5c9b      	ldrb	r3, [r3, r2]
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	0011      	movs	r1, r2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff fdd3 	bl	80006be <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	22ff      	movs	r2, #255	; 0xff
 8000b1c:	211f      	movs	r1, #31
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff fea6 	bl	8000870 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000b24:	197b      	adds	r3, r7, r5
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2225      	movs	r2, #37	; 0x25
 8000b2e:	5c9b      	ldrb	r3, [r3, r2]
 8000b30:	011b      	lsls	r3, r3, #4
 8000b32:	b2d9      	uxtb	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2226      	movs	r2, #38	; 0x26
 8000b38:	5c9b      	ldrb	r3, [r3, r2]
 8000b3a:	18db      	adds	r3, r3, r3
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	197b      	adds	r3, r7, r5
 8000b40:	188a      	adds	r2, r1, r2
 8000b42:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000b44:	197b      	adds	r3, r7, r5
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	211d      	movs	r1, #29
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff fe8f 	bl	8000870 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b56:	0a1b      	lsrs	r3, r3, #8
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2120      	movs	r1, #32
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff fe85 	bl	8000870 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2121      	movs	r1, #33	; 0x21
 8000b70:	0018      	movs	r0, r3
 8000b72:	f7ff fe7d 	bl	8000870 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000b76:	0026      	movs	r6, r4
 8000b78:	193c      	adds	r4, r7, r4
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2140      	movs	r1, #64	; 0x40
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff fe58 	bl	8000834 <LoRa_read>
 8000b84:	0003      	movs	r3, r0
 8000b86:	7023      	strb	r3, [r4, #0]
			data = read | 0x3F;
 8000b88:	197b      	adds	r3, r7, r5
 8000b8a:	0034      	movs	r4, r6
 8000b8c:	193a      	adds	r2, r7, r4
 8000b8e:	7812      	ldrb	r2, [r2, #0]
 8000b90:	213f      	movs	r1, #63	; 0x3f
 8000b92:	430a      	orrs	r2, r1
 8000b94:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000b96:	197b      	adds	r3, r7, r5
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2140      	movs	r1, #64	; 0x40
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff fe66 	bl	8000870 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fc4f 	bl	800044c <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000bb4:	200a      	movs	r0, #10
 8000bb6:	f000 facf 	bl	8001158 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000bba:	0025      	movs	r5, r4
 8000bbc:	193c      	adds	r4, r7, r4
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2142      	movs	r1, #66	; 0x42
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff fe36 	bl	8000834 <LoRa_read>
 8000bc8:	0003      	movs	r3, r0
 8000bca:	7023      	strb	r3, [r4, #0]
			if(read == 0x12)
 8000bcc:	197b      	adds	r3, r7, r5
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b12      	cmp	r3, #18
 8000bd2:	d101      	bne.n	8000bd8 <LoRa_init+0x178>
				return LORA_OK;
 8000bd4:	23c8      	movs	r3, #200	; 0xc8
 8000bd6:	e004      	b.n	8000be2 <LoRa_init+0x182>
			else
				return LORA_NOT_FOUND;
 8000bd8:	23ca      	movs	r3, #202	; 0xca
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	e001      	b.n	8000be2 <LoRa_init+0x182>
	}
	else {
		return LORA_UNAVAILABLE;
 8000bde:	23f8      	movs	r3, #248	; 0xf8
 8000be0:	33ff      	adds	r3, #255	; 0xff
	}
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b005      	add	sp, #20
 8000be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000bec <LoRa_defination>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);

void LoRa_defination(){
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b08d      	sub	sp, #52	; 0x34
 8000bf0:	af00      	add	r7, sp, #0
	myLoRa = newLoRa();
 8000bf2:	4c2b      	ldr	r4, [pc, #172]	; (8000ca0 <LoRa_defination+0xb4>)
 8000bf4:	003b      	movs	r3, r7
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff fbf8 	bl	80003ec <newLoRa>
 8000bfc:	003a      	movs	r2, r7
 8000bfe:	0023      	movs	r3, r4
 8000c00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c02:	c313      	stmia	r3!, {r0, r1, r4}
 8000c04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c06:	c313      	stmia	r3!, {r0, r1, r4}
 8000c08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c0a:	c313      	stmia	r3!, {r0, r1, r4}
 8000c0c:	ca03      	ldmia	r2!, {r0, r1}
 8000c0e:	c303      	stmia	r3!, {r0, r1}
	myLoRa.CS_port         = NSS_GPIO_Port;
 8000c10:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c12:	22a0      	movs	r2, #160	; 0xa0
 8000c14:	05d2      	lsls	r2, r2, #23
 8000c16:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin          = NSS_Pin;
 8000c18:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port      = RST_GPIO_Port;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c20:	22a0      	movs	r2, #160	; 0xa0
 8000c22:	05d2      	lsls	r2, r2, #23
 8000c24:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin       = RST_Pin;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c28:	2210      	movs	r2, #16
 8000c2a:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <LoRa_defination+0xb8>)
 8000c30:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin        = DIO0_Pin;
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c34:	2204      	movs	r2, #4
 8000c36:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx           = &hspi1;
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <LoRa_defination+0xbc>)
 8000c3c:	619a      	str	r2, [r3, #24]

	myLoRa.frequency             = 433;             // default = 433 MHz
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c40:	22b2      	movs	r2, #178	; 0xb2
 8000c42:	32ff      	adds	r2, #255	; 0xff
 8000c44:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor        = SF_9;            // default = SF_7
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c48:	2224      	movs	r2, #36	; 0x24
 8000c4a:	2109      	movs	r1, #9
 8000c4c:	5499      	strb	r1, [r3, r2]
	myLoRa.bandWidth             = BW_250KHz;       // default = BW_125KHz
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c50:	2225      	movs	r2, #37	; 0x25
 8000c52:	2108      	movs	r1, #8
 8000c54:	5499      	strb	r1, [r3, r2]
	myLoRa.crcRate               = CR_4_8;          // default = CR_4_5
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c58:	2226      	movs	r2, #38	; 0x26
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	5499      	strb	r1, [r3, r2]
	myLoRa.power                 = POWER_17db;      // default = 20db
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c60:	222a      	movs	r2, #42	; 0x2a
 8000c62:	21fc      	movs	r1, #252	; 0xfc
 8000c64:	5499      	strb	r1, [r3, r2]
	myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c68:	222b      	movs	r2, #43	; 0x2b
 8000c6a:	2182      	movs	r1, #130	; 0x82
 8000c6c:	5499      	strb	r1, [r3, r2]
	myLoRa.preamble              = 10;              // default = 8;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c70:	220a      	movs	r2, #10
 8000c72:	851a      	strh	r2, [r3, #40]	; 0x28

	if(LoRa_init(&myLoRa) == LORA_OK){
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f7ff fef2 	bl	8000a60 <LoRa_init>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	2bc8      	cmp	r3, #200	; 0xc8
 8000c80:	d102      	bne.n	8000c88 <LoRa_defination+0x9c>
		LoRa_stat = 1;
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <LoRa_defination+0xc0>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
	}
	LoRa_startReceiving(&myLoRa);
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <LoRa_defination+0xb4>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fedb 	bl	8000a46 <LoRa_startReceiving>
	HAL_Delay(50);
 8000c90:	2032      	movs	r0, #50	; 0x32
 8000c92:	f000 fa61 	bl	8001158 <HAL_Delay>
}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b00d      	add	sp, #52	; 0x34
 8000c9c:	bd90      	pop	{r4, r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	20000090 	.word	0x20000090
 8000ca4:	50000400 	.word	0x50000400
 8000ca8:	2000002c 	.word	0x2000002c
 8000cac:	200000bc 	.word	0x200000bc

08000cb0 <main>:

int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  HAL_Init();
 8000cb4:	f000 f9ca 	bl	800104c <HAL_Init>
  SystemClock_Config();
 8000cb8:	f000 f818 	bl	8000cec <SystemClock_Config>
  MX_GPIO_Init();
 8000cbc:	f000 f8ae 	bl	8000e1c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cc0:	f000 f86e 	bl	8000da0 <MX_SPI1_Init>

  LoRa_defination();
 8000cc4:	f7ff ff92 	bl	8000bec <LoRa_defination>

  while (1)
  {
	  LoRa_transmit(&myLoRa, (uint8_t*)send_data, 14, 500);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <main+0x34>)
 8000cca:	6819      	ldr	r1, [r3, #0]
 8000ccc:	23fa      	movs	r3, #250	; 0xfa
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <main+0x38>)
 8000cd2:	220e      	movs	r2, #14
 8000cd4:	f7ff fe4c 	bl	8000970 <LoRa_transmit>
	  HAL_Delay(500);
 8000cd8:	23fa      	movs	r3, #250	; 0xfa
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f000 fa3b 	bl	8001158 <HAL_Delay>
	  LoRa_transmit(&myLoRa, (uint8_t*)send_data, 14, 500);
 8000ce2:	e7f1      	b.n	8000cc8 <main+0x18>
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000090 	.word	0x20000090

08000cec <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b093      	sub	sp, #76	; 0x4c
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	2414      	movs	r4, #20
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	2334      	movs	r3, #52	; 0x34
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	f002 f86d 	bl	8002ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	0018      	movs	r0, r3
 8000d06:	2310      	movs	r3, #16
 8000d08:	001a      	movs	r2, r3
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	f002 f866 	bl	8002ddc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 fc79 	bl	800160c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	0052      	lsls	r2, r2, #1
 8000d26:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d28:	0021      	movs	r1, r4
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2240      	movs	r2, #64	; 0x40
 8000d34:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2202      	movs	r2, #2
 8000d3a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2202      	movs	r2, #2
 8000d40:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2208      	movs	r2, #8
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	0292      	lsls	r2, r2, #10
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	0592      	lsls	r2, r2, #22
 8000d5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 fc93 	bl	800168c <HAL_RCC_OscConfig>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d6a:	f000 f8b5 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2202      	movs	r2, #2
 8000d78:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2102      	movs	r1, #2
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 ff8e 	bl	8001cac <HAL_RCC_ClockConfig>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d94:	f000 f8a0 	bl	8000ed8 <Error_Handler>
  }
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b013      	add	sp, #76	; 0x4c
 8000d9e:	bd90      	pop	{r4, r7, pc}

08000da0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <MX_SPI1_Init+0x78>)
 8000da8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dac:	2282      	movs	r2, #130	; 0x82
 8000dae:	0052      	lsls	r2, r2, #1
 8000db0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dba:	22e0      	movs	r2, #224	; 0xe0
 8000dbc:	00d2      	lsls	r2, r2, #3
 8000dbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	0092      	lsls	r2, r2, #2
 8000dd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dd6:	2210      	movs	r2, #16
 8000dd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dee:	2207      	movs	r2, #7
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <MX_SPI1_Init+0x74>)
 8000e00:	0018      	movs	r0, r3
 8000e02:	f001 f8dd 	bl	8001fc0 <HAL_SPI_Init>
 8000e06:	1e03      	subs	r3, r0, #0
 8000e08:	d001      	beq.n	8000e0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e0a:	f000 f865 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000002c 	.word	0x2000002c
 8000e18:	40013000 	.word	0x40013000

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	240c      	movs	r4, #12
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	0018      	movs	r0, r3
 8000e28:	2314      	movs	r3, #20
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f001 ffd5 	bl	8002ddc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <MX_GPIO_Init+0xb4>)
 8000e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <MX_GPIO_Init+0xb4>)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e3e:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <MX_GPIO_Init+0xb4>)
 8000e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e42:	2201      	movs	r2, #1
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <MX_GPIO_Init+0xb4>)
 8000e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <MX_GPIO_Init+0xb4>)
 8000e50:	2102      	movs	r1, #2
 8000e52:	430a      	orrs	r2, r1
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_GPIO_Init+0xb4>)
 8000e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin, GPIO_PIN_SET);
 8000e62:	23a0      	movs	r3, #160	; 0xa0
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	2201      	movs	r2, #1
 8000e68:	2130      	movs	r1, #48	; 0x30
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f000 fbb0 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8000e70:	23a0      	movs	r3, #160	; 0xa0
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	2200      	movs	r2, #0
 8000e76:	2180      	movs	r1, #128	; 0x80
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f000 fba9 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin NSS_Pin Status_LED_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin|Status_LED_Pin;
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	22b0      	movs	r2, #176	; 0xb0
 8000e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	2201      	movs	r2, #1
 8000e88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	193a      	adds	r2, r7, r4
 8000e98:	23a0      	movs	r3, #160	; 0xa0
 8000e9a:	05db      	lsls	r3, r3, #23
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 fa32 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000ea4:	0021      	movs	r1, r4
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2288      	movs	r2, #136	; 0x88
 8000eb0:	0352      	lsls	r2, r2, #13
 8000eb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <MX_GPIO_Init+0xb8>)
 8000ebe:	0019      	movs	r1, r3
 8000ec0:	0010      	movs	r0, r2
 8000ec2:	f000 fa21 	bl	8001308 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b009      	add	sp, #36	; 0x24
 8000ecc:	bd90      	pop	{r4, r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	50000400 	.word	0x50000400

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <Error_Handler+0x8>
	...

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_MspInit+0x44>)
 8000eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_MspInit+0x44>)
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_MspInit+0x44>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	2201      	movs	r2, #1
 8000efc:	4013      	ands	r3, r2
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_MspInit+0x44>)
 8000f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_MspInit+0x44>)
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	0549      	lsls	r1, r1, #21
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_MspInit+0x44>)
 8000f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	055b      	lsls	r3, r3, #21
 8000f18:	4013      	ands	r3, r2
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b002      	add	sp, #8
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	40021000 	.word	0x40021000

08000f2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b08b      	sub	sp, #44	; 0x2c
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	2414      	movs	r4, #20
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	0018      	movs	r0, r3
 8000f3a:	2314      	movs	r3, #20
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f001 ff4c 	bl	8002ddc <memset>
  if(hspi->Instance==SPI1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <HAL_SPI_MspInit+0x8c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d130      	bne.n	8000fb0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_SPI_MspInit+0x90>)
 8000f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_SPI_MspInit+0x90>)
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	0149      	lsls	r1, r1, #5
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_SPI_MspInit+0x90>)
 8000f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	015b      	lsls	r3, r3, #5
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_SPI_MspInit+0x90>)
 8000f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_SPI_MspInit+0x90>)
 8000f70:	2101      	movs	r1, #1
 8000f72:	430a      	orrs	r2, r1
 8000f74:	635a      	str	r2, [r3, #52]	; 0x34
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_SPI_MspInit+0x90>)
 8000f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8000f82:	0021      	movs	r1, r4
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2246      	movs	r2, #70	; 0x46
 8000f88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	187a      	adds	r2, r7, r1
 8000fa4:	23a0      	movs	r3, #160	; 0xa0
 8000fa6:	05db      	lsls	r3, r3, #23
 8000fa8:	0011      	movs	r1, r2
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 f9ac 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b00b      	add	sp, #44	; 0x2c
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	40013000 	.word	0x40013000
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 f89c 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ffa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ffc:	f7ff fff7 	bl	8000fee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <LoopForever+0x6>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	; (8001038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <LoopForever+0xe>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	; (8001044 <LoopForever+0x16>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001026:	f001 fee1 	bl	8002dec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800102a:	f7ff fe41 	bl	8000cb0 <main>

0800102e <LoopForever>:

LoopForever:
  b LoopForever
 800102e:	e7fe      	b.n	800102e <LoopForever>
  ldr   r0, =_estack
 8001030:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800103c:	08002eb8 	.word	0x08002eb8
  ldr r2, =_sbss
 8001040:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001044:	200000c4 	.word	0x200000c4

08001048 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC1_IRQHandler>
	...

0800104c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_Init+0x3c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_Init+0x3c>)
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	0049      	lsls	r1, r1, #1
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001066:	2003      	movs	r0, #3
 8001068:	f000 f810 	bl	800108c <HAL_InitTick>
 800106c:	1e03      	subs	r3, r0, #0
 800106e:	d003      	beq.n	8001078 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001070:	1dfb      	adds	r3, r7, #7
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	e001      	b.n	800107c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff ff34 	bl	8000ee4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800107c:	1dfb      	adds	r3, r7, #7
 800107e:	781b      	ldrb	r3, [r3, #0]
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40022000 	.word	0x40022000

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001094:	230f      	movs	r3, #15
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_InitTick+0x88>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d02b      	beq.n	80010fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <HAL_InitTick+0x8c>)
 80010a6:	681c      	ldr	r4, [r3, #0]
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_InitTick+0x88>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	0019      	movs	r1, r3
 80010ae:	23fa      	movs	r3, #250	; 0xfa
 80010b0:	0098      	lsls	r0, r3, #2
 80010b2:	f7ff f825 	bl	8000100 <__udivsi3>
 80010b6:	0003      	movs	r3, r0
 80010b8:	0019      	movs	r1, r3
 80010ba:	0020      	movs	r0, r4
 80010bc:	f7ff f820 	bl	8000100 <__udivsi3>
 80010c0:	0003      	movs	r3, r0
 80010c2:	0018      	movs	r0, r3
 80010c4:	f000 f913 	bl	80012ee <HAL_SYSTICK_Config>
 80010c8:	1e03      	subs	r3, r0, #0
 80010ca:	d112      	bne.n	80010f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d80a      	bhi.n	80010e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	2301      	movs	r3, #1
 80010d6:	425b      	negs	r3, r3
 80010d8:	2200      	movs	r2, #0
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 f8f2 	bl	80012c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_InitTick+0x90>)
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e00d      	b.n	8001104 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010e8:	230f      	movs	r3, #15
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	e008      	b.n	8001104 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f2:	230f      	movs	r3, #15
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e003      	b.n	8001104 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001104:	230f      	movs	r3, #15
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	781b      	ldrb	r3, [r3, #0]
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b005      	add	sp, #20
 8001110:	bd90      	pop	{r4, r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	2000000c 	.word	0x2000000c
 8001118:	20000004 	.word	0x20000004
 800111c:	20000008 	.word	0x20000008

08001120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_IncTick+0x1c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	001a      	movs	r2, r3
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_IncTick+0x20>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	18d2      	adds	r2, r2, r3
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_IncTick+0x20>)
 8001132:	601a      	str	r2, [r3, #0]
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	2000000c 	.word	0x2000000c
 8001140:	200000c0 	.word	0x200000c0

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <HAL_GetTick+0x10>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	200000c0 	.word	0x200000c0

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff fff0 	bl	8001144 <HAL_GetTick>
 8001164:	0003      	movs	r3, r0
 8001166:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3301      	adds	r3, #1
 8001170:	d005      	beq.n	800117e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_Delay+0x44>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	001a      	movs	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	189b      	adds	r3, r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	f7ff ffe0 	bl	8001144 <HAL_GetTick>
 8001184:	0002      	movs	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d8f7      	bhi.n	8001180 <HAL_Delay+0x28>
  {
  }
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b004      	add	sp, #16
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	2000000c 	.word	0x2000000c

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	0002      	movs	r2, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b7f      	cmp	r3, #127	; 0x7f
 80011b4:	d828      	bhi.n	8001208 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b6:	4a2f      	ldr	r2, [pc, #188]	; (8001274 <__NVIC_SetPriority+0xd4>)
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	33c0      	adds	r3, #192	; 0xc0
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	589b      	ldr	r3, [r3, r2]
 80011c6:	1dfa      	adds	r2, r7, #7
 80011c8:	7812      	ldrb	r2, [r2, #0]
 80011ca:	0011      	movs	r1, r2
 80011cc:	2203      	movs	r2, #3
 80011ce:	400a      	ands	r2, r1
 80011d0:	00d2      	lsls	r2, r2, #3
 80011d2:	21ff      	movs	r1, #255	; 0xff
 80011d4:	4091      	lsls	r1, r2
 80011d6:	000a      	movs	r2, r1
 80011d8:	43d2      	mvns	r2, r2
 80011da:	401a      	ands	r2, r3
 80011dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	019b      	lsls	r3, r3, #6
 80011e2:	22ff      	movs	r2, #255	; 0xff
 80011e4:	401a      	ands	r2, r3
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	0018      	movs	r0, r3
 80011ec:	2303      	movs	r3, #3
 80011ee:	4003      	ands	r3, r0
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f4:	481f      	ldr	r0, [pc, #124]	; (8001274 <__NVIC_SetPriority+0xd4>)
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	430a      	orrs	r2, r1
 8001200:	33c0      	adds	r3, #192	; 0xc0
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001206:	e031      	b.n	800126c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001208:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <__NVIC_SetPriority+0xd8>)
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	0019      	movs	r1, r3
 8001210:	230f      	movs	r3, #15
 8001212:	400b      	ands	r3, r1
 8001214:	3b08      	subs	r3, #8
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3306      	adds	r3, #6
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	18d3      	adds	r3, r2, r3
 800121e:	3304      	adds	r3, #4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1dfa      	adds	r2, r7, #7
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	0011      	movs	r1, r2
 8001228:	2203      	movs	r2, #3
 800122a:	400a      	ands	r2, r1
 800122c:	00d2      	lsls	r2, r2, #3
 800122e:	21ff      	movs	r1, #255	; 0xff
 8001230:	4091      	lsls	r1, r2
 8001232:	000a      	movs	r2, r1
 8001234:	43d2      	mvns	r2, r2
 8001236:	401a      	ands	r2, r3
 8001238:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	019b      	lsls	r3, r3, #6
 800123e:	22ff      	movs	r2, #255	; 0xff
 8001240:	401a      	ands	r2, r3
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	0018      	movs	r0, r3
 8001248:	2303      	movs	r3, #3
 800124a:	4003      	ands	r3, r0
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001250:	4809      	ldr	r0, [pc, #36]	; (8001278 <__NVIC_SetPriority+0xd8>)
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	001c      	movs	r4, r3
 8001258:	230f      	movs	r3, #15
 800125a:	4023      	ands	r3, r4
 800125c:	3b08      	subs	r3, #8
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	430a      	orrs	r2, r1
 8001262:	3306      	adds	r3, #6
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	18c3      	adds	r3, r0, r3
 8001268:	3304      	adds	r3, #4
 800126a:	601a      	str	r2, [r3, #0]
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b003      	add	sp, #12
 8001272:	bd90      	pop	{r4, r7, pc}
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	1e5a      	subs	r2, r3, #1
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	045b      	lsls	r3, r3, #17
 800128c:	429a      	cmp	r2, r3
 800128e:	d301      	bcc.n	8001294 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001290:	2301      	movs	r3, #1
 8001292:	e010      	b.n	80012b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <SysTick_Config+0x44>)
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	3a01      	subs	r2, #1
 800129a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129c:	2301      	movs	r3, #1
 800129e:	425b      	negs	r3, r3
 80012a0:	2103      	movs	r1, #3
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff ff7c 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SysTick_Config+0x44>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SysTick_Config+0x44>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b002      	add	sp, #8
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	210f      	movs	r1, #15
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	1c02      	adds	r2, r0, #0
 80012d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	0011      	movs	r1, r2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff ff5d 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b004      	add	sp, #16
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff ffbf 	bl	800127c <SysTick_Config>
 80012fe:	0003      	movs	r3, r0
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b002      	add	sp, #8
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001316:	e147      	b.n	80015a8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2101      	movs	r1, #1
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4091      	lsls	r1, r2
 8001322:	000a      	movs	r2, r1
 8001324:	4013      	ands	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d100      	bne.n	8001330 <HAL_GPIO_Init+0x28>
 800132e:	e138      	b.n	80015a2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2203      	movs	r2, #3
 8001336:	4013      	ands	r3, r2
 8001338:	2b01      	cmp	r3, #1
 800133a:	d005      	beq.n	8001348 <HAL_GPIO_Init+0x40>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	4013      	ands	r3, r2
 8001344:	2b02      	cmp	r3, #2
 8001346:	d130      	bne.n	80013aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	409a      	lsls	r2, r3
 8001356:	0013      	movs	r3, r2
 8001358:	43da      	mvns	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	409a      	lsls	r2, r3
 800136a:	0013      	movs	r3, r2
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800137e:	2201      	movs	r2, #1
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
 8001384:	0013      	movs	r3, r2
 8001386:	43da      	mvns	r2, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	2201      	movs	r2, #1
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2203      	movs	r2, #3
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d017      	beq.n	80013e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	43da      	mvns	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	409a      	lsls	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2203      	movs	r2, #3
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d123      	bne.n	800143a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	58d3      	ldr	r3, [r2, r3]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	2207      	movs	r2, #7
 8001404:	4013      	ands	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	43da      	mvns	r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	691a      	ldr	r2, [r3, #16]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2107      	movs	r1, #7
 800141e:	400b      	ands	r3, r1
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	409a      	lsls	r2, r3
 8001424:	0013      	movs	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	6939      	ldr	r1, [r7, #16]
 8001438:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	43da      	mvns	r2, r3
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2203      	movs	r2, #3
 8001458:	401a      	ands	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	409a      	lsls	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	23c0      	movs	r3, #192	; 0xc0
 8001474:	029b      	lsls	r3, r3, #10
 8001476:	4013      	ands	r3, r2
 8001478:	d100      	bne.n	800147c <HAL_GPIO_Init+0x174>
 800147a:	e092      	b.n	80015a2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800147c:	4a50      	ldr	r2, [pc, #320]	; (80015c0 <HAL_GPIO_Init+0x2b8>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3318      	adds	r3, #24
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	589b      	ldr	r3, [r3, r2]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2203      	movs	r2, #3
 800148e:	4013      	ands	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	220f      	movs	r2, #15
 8001494:	409a      	lsls	r2, r3
 8001496:	0013      	movs	r3, r2
 8001498:	43da      	mvns	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	23a0      	movs	r3, #160	; 0xa0
 80014a4:	05db      	lsls	r3, r3, #23
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d013      	beq.n	80014d2 <HAL_GPIO_Init+0x1ca>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a45      	ldr	r2, [pc, #276]	; (80015c4 <HAL_GPIO_Init+0x2bc>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00d      	beq.n	80014ce <HAL_GPIO_Init+0x1c6>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a44      	ldr	r2, [pc, #272]	; (80015c8 <HAL_GPIO_Init+0x2c0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d007      	beq.n	80014ca <HAL_GPIO_Init+0x1c2>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a43      	ldr	r2, [pc, #268]	; (80015cc <HAL_GPIO_Init+0x2c4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_GPIO_Init+0x1be>
 80014c2:	2303      	movs	r3, #3
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x1cc>
 80014c6:	2305      	movs	r3, #5
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x1cc>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x1cc>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x1cc>
 80014d2:	2300      	movs	r3, #0
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	2103      	movs	r1, #3
 80014d8:	400a      	ands	r2, r1
 80014da:	00d2      	lsls	r2, r2, #3
 80014dc:	4093      	lsls	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80014e4:	4936      	ldr	r1, [pc, #216]	; (80015c0 <HAL_GPIO_Init+0x2b8>)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3318      	adds	r3, #24
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f2:	4b33      	ldr	r3, [pc, #204]	; (80015c0 <HAL_GPIO_Init+0x2b8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43da      	mvns	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	035b      	lsls	r3, r3, #13
 800150a:	4013      	ands	r3, r2
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_GPIO_Init+0x2b8>)
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_GPIO_Init+0x2b8>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	43da      	mvns	r2, r3
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	039b      	lsls	r3, r3, #14
 8001534:	4013      	ands	r3, r2
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <HAL_GPIO_Init+0x2b8>)
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001546:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <HAL_GPIO_Init+0x2b8>)
 8001548:	2384      	movs	r3, #132	; 0x84
 800154a:	58d3      	ldr	r3, [r2, r3]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	43da      	mvns	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	029b      	lsls	r3, r3, #10
 8001560:	4013      	ands	r3, r2
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800156c:	4914      	ldr	r1, [pc, #80]	; (80015c0 <HAL_GPIO_Init+0x2b8>)
 800156e:	2284      	movs	r2, #132	; 0x84
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <HAL_GPIO_Init+0x2b8>)
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	58d3      	ldr	r3, [r2, r3]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43da      	mvns	r2, r3
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	025b      	lsls	r3, r3, #9
 800158e:	4013      	ands	r3, r2
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800159a:	4909      	ldr	r1, [pc, #36]	; (80015c0 <HAL_GPIO_Init+0x2b8>)
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	40da      	lsrs	r2, r3
 80015b0:	1e13      	subs	r3, r2, #0
 80015b2:	d000      	beq.n	80015b6 <HAL_GPIO_Init+0x2ae>
 80015b4:	e6b0      	b.n	8001318 <HAL_GPIO_Init+0x10>
  }
}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b006      	add	sp, #24
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021800 	.word	0x40021800
 80015c4:	50000400 	.word	0x50000400
 80015c8:	50000800 	.word	0x50000800
 80015cc:	50000c00 	.word	0x50000c00

080015d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	0008      	movs	r0, r1
 80015da:	0011      	movs	r1, r2
 80015dc:	1cbb      	adds	r3, r7, #2
 80015de:	1c02      	adds	r2, r0, #0
 80015e0:	801a      	strh	r2, [r3, #0]
 80015e2:	1c7b      	adds	r3, r7, #1
 80015e4:	1c0a      	adds	r2, r1, #0
 80015e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e8:	1c7b      	adds	r3, r7, #1
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015f0:	1cbb      	adds	r3, r7, #2
 80015f2:	881a      	ldrh	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f8:	e003      	b.n	8001602 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015fa:	1cbb      	adds	r3, r7, #2
 80015fc:	881a      	ldrh	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b002      	add	sp, #8
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a19      	ldr	r2, [pc, #100]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800161a:	4013      	ands	r3, r2
 800161c:	0019      	movs	r1, r3
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	429a      	cmp	r2, r3
 800162e:	d11f      	bne.n	8001670 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	0013      	movs	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	189b      	adds	r3, r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4912      	ldr	r1, [pc, #72]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800163e:	0018      	movs	r0, r3
 8001640:	f7fe fd5e 	bl	8000100 <__udivsi3>
 8001644:	0003      	movs	r3, r0
 8001646:	3301      	adds	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800164a:	e008      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3b01      	subs	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	e001      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e009      	b.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	401a      	ands	r2, r3
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	429a      	cmp	r2, r3
 800166e:	d0ed      	beq.n	800164c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	0018      	movs	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	b004      	add	sp, #16
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	40007000 	.word	0x40007000
 8001680:	fffff9ff 	.word	0xfffff9ff
 8001684:	20000004 	.word	0x20000004
 8001688:	000f4240 	.word	0x000f4240

0800168c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e2f3      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4013      	ands	r3, r2
 80016a6:	d100      	bne.n	80016aa <HAL_RCC_OscConfig+0x1e>
 80016a8:	e07c      	b.n	80017a4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016aa:	4bc3      	ldr	r3, [pc, #780]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2238      	movs	r2, #56	; 0x38
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b4:	4bc0      	ldr	r3, [pc, #768]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2203      	movs	r2, #3
 80016ba:	4013      	ands	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b10      	cmp	r3, #16
 80016c2:	d102      	bne.n	80016ca <HAL_RCC_OscConfig+0x3e>
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d002      	beq.n	80016d0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d10b      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	4bb9      	ldr	r3, [pc, #740]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	029b      	lsls	r3, r3, #10
 80016d8:	4013      	ands	r3, r2
 80016da:	d062      	beq.n	80017a2 <HAL_RCC_OscConfig+0x116>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d15e      	bne.n	80017a2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e2ce      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	025b      	lsls	r3, r3, #9
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x78>
 80016f4:	4bb0      	ldr	r3, [pc, #704]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4baf      	ldr	r3, [pc, #700]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	0249      	lsls	r1, r1, #9
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e020      	b.n	8001746 <HAL_RCC_OscConfig+0xba>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	23a0      	movs	r3, #160	; 0xa0
 800170a:	02db      	lsls	r3, r3, #11
 800170c:	429a      	cmp	r2, r3
 800170e:	d10e      	bne.n	800172e <HAL_RCC_OscConfig+0xa2>
 8001710:	4ba9      	ldr	r3, [pc, #676]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4ba8      	ldr	r3, [pc, #672]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	02c9      	lsls	r1, r1, #11
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	4ba6      	ldr	r3, [pc, #664]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4ba5      	ldr	r3, [pc, #660]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	0249      	lsls	r1, r1, #9
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	e00b      	b.n	8001746 <HAL_RCC_OscConfig+0xba>
 800172e:	4ba2      	ldr	r3, [pc, #648]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4ba1      	ldr	r3, [pc, #644]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001734:	49a1      	ldr	r1, [pc, #644]	; (80019bc <HAL_RCC_OscConfig+0x330>)
 8001736:	400a      	ands	r2, r1
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	4b9f      	ldr	r3, [pc, #636]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b9e      	ldr	r3, [pc, #632]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001740:	499f      	ldr	r1, [pc, #636]	; (80019c0 <HAL_RCC_OscConfig+0x334>)
 8001742:	400a      	ands	r2, r1
 8001744:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d014      	beq.n	8001778 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fcf9 	bl	8001144 <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fcf4 	bl	8001144 <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e28d      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176a:	4b93      	ldr	r3, [pc, #588]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	029b      	lsls	r3, r3, #10
 8001772:	4013      	ands	r3, r2
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xcc>
 8001776:	e015      	b.n	80017a4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fce4 	bl	8001144 <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001782:	f7ff fcdf 	bl	8001144 <HAL_GetTick>
 8001786:	0002      	movs	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b64      	cmp	r3, #100	; 0x64
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e278      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001794:	4b88      	ldr	r3, [pc, #544]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	029b      	lsls	r3, r3, #10
 800179c:	4013      	ands	r3, r2
 800179e:	d1f0      	bne.n	8001782 <HAL_RCC_OscConfig+0xf6>
 80017a0:	e000      	b.n	80017a4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2202      	movs	r2, #2
 80017aa:	4013      	ands	r3, r2
 80017ac:	d100      	bne.n	80017b0 <HAL_RCC_OscConfig+0x124>
 80017ae:	e099      	b.n	80018e4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b0:	4b81      	ldr	r3, [pc, #516]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2238      	movs	r2, #56	; 0x38
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ba:	4b7f      	ldr	r3, [pc, #508]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	2203      	movs	r2, #3
 80017c0:	4013      	ands	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b10      	cmp	r3, #16
 80017c8:	d102      	bne.n	80017d0 <HAL_RCC_OscConfig+0x144>
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d002      	beq.n	80017d6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d135      	bne.n	8001842 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d6:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4013      	ands	r3, r2
 80017e0:	d005      	beq.n	80017ee <HAL_RCC_OscConfig+0x162>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e24b      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ee:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4a74      	ldr	r2, [pc, #464]	; (80019c4 <HAL_RCC_OscConfig+0x338>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	0019      	movs	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	021a      	lsls	r2, r3, #8
 80017fe:	4b6e      	ldr	r3, [pc, #440]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001800:	430a      	orrs	r2, r1
 8001802:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d112      	bne.n	8001830 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800180a:	4b6b      	ldr	r3, [pc, #428]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a6e      	ldr	r2, [pc, #440]	; (80019c8 <HAL_RCC_OscConfig+0x33c>)
 8001810:	4013      	ands	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	4b67      	ldr	r3, [pc, #412]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800181a:	430a      	orrs	r2, r1
 800181c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800181e:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0adb      	lsrs	r3, r3, #11
 8001824:	2207      	movs	r2, #7
 8001826:	4013      	ands	r3, r2
 8001828:	4a68      	ldr	r2, [pc, #416]	; (80019cc <HAL_RCC_OscConfig+0x340>)
 800182a:	40da      	lsrs	r2, r3
 800182c:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <HAL_RCC_OscConfig+0x344>)
 800182e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001830:	4b68      	ldr	r3, [pc, #416]	; (80019d4 <HAL_RCC_OscConfig+0x348>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0018      	movs	r0, r3
 8001836:	f7ff fc29 	bl	800108c <HAL_InitTick>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d051      	beq.n	80018e2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e221      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d030      	beq.n	80018ac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800184a:	4b5b      	ldr	r3, [pc, #364]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a5e      	ldr	r2, [pc, #376]	; (80019c8 <HAL_RCC_OscConfig+0x33c>)
 8001850:	4013      	ands	r3, r2
 8001852:	0019      	movs	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	4b57      	ldr	r3, [pc, #348]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800185e:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b55      	ldr	r3, [pc, #340]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	0049      	lsls	r1, r1, #1
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fc6a 	bl	8001144 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001876:	f7ff fc65 	bl	8001144 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e1fe      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001888:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4013      	ands	r3, r2
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001894:	4b48      	ldr	r3, [pc, #288]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <HAL_RCC_OscConfig+0x338>)
 800189a:	4013      	ands	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	021a      	lsls	r2, r3, #8
 80018a4:	4b44      	ldr	r3, [pc, #272]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	e01b      	b.n	80018e4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018ac:	4b42      	ldr	r3, [pc, #264]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018b2:	4949      	ldr	r1, [pc, #292]	; (80019d8 <HAL_RCC_OscConfig+0x34c>)
 80018b4:	400a      	ands	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc44 	bl	8001144 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fc3f 	bl	8001144 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1d8      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d4:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4013      	ands	r3, r2
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x236>
 80018e0:	e000      	b.n	80018e4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2208      	movs	r2, #8
 80018ea:	4013      	ands	r3, r2
 80018ec:	d047      	beq.n	800197e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2238      	movs	r2, #56	; 0x38
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b18      	cmp	r3, #24
 80018f8:	d10a      	bne.n	8001910 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	2202      	movs	r2, #2
 8001900:	4013      	ands	r3, r2
 8001902:	d03c      	beq.n	800197e <HAL_RCC_OscConfig+0x2f2>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d138      	bne.n	800197e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e1ba      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d019      	beq.n	800194c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800191a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800191c:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800191e:	2101      	movs	r1, #1
 8001920:	430a      	orrs	r2, r1
 8001922:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff fc0e 	bl	8001144 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff fc09 	bl	8001144 <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1a2      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	d0f1      	beq.n	800192e <HAL_RCC_OscConfig+0x2a2>
 800194a:	e018      	b.n	800197e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800194e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001952:	2101      	movs	r1, #1
 8001954:	438a      	bics	r2, r1
 8001956:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fbf4 	bl	8001144 <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001962:	f7ff fbef 	bl	8001144 <HAL_GetTick>
 8001966:	0002      	movs	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e188      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001974:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001978:	2202      	movs	r2, #2
 800197a:	4013      	ands	r3, r2
 800197c:	d1f1      	bne.n	8001962 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2204      	movs	r2, #4
 8001984:	4013      	ands	r3, r2
 8001986:	d100      	bne.n	800198a <HAL_RCC_OscConfig+0x2fe>
 8001988:	e0c6      	b.n	8001b18 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	231f      	movs	r3, #31
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2238      	movs	r2, #56	; 0x38
 8001998:	4013      	ands	r3, r2
 800199a:	2b20      	cmp	r3, #32
 800199c:	d11e      	bne.n	80019dc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	2202      	movs	r2, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	d100      	bne.n	80019aa <HAL_RCC_OscConfig+0x31e>
 80019a8:	e0b6      	b.n	8001b18 <HAL_RCC_OscConfig+0x48c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d000      	beq.n	80019b4 <HAL_RCC_OscConfig+0x328>
 80019b2:	e0b1      	b.n	8001b18 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e166      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	fffeffff 	.word	0xfffeffff
 80019c0:	fffbffff 	.word	0xfffbffff
 80019c4:	ffff80ff 	.word	0xffff80ff
 80019c8:	ffffc7ff 	.word	0xffffc7ff
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	20000004 	.word	0x20000004
 80019d4:	20000008 	.word	0x20000008
 80019d8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019dc:	4bac      	ldr	r3, [pc, #688]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 80019de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	055b      	lsls	r3, r3, #21
 80019e4:	4013      	ands	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_OscConfig+0x360>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x362>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d011      	beq.n	8001a16 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4ba7      	ldr	r3, [pc, #668]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 80019f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f6:	4ba6      	ldr	r3, [pc, #664]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	0549      	lsls	r1, r1, #21
 80019fc:	430a      	orrs	r2, r1
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a00:	4ba3      	ldr	r3, [pc, #652]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	055b      	lsls	r3, r3, #21
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a0e:	231f      	movs	r3, #31
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a16:	4b9f      	ldr	r3, [pc, #636]	; (8001c94 <HAL_RCC_OscConfig+0x608>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d11a      	bne.n	8001a58 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a22:	4b9c      	ldr	r3, [pc, #624]	; (8001c94 <HAL_RCC_OscConfig+0x608>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b9b      	ldr	r3, [pc, #620]	; (8001c94 <HAL_RCC_OscConfig+0x608>)
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0049      	lsls	r1, r1, #1
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fb88 	bl	8001144 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3a:	f7ff fb83 	bl	8001144 <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e11c      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4c:	4b91      	ldr	r3, [pc, #580]	; (8001c94 <HAL_RCC_OscConfig+0x608>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x3e2>
 8001a60:	4b8b      	ldr	r3, [pc, #556]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a64:	4b8a      	ldr	r3, [pc, #552]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a66:	2101      	movs	r1, #1
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a6c:	e01c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x41c>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x404>
 8001a76:	4b86      	ldr	r3, [pc, #536]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a7a:	4b85      	ldr	r3, [pc, #532]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a82:	4b83      	ldr	r3, [pc, #524]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a86:	4b82      	ldr	r3, [pc, #520]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x41c>
 8001a90:	4b7f      	ldr	r3, [pc, #508]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a94:	4b7e      	ldr	r3, [pc, #504]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	438a      	bics	r2, r1
 8001a9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a9c:	4b7c      	ldr	r3, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001a9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aa0:	4b7b      	ldr	r3, [pc, #492]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d014      	beq.n	8001ada <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fb48 	bl	8001144 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7ff fb43 	bl	8001144 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a74      	ldr	r2, [pc, #464]	; (8001c98 <HAL_RCC_OscConfig+0x60c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0db      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ace:	4b70      	ldr	r3, [pc, #448]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x42e>
 8001ad8:	e013      	b.n	8001b02 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff fb33 	bl	8001144 <HAL_GetTick>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae2:	e009      	b.n	8001af8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fb2e 	bl	8001144 <HAL_GetTick>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4a6a      	ldr	r2, [pc, #424]	; (8001c98 <HAL_RCC_OscConfig+0x60c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0c6      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af8:	4b65      	ldr	r3, [pc, #404]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b02:	231f      	movs	r3, #31
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b0c:	4b60      	ldr	r3, [pc, #384]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b10:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b12:	4962      	ldr	r1, [pc, #392]	; (8001c9c <HAL_RCC_OscConfig+0x610>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d100      	bne.n	8001b22 <HAL_RCC_OscConfig+0x496>
 8001b20:	e0b0      	b.n	8001c84 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b22:	4b5b      	ldr	r3, [pc, #364]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2238      	movs	r2, #56	; 0x38
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d100      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4a4>
 8001b2e:	e078      	b.n	8001c22 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d153      	bne.n	8001be0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b55      	ldr	r3, [pc, #340]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b54      	ldr	r3, [pc, #336]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b3e:	4958      	ldr	r1, [pc, #352]	; (8001ca0 <HAL_RCC_OscConfig+0x614>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff fafe 	bl	8001144 <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff faf9 	bl	8001144 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e092      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b60:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	049b      	lsls	r3, r3, #18
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6c:	4b48      	ldr	r3, [pc, #288]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4a4c      	ldr	r2, [pc, #304]	; (8001ca4 <HAL_RCC_OscConfig+0x618>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1a      	ldr	r2, [r3, #32]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	431a      	orrs	r2, r3
 8001b94:	4b3e      	ldr	r3, [pc, #248]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b96:	430a      	orrs	r2, r1
 8001b98:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b3c      	ldr	r3, [pc, #240]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001ba0:	2180      	movs	r1, #128	; 0x80
 8001ba2:	0449      	lsls	r1, r1, #17
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ba8:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001bae:	2180      	movs	r1, #128	; 0x80
 8001bb0:	0549      	lsls	r1, r1, #21
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fac5 	bl	8001144 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7ff fac0 	bl	8001144 <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e059      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	049b      	lsls	r3, r3, #18
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x534>
 8001bde:	e051      	b.n	8001c84 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001be6:	492e      	ldr	r1, [pc, #184]	; (8001ca0 <HAL_RCC_OscConfig+0x614>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff faaa 	bl	8001144 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff faa5 	bl	8001144 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e03e      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c08:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	049b      	lsls	r3, r3, #18
 8001c10:	4013      	ands	r3, r2
 8001c12:	d1f0      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001c1a:	4923      	ldr	r1, [pc, #140]	; (8001ca8 <HAL_RCC_OscConfig+0x61c>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	e030      	b.n	8001c84 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e02b      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <HAL_RCC_OscConfig+0x604>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2203      	movs	r2, #3
 8001c38:	401a      	ands	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d11e      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2270      	movs	r2, #112	; 0x70
 8001c46:	401a      	ands	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d117      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	23fe      	movs	r3, #254	; 0xfe
 8001c54:	01db      	lsls	r3, r3, #7
 8001c56:	401a      	ands	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d10e      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	23f8      	movs	r3, #248	; 0xf8
 8001c66:	039b      	lsls	r3, r3, #14
 8001c68:	401a      	ands	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d106      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	0f5b      	lsrs	r3, r3, #29
 8001c76:	075a      	lsls	r2, r3, #29
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	0018      	movs	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b008      	add	sp, #32
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40007000 	.word	0x40007000
 8001c98:	00001388 	.word	0x00001388
 8001c9c:	efffffff 	.word	0xefffffff
 8001ca0:	feffffff 	.word	0xfeffffff
 8001ca4:	1fc1808c 	.word	0x1fc1808c
 8001ca8:	effefffc 	.word	0xeffefffc

08001cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0e9      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b76      	ldr	r3, [pc, #472]	; (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d91e      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b73      	ldr	r3, [pc, #460]	; (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	4393      	bics	r3, r2
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	4b70      	ldr	r3, [pc, #448]	; (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ce0:	f7ff fa30 	bl	8001144 <HAL_GetTick>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce8:	e009      	b.n	8001cfe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cea:	f7ff fa2b 	bl	8001144 <HAL_GetTick>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	4a6a      	ldr	r2, [pc, #424]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0ca      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cfe:	4b67      	ldr	r3, [pc, #412]	; (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2207      	movs	r2, #7
 8001d04:	4013      	ands	r3, r2
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1ee      	bne.n	8001cea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2202      	movs	r2, #2
 8001d12:	4013      	ands	r3, r2
 8001d14:	d015      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d006      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d20:	4b60      	ldr	r3, [pc, #384]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4b5f      	ldr	r3, [pc, #380]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d26:	21e0      	movs	r1, #224	; 0xe0
 8001d28:	01c9      	lsls	r1, r1, #7
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	4a5d      	ldr	r2, [pc, #372]	; (8001ea8 <HAL_RCC_ClockConfig+0x1fc>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	4b59      	ldr	r3, [pc, #356]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2201      	movs	r2, #1
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d057      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d54:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	029b      	lsls	r3, r3, #10
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d12b      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e097      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6c:	4b4d      	ldr	r3, [pc, #308]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	049b      	lsls	r3, r3, #18
 8001d74:	4013      	ands	r3, r2
 8001d76:	d11f      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e08b      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d107      	bne.n	8001d94 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d84:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d113      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e07f      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d9c:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da0:	2202      	movs	r2, #2
 8001da2:	4013      	ands	r3, r2
 8001da4:	d108      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e074      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001daa:	4b3e      	ldr	r3, [pc, #248]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	2202      	movs	r2, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e06d      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001db8:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	4393      	bics	r3, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dcc:	f7ff f9ba 	bl	8001144 <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd4:	e009      	b.n	8001dea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd6:	f7ff f9b5 	bl	8001144 <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	4a2f      	ldr	r2, [pc, #188]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e054      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2238      	movs	r2, #56	; 0x38
 8001df0:	401a      	ands	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1ec      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2207      	movs	r2, #7
 8001e02:	4013      	ands	r3, r2
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d21e      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2207      	movs	r2, #7
 8001e10:	4393      	bics	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e1c:	f7ff f992 	bl	8001144 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e24:	e009      	b.n	8001e3a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e26:	f7ff f98d 	bl	8001144 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e02c      	b.n	8001e94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2207      	movs	r2, #7
 8001e40:	4013      	ands	r3, r2
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1ee      	bne.n	8001e26 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <HAL_RCC_ClockConfig+0x200>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e66:	f000 f829 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8001e6a:	0001      	movs	r1, r0
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	220f      	movs	r2, #15
 8001e74:	401a      	ands	r2, r3
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_RCC_ClockConfig+0x204>)
 8001e78:	0092      	lsls	r2, r2, #2
 8001e7a:	58d3      	ldr	r3, [r2, r3]
 8001e7c:	221f      	movs	r2, #31
 8001e7e:	4013      	ands	r3, r2
 8001e80:	000a      	movs	r2, r1
 8001e82:	40da      	lsrs	r2, r3
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_ClockConfig+0x208>)
 8001e86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_ClockConfig+0x20c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7ff f8fd 	bl	800108c <HAL_InitTick>
 8001e92:	0003      	movs	r3, r0
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b004      	add	sp, #16
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40022000 	.word	0x40022000
 8001ea0:	00001388 	.word	0x00001388
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	fffff0ff 	.word	0xfffff0ff
 8001eac:	ffff8fff 	.word	0xffff8fff
 8001eb0:	08002e70 	.word	0x08002e70
 8001eb4:	20000004 	.word	0x20000004
 8001eb8:	20000008 	.word	0x20000008

08001ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec2:	4b3c      	ldr	r3, [pc, #240]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2238      	movs	r2, #56	; 0x38
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d10f      	bne.n	8001eec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ecc:	4b39      	ldr	r3, [pc, #228]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0adb      	lsrs	r3, r3, #11
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	0013      	movs	r3, r2
 8001edc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	4835      	ldr	r0, [pc, #212]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ee2:	f7fe f90d 	bl	8000100 <__udivsi3>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e05d      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eec:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2238      	movs	r2, #56	; 0x38
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d102      	bne.n	8001efe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ef8:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x100>)
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	e054      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001efe:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2238      	movs	r2, #56	; 0x38
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d138      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2203      	movs	r2, #3
 8001f10:	4013      	ands	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d10d      	bne.n	8001f44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	4824      	ldr	r0, [pc, #144]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x100>)
 8001f2c:	f7fe f8e8 	bl	8000100 <__udivsi3>
 8001f30:	0003      	movs	r3, r0
 8001f32:	0019      	movs	r1, r3
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	227f      	movs	r2, #127	; 0x7f
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	434b      	muls	r3, r1
 8001f40:	617b      	str	r3, [r7, #20]
        break;
 8001f42:	e00d      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	481c      	ldr	r0, [pc, #112]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f48:	f7fe f8da 	bl	8000100 <__udivsi3>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	0019      	movs	r1, r3
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	227f      	movs	r2, #127	; 0x7f
 8001f58:	4013      	ands	r3, r2
 8001f5a:	434b      	muls	r3, r1
 8001f5c:	617b      	str	r3, [r7, #20]
        break;
 8001f5e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0f5b      	lsrs	r3, r3, #29
 8001f66:	2207      	movs	r2, #7
 8001f68:	4013      	ands	r3, r2
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	6978      	ldr	r0, [r7, #20]
 8001f72:	f7fe f8c5 	bl	8000100 <__udivsi3>
 8001f76:	0003      	movs	r3, r0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	e015      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2238      	movs	r2, #56	; 0x38
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d103      	bne.n	8001f90 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2238      	movs	r2, #56	; 0x38
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b18      	cmp	r3, #24
 8001f9a:	d103      	bne.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f9c:	23fa      	movs	r3, #250	; 0xfa
 8001f9e:	01db      	lsls	r3, r3, #7
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	e001      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fa8:	693b      	ldr	r3, [r7, #16]
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b006      	add	sp, #24
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	00f42400 	.word	0x00f42400
 8001fbc:	007a1200 	.word	0x007a1200

08001fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0a8      	b.n	8002124 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d109      	bne.n	8001fee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	2382      	movs	r3, #130	; 0x82
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d009      	beq.n	8001ffa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61da      	str	r2, [r3, #28]
 8001fec:	e005      	b.n	8001ffa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	225d      	movs	r2, #93	; 0x5d
 8002004:	5c9b      	ldrb	r3, [r3, r2]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d107      	bne.n	800201c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	225c      	movs	r2, #92	; 0x5c
 8002010:	2100      	movs	r1, #0
 8002012:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	0018      	movs	r0, r3
 8002018:	f7fe ff88 	bl	8000f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	225d      	movs	r2, #93	; 0x5d
 8002020:	2102      	movs	r1, #2
 8002022:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2140      	movs	r1, #64	; 0x40
 8002030:	438a      	bics	r2, r1
 8002032:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	23e0      	movs	r3, #224	; 0xe0
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	429a      	cmp	r2, r3
 800203e:	d902      	bls.n	8002046 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e002      	b.n	800204c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	015b      	lsls	r3, r3, #5
 800204a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	23f0      	movs	r3, #240	; 0xf0
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	429a      	cmp	r2, r3
 8002056:	d008      	beq.n	800206a <HAL_SPI_Init+0xaa>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	23e0      	movs	r3, #224	; 0xe0
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	429a      	cmp	r2, r3
 8002062:	d002      	beq.n	800206a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	2382      	movs	r3, #130	; 0x82
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	401a      	ands	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	2384      	movs	r3, #132	; 0x84
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	400b      	ands	r3, r1
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2102      	movs	r1, #2
 8002086:	400b      	ands	r3, r1
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2101      	movs	r1, #1
 8002090:	400b      	ands	r3, r1
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6999      	ldr	r1, [r3, #24]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	400b      	ands	r3, r1
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2138      	movs	r1, #56	; 0x38
 80020a6:	400b      	ands	r3, r1
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	400b      	ands	r3, r1
 80020b2:	431a      	orrs	r2, r3
 80020b4:	0011      	movs	r1, r2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	401a      	ands	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	2204      	movs	r2, #4
 80020d0:	401a      	ands	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	2110      	movs	r1, #16
 80020d8:	400b      	ands	r3, r1
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e0:	2108      	movs	r1, #8
 80020e2:	400b      	ands	r3, r1
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68d9      	ldr	r1, [r3, #12]
 80020ea:	23f0      	movs	r3, #240	; 0xf0
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	400b      	ands	r3, r1
 80020f0:	431a      	orrs	r2, r3
 80020f2:	0011      	movs	r1, r2
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	015b      	lsls	r3, r3, #5
 80020fa:	401a      	ands	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69da      	ldr	r2, [r3, #28]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4907      	ldr	r1, [pc, #28]	; (800212c <HAL_SPI_Init+0x16c>)
 8002110:	400a      	ands	r2, r1
 8002112:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	225d      	movs	r2, #93	; 0x5d
 800211e:	2101      	movs	r1, #1
 8002120:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	b004      	add	sp, #16
 800212a:	bd80      	pop	{r7, pc}
 800212c:	fffff7ff 	.word	0xfffff7ff

08002130 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	1dbb      	adds	r3, r7, #6
 800213e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002140:	231f      	movs	r3, #31
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	225c      	movs	r2, #92	; 0x5c
 800214c:	5c9b      	ldrb	r3, [r3, r2]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_SPI_Transmit+0x26>
 8002152:	2302      	movs	r3, #2
 8002154:	e140      	b.n	80023d8 <HAL_SPI_Transmit+0x2a8>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	225c      	movs	r2, #92	; 0x5c
 800215a:	2101      	movs	r1, #1
 800215c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800215e:	f7fe fff1 	bl	8001144 <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002166:	2316      	movs	r3, #22
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	1dba      	adds	r2, r7, #6
 800216c:	8812      	ldrh	r2, [r2, #0]
 800216e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	225d      	movs	r2, #93	; 0x5d
 8002174:	5c9b      	ldrb	r3, [r3, r2]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d004      	beq.n	8002186 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800217c:	231f      	movs	r3, #31
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	2202      	movs	r2, #2
 8002182:	701a      	strb	r2, [r3, #0]
    goto error;
 8002184:	e11d      	b.n	80023c2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_SPI_Transmit+0x64>
 800218c:	1dbb      	adds	r3, r7, #6
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002194:	231f      	movs	r3, #31
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
    goto error;
 800219c:	e111      	b.n	80023c2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	225d      	movs	r2, #93	; 0x5d
 80021a2:	2103      	movs	r1, #3
 80021a4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1dba      	adds	r2, r7, #6
 80021b6:	8812      	ldrh	r2, [r2, #0]
 80021b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1dba      	adds	r2, r7, #6
 80021be:	8812      	ldrh	r2, [r2, #0]
 80021c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2244      	movs	r2, #68	; 0x44
 80021cc:	2100      	movs	r1, #0
 80021ce:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2246      	movs	r2, #70	; 0x46
 80021d4:	2100      	movs	r1, #0
 80021d6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d110      	bne.n	8002212 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2140      	movs	r1, #64	; 0x40
 80021fc:	438a      	bics	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	01c9      	lsls	r1, r1, #7
 800220e:	430a      	orrs	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2240      	movs	r2, #64	; 0x40
 800221a:	4013      	ands	r3, r2
 800221c:	2b40      	cmp	r3, #64	; 0x40
 800221e:	d007      	beq.n	8002230 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2140      	movs	r1, #64	; 0x40
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	23e0      	movs	r3, #224	; 0xe0
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	429a      	cmp	r2, r3
 800223a:	d94e      	bls.n	80022da <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d004      	beq.n	800224e <HAL_SPI_Transmit+0x11e>
 8002244:	2316      	movs	r3, #22
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d13f      	bne.n	80022ce <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	881a      	ldrh	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225e:	1c9a      	adds	r2, r3, #2
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002272:	e02c      	b.n	80022ce <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2202      	movs	r2, #2
 800227c:	4013      	ands	r3, r2
 800227e:	2b02      	cmp	r3, #2
 8002280:	d112      	bne.n	80022a8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	881a      	ldrh	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	1c9a      	adds	r2, r3, #2
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022a6:	e012      	b.n	80022ce <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022a8:	f7fe ff4c 	bl	8001144 <HAL_GetTick>
 80022ac:	0002      	movs	r2, r0
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d802      	bhi.n	80022be <HAL_SPI_Transmit+0x18e>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	d102      	bne.n	80022c4 <HAL_SPI_Transmit+0x194>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d104      	bne.n	80022ce <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80022c4:	231f      	movs	r3, #31
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2203      	movs	r2, #3
 80022ca:	701a      	strb	r2, [r3, #0]
          goto error;
 80022cc:	e079      	b.n	80023c2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1cd      	bne.n	8002274 <HAL_SPI_Transmit+0x144>
 80022d8:	e04f      	b.n	800237a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <HAL_SPI_Transmit+0x1bc>
 80022e2:	2316      	movs	r3, #22
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d141      	bne.n	8002370 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	330c      	adds	r3, #12
 80022f6:	7812      	ldrb	r2, [r2, #0]
 80022f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002312:	e02d      	b.n	8002370 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2202      	movs	r2, #2
 800231c:	4013      	ands	r3, r2
 800231e:	2b02      	cmp	r3, #2
 8002320:	d113      	bne.n	800234a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	330c      	adds	r3, #12
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002348:	e012      	b.n	8002370 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800234a:	f7fe fefb 	bl	8001144 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d802      	bhi.n	8002360 <HAL_SPI_Transmit+0x230>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	d102      	bne.n	8002366 <HAL_SPI_Transmit+0x236>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d104      	bne.n	8002370 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002366:	231f      	movs	r3, #31
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	2203      	movs	r2, #3
 800236c:	701a      	strb	r2, [r3, #0]
          goto error;
 800236e:	e028      	b.n	80023c2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1cc      	bne.n	8002314 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	6839      	ldr	r1, [r7, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	0018      	movs	r0, r3
 8002382:	f000 fce5 	bl	8002d50 <SPI_EndRxTxTransaction>
 8002386:	1e03      	subs	r3, r0, #0
 8002388:	d002      	beq.n	8002390 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2220      	movs	r2, #32
 800238e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10a      	bne.n	80023ae <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d004      	beq.n	80023c0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80023b6:	231f      	movs	r3, #31
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	e000      	b.n	80023c2 <HAL_SPI_Transmit+0x292>
  }

error:
 80023c0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	225d      	movs	r2, #93	; 0x5d
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	225c      	movs	r2, #92	; 0x5c
 80023ce:	2100      	movs	r1, #0
 80023d0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80023d2:	231f      	movs	r3, #31
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	781b      	ldrb	r3, [r3, #0]
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	b008      	add	sp, #32
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	1dbb      	adds	r3, r7, #6
 80023ee:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023f0:	2317      	movs	r3, #23
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	2382      	movs	r3, #130	; 0x82
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	429a      	cmp	r2, r3
 8002402:	d113      	bne.n	800242c <HAL_SPI_Receive+0x4c>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10f      	bne.n	800242c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	225d      	movs	r2, #93	; 0x5d
 8002410:	2104      	movs	r1, #4
 8002412:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002414:	1dbb      	adds	r3, r7, #6
 8002416:	881c      	ldrh	r4, [r3, #0]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	0023      	movs	r3, r4
 8002424:	f000 f928 	bl	8002678 <HAL_SPI_TransmitReceive>
 8002428:	0003      	movs	r3, r0
 800242a:	e11c      	b.n	8002666 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	225c      	movs	r2, #92	; 0x5c
 8002430:	5c9b      	ldrb	r3, [r3, r2]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_SPI_Receive+0x5a>
 8002436:	2302      	movs	r3, #2
 8002438:	e115      	b.n	8002666 <HAL_SPI_Receive+0x286>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	225c      	movs	r2, #92	; 0x5c
 800243e:	2101      	movs	r1, #1
 8002440:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002442:	f7fe fe7f 	bl	8001144 <HAL_GetTick>
 8002446:	0003      	movs	r3, r0
 8002448:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	225d      	movs	r2, #93	; 0x5d
 800244e:	5c9b      	ldrb	r3, [r3, r2]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d004      	beq.n	8002460 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002456:	2317      	movs	r3, #23
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	2202      	movs	r2, #2
 800245c:	701a      	strb	r2, [r3, #0]
    goto error;
 800245e:	e0f7      	b.n	8002650 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_SPI_Receive+0x8e>
 8002466:	1dbb      	adds	r3, r7, #6
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d104      	bne.n	8002478 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800246e:	2317      	movs	r3, #23
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
    goto error;
 8002476:	e0eb      	b.n	8002650 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	225d      	movs	r2, #93	; 0x5d
 800247c:	2104      	movs	r1, #4
 800247e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1dba      	adds	r2, r7, #6
 8002490:	2144      	movs	r1, #68	; 0x44
 8002492:	8812      	ldrh	r2, [r2, #0]
 8002494:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1dba      	adds	r2, r7, #6
 800249a:	2146      	movs	r1, #70	; 0x46
 800249c:	8812      	ldrh	r2, [r2, #0]
 800249e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	23e0      	movs	r3, #224	; 0xe0
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d908      	bls.n	80024dc <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4966      	ldr	r1, [pc, #408]	; (8002670 <HAL_SPI_Receive+0x290>)
 80024d6:	400a      	ands	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	e008      	b.n	80024ee <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	0149      	lsls	r1, r1, #5
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d10f      	bne.n	800251a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2140      	movs	r1, #64	; 0x40
 8002506:	438a      	bics	r2, r1
 8002508:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4957      	ldr	r1, [pc, #348]	; (8002674 <HAL_SPI_Receive+0x294>)
 8002516:	400a      	ands	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2240      	movs	r2, #64	; 0x40
 8002522:	4013      	ands	r3, r2
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d007      	beq.n	8002538 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2140      	movs	r1, #64	; 0x40
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	23e0      	movs	r3, #224	; 0xe0
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	429a      	cmp	r2, r3
 8002542:	d900      	bls.n	8002546 <HAL_SPI_Receive+0x166>
 8002544:	e069      	b.n	800261a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002546:	e031      	b.n	80025ac <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2201      	movs	r2, #1
 8002550:	4013      	ands	r3, r2
 8002552:	2b01      	cmp	r3, #1
 8002554:	d117      	bne.n	8002586 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	330c      	adds	r3, #12
 800255c:	001a      	movs	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	7812      	ldrb	r2, [r2, #0]
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2246      	movs	r2, #70	; 0x46
 8002576:	5a9b      	ldrh	r3, [r3, r2]
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b299      	uxth	r1, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2246      	movs	r2, #70	; 0x46
 8002582:	5299      	strh	r1, [r3, r2]
 8002584:	e012      	b.n	80025ac <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002586:	f7fe fddd 	bl	8001144 <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d802      	bhi.n	800259c <HAL_SPI_Receive+0x1bc>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	d102      	bne.n	80025a2 <HAL_SPI_Receive+0x1c2>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d104      	bne.n	80025ac <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80025a2:	2317      	movs	r3, #23
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	2203      	movs	r2, #3
 80025a8:	701a      	strb	r2, [r3, #0]
          goto error;
 80025aa:	e051      	b.n	8002650 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2246      	movs	r2, #70	; 0x46
 80025b0:	5a9b      	ldrh	r3, [r3, r2]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1c7      	bne.n	8002548 <HAL_SPI_Receive+0x168>
 80025b8:	e035      	b.n	8002626 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2201      	movs	r2, #1
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d115      	bne.n	80025f4 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	b292      	uxth	r2, r2
 80025d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	1c9a      	adds	r2, r3, #2
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2246      	movs	r2, #70	; 0x46
 80025e4:	5a9b      	ldrh	r3, [r3, r2]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b299      	uxth	r1, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2246      	movs	r2, #70	; 0x46
 80025f0:	5299      	strh	r1, [r3, r2]
 80025f2:	e012      	b.n	800261a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025f4:	f7fe fda6 	bl	8001144 <HAL_GetTick>
 80025f8:	0002      	movs	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d802      	bhi.n	800260a <HAL_SPI_Receive+0x22a>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	d102      	bne.n	8002610 <HAL_SPI_Receive+0x230>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d104      	bne.n	800261a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002610:	2317      	movs	r3, #23
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	2203      	movs	r2, #3
 8002616:	701a      	strb	r2, [r3, #0]
          goto error;
 8002618:	e01a      	b.n	8002650 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2246      	movs	r2, #70	; 0x46
 800261e:	5a9b      	ldrh	r3, [r3, r2]
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1c9      	bne.n	80025ba <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	6839      	ldr	r1, [r7, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	0018      	movs	r0, r3
 800262e:	f000 fb31 	bl	8002c94 <SPI_EndRxTransaction>
 8002632:	1e03      	subs	r3, r0, #0
 8002634:	d002      	beq.n	800263c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002644:	2317      	movs	r3, #23
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e000      	b.n	8002650 <HAL_SPI_Receive+0x270>
  }

error :
 800264e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	225d      	movs	r2, #93	; 0x5d
 8002654:	2101      	movs	r1, #1
 8002656:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	225c      	movs	r2, #92	; 0x5c
 800265c:	2100      	movs	r1, #0
 800265e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002660:	2317      	movs	r3, #23
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	781b      	ldrb	r3, [r3, #0]
}
 8002666:	0018      	movs	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	b007      	add	sp, #28
 800266c:	bd90      	pop	{r4, r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	ffffefff 	.word	0xffffefff
 8002674:	ffffbfff 	.word	0xffffbfff

08002678 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	001a      	movs	r2, r3
 8002686:	1cbb      	adds	r3, r7, #2
 8002688:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800268a:	2301      	movs	r3, #1
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800268e:	2323      	movs	r3, #35	; 0x23
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	225c      	movs	r2, #92	; 0x5c
 800269a:	5c9b      	ldrb	r3, [r3, r2]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_SPI_TransmitReceive+0x2c>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e1b5      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x398>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	225c      	movs	r2, #92	; 0x5c
 80026a8:	2101      	movs	r1, #1
 80026aa:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026ac:	f7fe fd4a 	bl	8001144 <HAL_GetTick>
 80026b0:	0003      	movs	r3, r0
 80026b2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026b4:	201b      	movs	r0, #27
 80026b6:	183b      	adds	r3, r7, r0
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	215d      	movs	r1, #93	; 0x5d
 80026bc:	5c52      	ldrb	r2, [r2, r1]
 80026be:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80026c6:	2312      	movs	r3, #18
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	1cba      	adds	r2, r7, #2
 80026cc:	8812      	ldrh	r2, [r2, #0]
 80026ce:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026d0:	183b      	adds	r3, r7, r0
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d011      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x84>
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	2382      	movs	r3, #130	; 0x82
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	429a      	cmp	r2, r3
 80026e0:	d107      	bne.n	80026f2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <HAL_SPI_TransmitReceive+0x7a>
 80026ea:	183b      	adds	r3, r7, r0
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d004      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80026f2:	2323      	movs	r3, #35	; 0x23
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80026fa:	e17e      	b.n	80029fa <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d006      	beq.n	8002710 <HAL_SPI_TransmitReceive+0x98>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_SPI_TransmitReceive+0x98>
 8002708:	1cbb      	adds	r3, r7, #2
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d104      	bne.n	800271a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002710:	2323      	movs	r3, #35	; 0x23
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
    goto error;
 8002718:	e16f      	b.n	80029fa <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	225d      	movs	r2, #93	; 0x5d
 800271e:	5c9b      	ldrb	r3, [r3, r2]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b04      	cmp	r3, #4
 8002724:	d003      	beq.n	800272e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	225d      	movs	r2, #93	; 0x5d
 800272a:	2105      	movs	r1, #5
 800272c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1cba      	adds	r2, r7, #2
 800273e:	2146      	movs	r1, #70	; 0x46
 8002740:	8812      	ldrh	r2, [r2, #0]
 8002742:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1cba      	adds	r2, r7, #2
 8002748:	2144      	movs	r1, #68	; 0x44
 800274a:	8812      	ldrh	r2, [r2, #0]
 800274c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1cba      	adds	r2, r7, #2
 8002758:	8812      	ldrh	r2, [r2, #0]
 800275a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1cba      	adds	r2, r7, #2
 8002760:	8812      	ldrh	r2, [r2, #0]
 8002762:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	23e0      	movs	r3, #224	; 0xe0
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	429a      	cmp	r2, r3
 800277a:	d908      	bls.n	800278e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	49a4      	ldr	r1, [pc, #656]	; (8002a18 <HAL_SPI_TransmitReceive+0x3a0>)
 8002788:	400a      	ands	r2, r1
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	e008      	b.n	80027a0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	0149      	lsls	r1, r1, #5
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2240      	movs	r2, #64	; 0x40
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b40      	cmp	r3, #64	; 0x40
 80027ac:	d007      	beq.n	80027be <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2140      	movs	r1, #64	; 0x40
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	23e0      	movs	r3, #224	; 0xe0
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d800      	bhi.n	80027cc <HAL_SPI_TransmitReceive+0x154>
 80027ca:	e07f      	b.n	80028cc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0x168>
 80027d4:	2312      	movs	r3, #18
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d000      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0x168>
 80027de:	e069      	b.n	80028b4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	881a      	ldrh	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f0:	1c9a      	adds	r2, r3, #2
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002804:	e056      	b.n	80028b4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2202      	movs	r2, #2
 800280e:	4013      	ands	r3, r2
 8002810:	2b02      	cmp	r3, #2
 8002812:	d11b      	bne.n	800284c <HAL_SPI_TransmitReceive+0x1d4>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d016      	beq.n	800284c <HAL_SPI_TransmitReceive+0x1d4>
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	2b01      	cmp	r3, #1
 8002822:	d113      	bne.n	800284c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	1c9a      	adds	r2, r3, #2
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2201      	movs	r2, #1
 8002854:	4013      	ands	r3, r2
 8002856:	2b01      	cmp	r3, #1
 8002858:	d11c      	bne.n	8002894 <HAL_SPI_TransmitReceive+0x21c>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2246      	movs	r2, #70	; 0x46
 800285e:	5a9b      	ldrh	r3, [r3, r2]
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d016      	beq.n	8002894 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	b292      	uxth	r2, r2
 8002872:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	1c9a      	adds	r2, r3, #2
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2246      	movs	r2, #70	; 0x46
 8002882:	5a9b      	ldrh	r3, [r3, r2]
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b299      	uxth	r1, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2246      	movs	r2, #70	; 0x46
 800288e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002890:	2301      	movs	r3, #1
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002894:	f7fe fc56 	bl	8001144 <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d807      	bhi.n	80028b4 <HAL_SPI_TransmitReceive+0x23c>
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	3301      	adds	r3, #1
 80028a8:	d004      	beq.n	80028b4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80028aa:	2323      	movs	r3, #35	; 0x23
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	2203      	movs	r2, #3
 80028b0:	701a      	strb	r2, [r3, #0]
        goto error;
 80028b2:	e0a2      	b.n	80029fa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1a3      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x18e>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2246      	movs	r2, #70	; 0x46
 80028c2:	5a9b      	ldrh	r3, [r3, r2]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d19d      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x18e>
 80028ca:	e085      	b.n	80029d8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_SPI_TransmitReceive+0x268>
 80028d4:	2312      	movs	r3, #18
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d000      	beq.n	80028e0 <HAL_SPI_TransmitReceive+0x268>
 80028de:	e070      	b.n	80029c2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	330c      	adds	r3, #12
 80028ea:	7812      	ldrb	r2, [r2, #0]
 80028ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002906:	e05c      	b.n	80029c2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2202      	movs	r2, #2
 8002910:	4013      	ands	r3, r2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d11c      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x2d8>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d017      	beq.n	8002950 <HAL_SPI_TransmitReceive+0x2d8>
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	2b01      	cmp	r3, #1
 8002924:	d114      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	330c      	adds	r3, #12
 8002930:	7812      	ldrb	r2, [r2, #0]
 8002932:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2201      	movs	r2, #1
 8002958:	4013      	ands	r3, r2
 800295a:	2b01      	cmp	r3, #1
 800295c:	d11e      	bne.n	800299c <HAL_SPI_TransmitReceive+0x324>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2246      	movs	r2, #70	; 0x46
 8002962:	5a9b      	ldrh	r3, [r3, r2]
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d018      	beq.n	800299c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	001a      	movs	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	7812      	ldrb	r2, [r2, #0]
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2246      	movs	r2, #70	; 0x46
 800298a:	5a9b      	ldrh	r3, [r3, r2]
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b299      	uxth	r1, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2246      	movs	r2, #70	; 0x46
 8002996:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002998:	2301      	movs	r3, #1
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800299c:	f7fe fbd2 	bl	8001144 <HAL_GetTick>
 80029a0:	0002      	movs	r2, r0
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d802      	bhi.n	80029b2 <HAL_SPI_TransmitReceive+0x33a>
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	3301      	adds	r3, #1
 80029b0:	d102      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x340>
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d104      	bne.n	80029c2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80029b8:	2323      	movs	r3, #35	; 0x23
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	2203      	movs	r2, #3
 80029be:	701a      	strb	r2, [r3, #0]
        goto error;
 80029c0:	e01b      	b.n	80029fa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d19d      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x290>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2246      	movs	r2, #70	; 0x46
 80029d0:	5a9b      	ldrh	r3, [r3, r2]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d197      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 f9b6 	bl	8002d50 <SPI_EndRxTxTransaction>
 80029e4:	1e03      	subs	r3, r0, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80029e8:	2323      	movs	r3, #35	; 0x23
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	661a      	str	r2, [r3, #96]	; 0x60
 80029f6:	e000      	b.n	80029fa <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80029f8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	225d      	movs	r2, #93	; 0x5d
 80029fe:	2101      	movs	r1, #1
 8002a00:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	225c      	movs	r2, #92	; 0x5c
 8002a06:	2100      	movs	r1, #0
 8002a08:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a0a:	2323      	movs	r3, #35	; 0x23
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	781b      	ldrb	r3, [r3, #0]
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b00a      	add	sp, #40	; 0x28
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	ffffefff 	.word	0xffffefff

08002a1c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	225d      	movs	r2, #93	; 0x5d
 8002a28:	5c9b      	ldrb	r3, [r3, r2]
 8002a2a:	b2db      	uxtb	r3, r3
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	1dfb      	adds	r3, r7, #7
 8002a42:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a44:	f7fe fb7e 	bl	8001144 <HAL_GetTick>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	18d3      	adds	r3, r2, r3
 8002a52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a54:	f7fe fb76 	bl	8001144 <HAL_GetTick>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a5c:	4b3a      	ldr	r3, [pc, #232]	; (8002b48 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	015b      	lsls	r3, r3, #5
 8002a62:	0d1b      	lsrs	r3, r3, #20
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	4353      	muls	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a6a:	e058      	b.n	8002b1e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	d055      	beq.n	8002b1e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a72:	f7fe fb67 	bl	8001144 <HAL_GetTick>
 8002a76:	0002      	movs	r2, r0
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d902      	bls.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d142      	bne.n	8002b0e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	21e0      	movs	r1, #224	; 0xe0
 8002a94:	438a      	bics	r2, r1
 8002a96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	2382      	movs	r3, #130	; 0x82
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d113      	bne.n	8002acc <SPI_WaitFlagStateUntilTimeout+0x98>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d005      	beq.n	8002abc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d107      	bne.n	8002acc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2140      	movs	r1, #64	; 0x40
 8002ac8:	438a      	bics	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	019b      	lsls	r3, r3, #6
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d110      	bne.n	8002afa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	491a      	ldr	r1, [pc, #104]	; (8002b4c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2180      	movs	r1, #128	; 0x80
 8002af4:	0189      	lsls	r1, r1, #6
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	225d      	movs	r2, #93	; 0x5d
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	225c      	movs	r2, #92	; 0x5c
 8002b06:	2100      	movs	r1, #0
 8002b08:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e017      	b.n	8002b3e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	4013      	ands	r3, r2
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	425a      	negs	r2, r3
 8002b2e:	4153      	adcs	r3, r2
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	001a      	movs	r2, r3
 8002b34:	1dfb      	adds	r3, r7, #7
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d197      	bne.n	8002a6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b008      	add	sp, #32
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	20000004 	.word	0x20000004
 8002b4c:	ffffdfff 	.word	0xffffdfff

08002b50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002b5e:	2317      	movs	r3, #23
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b66:	f7fe faed 	bl	8001144 <HAL_GetTick>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	18d3      	adds	r3, r2, r3
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002b76:	f7fe fae5 	bl	8001144 <HAL_GetTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b86:	4b41      	ldr	r3, [pc, #260]	; (8002c8c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	0013      	movs	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	189b      	adds	r3, r3, r2
 8002b90:	00da      	lsls	r2, r3, #3
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	0d1b      	lsrs	r3, r3, #20
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	4353      	muls	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002b9c:	e068      	b.n	8002c70 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	23c0      	movs	r3, #192	; 0xc0
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d10a      	bne.n	8002bbe <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d107      	bne.n	8002bbe <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	2117      	movs	r1, #23
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002bba:	187b      	adds	r3, r7, r1
 8002bbc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	d055      	beq.n	8002c70 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bc4:	f7fe fabe 	bl	8001144 <HAL_GetTick>
 8002bc8:	0002      	movs	r2, r0
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d902      	bls.n	8002bda <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d142      	bne.n	8002c60 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	21e0      	movs	r1, #224	; 0xe0
 8002be6:	438a      	bics	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	2382      	movs	r3, #130	; 0x82
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d113      	bne.n	8002c1e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d005      	beq.n	8002c0e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d107      	bne.n	8002c1e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2140      	movs	r1, #64	; 0x40
 8002c1a:	438a      	bics	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	019b      	lsls	r3, r3, #6
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d110      	bne.n	8002c4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4916      	ldr	r1, [pc, #88]	; (8002c90 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002c36:	400a      	ands	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	0189      	lsls	r1, r1, #6
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	225d      	movs	r2, #93	; 0x5d
 8002c50:	2101      	movs	r1, #1
 8002c52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	225c      	movs	r2, #92	; 0x5c
 8002c58:	2100      	movs	r1, #0
 8002c5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e010      	b.n	8002c82 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d18e      	bne.n	8002b9e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	0018      	movs	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b00a      	add	sp, #40	; 0x28
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	20000004 	.word	0x20000004
 8002c90:	ffffdfff 	.word	0xffffdfff

08002c94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	2382      	movs	r3, #130	; 0x82
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d113      	bne.n	8002cd4 <SPI_EndRxTransaction+0x40>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d005      	beq.n	8002cc4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d107      	bne.n	8002cd4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2140      	movs	r1, #64	; 0x40
 8002cd0:	438a      	bics	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	0013      	movs	r3, r2
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2180      	movs	r1, #128	; 0x80
 8002ce2:	f7ff fea7 	bl	8002a34 <SPI_WaitFlagStateUntilTimeout>
 8002ce6:	1e03      	subs	r3, r0, #0
 8002ce8:	d007      	beq.n	8002cfa <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cee:	2220      	movs	r2, #32
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e026      	b.n	8002d48 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	2382      	movs	r3, #130	; 0x82
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d11f      	bne.n	8002d46 <SPI_EndRxTransaction+0xb2>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d005      	beq.n	8002d1e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d113      	bne.n	8002d46 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	23c0      	movs	r3, #192	; 0xc0
 8002d22:	00d9      	lsls	r1, r3, #3
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	0013      	movs	r3, r2
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f7ff ff0f 	bl	8002b50 <SPI_WaitFifoStateUntilTimeout>
 8002d32:	1e03      	subs	r3, r0, #0
 8002d34:	d007      	beq.n	8002d46 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e000      	b.n	8002d48 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b004      	add	sp, #16
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	23c0      	movs	r3, #192	; 0xc0
 8002d60:	0159      	lsls	r1, r3, #5
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	0013      	movs	r3, r2
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f7ff fef0 	bl	8002b50 <SPI_WaitFifoStateUntilTimeout>
 8002d70:	1e03      	subs	r3, r0, #0
 8002d72:	d007      	beq.n	8002d84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d78:	2220      	movs	r2, #32
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e027      	b.n	8002dd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	0013      	movs	r3, r2
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	f7ff fe4f 	bl	8002a34 <SPI_WaitFlagStateUntilTimeout>
 8002d96:	1e03      	subs	r3, r0, #0
 8002d98:	d007      	beq.n	8002daa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9e:	2220      	movs	r2, #32
 8002da0:	431a      	orrs	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e014      	b.n	8002dd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	23c0      	movs	r3, #192	; 0xc0
 8002dae:	00d9      	lsls	r1, r3, #3
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	0013      	movs	r3, r2
 8002db8:	2200      	movs	r2, #0
 8002dba:	f7ff fec9 	bl	8002b50 <SPI_WaitFifoStateUntilTimeout>
 8002dbe:	1e03      	subs	r3, r0, #0
 8002dc0:	d007      	beq.n	8002dd2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e000      	b.n	8002dd4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b004      	add	sp, #16
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <memset>:
 8002ddc:	0003      	movs	r3, r0
 8002dde:	1882      	adds	r2, r0, r2
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d100      	bne.n	8002de6 <memset+0xa>
 8002de4:	4770      	bx	lr
 8002de6:	7019      	strb	r1, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	e7f9      	b.n	8002de0 <memset+0x4>

08002dec <__libc_init_array>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	2600      	movs	r6, #0
 8002df0:	4c0c      	ldr	r4, [pc, #48]	; (8002e24 <__libc_init_array+0x38>)
 8002df2:	4d0d      	ldr	r5, [pc, #52]	; (8002e28 <__libc_init_array+0x3c>)
 8002df4:	1b64      	subs	r4, r4, r5
 8002df6:	10a4      	asrs	r4, r4, #2
 8002df8:	42a6      	cmp	r6, r4
 8002dfa:	d109      	bne.n	8002e10 <__libc_init_array+0x24>
 8002dfc:	2600      	movs	r6, #0
 8002dfe:	f000 f819 	bl	8002e34 <_init>
 8002e02:	4c0a      	ldr	r4, [pc, #40]	; (8002e2c <__libc_init_array+0x40>)
 8002e04:	4d0a      	ldr	r5, [pc, #40]	; (8002e30 <__libc_init_array+0x44>)
 8002e06:	1b64      	subs	r4, r4, r5
 8002e08:	10a4      	asrs	r4, r4, #2
 8002e0a:	42a6      	cmp	r6, r4
 8002e0c:	d105      	bne.n	8002e1a <__libc_init_array+0x2e>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	00b3      	lsls	r3, r6, #2
 8002e12:	58eb      	ldr	r3, [r5, r3]
 8002e14:	4798      	blx	r3
 8002e16:	3601      	adds	r6, #1
 8002e18:	e7ee      	b.n	8002df8 <__libc_init_array+0xc>
 8002e1a:	00b3      	lsls	r3, r6, #2
 8002e1c:	58eb      	ldr	r3, [r5, r3]
 8002e1e:	4798      	blx	r3
 8002e20:	3601      	adds	r6, #1
 8002e22:	e7f2      	b.n	8002e0a <__libc_init_array+0x1e>
 8002e24:	08002eb0 	.word	0x08002eb0
 8002e28:	08002eb0 	.word	0x08002eb0
 8002e2c:	08002eb4 	.word	0x08002eb4
 8002e30:	08002eb0 	.word	0x08002eb0

08002e34 <_init>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr

08002e40 <_fini>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr
